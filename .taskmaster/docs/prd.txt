# Product Requirements Document: Fix PR Comments - PR #31

## Project Overview
Fix all outstanding PR comments identified in commit 5078ad8 to ensure code quality, security, and maintainability. This includes addressing security vulnerabilities, code consistency issues, missing implementations, and technical debt.

## Business Context
This is critical for:
- Maintaining code security by removing hardcoded secrets
- Ensuring CI/CD pipeline reliability  
- Improving code maintainability and consistency
- Implementing missing critical functionality
- Resolving technical debt that could impact future development

## Technical Requirements

### Security Fixes (High Priority)
1. **Remove hardcoded API keys** from `.cursor/mcp.json` and replace with environment variable references
2. **Fix WebPush VAPID authentication** - implement proper JWT token generation and encryption
3. **Replace placeholder API endpoints** with configurable URLs in queue handlers

### Code Quality & Consistency (High Priority)  
1. **Fix service initialization duplication** in user management handlers - create helper function
2. **Standardize timestamp usage** - resolve chrono vs SystemTime inconsistencies
3. **Update KV namespace** from "ARBITRAGE_KV" to "ArbEdgeKV" for consistency
4. **Fix exponential backoff overflow** risks in retry logic

### Missing Critical Functionality (High Priority)
1. **Implement position management handlers** - full CRUD operations for `/api/v1/trading/positions`
2. **Create fallback opportunity finding service** to replace 503 errors during refactoring
3. **Implement proper health checks** instead of hardcoded healthy status returns
4. **Fix admin action error handling** with proper logging and auditing

### Documentation & Configuration (Medium Priority)
1. **Fix formatting issues** in .roomodes file newline characters
2. **Clarify mode triggers documentation** in boomerang rules  
3. **Expand or remove underdeveloped sections** in dev_workflow.md
4. **Resolve conflicting error counts** in implementation plan documents

### Performance & Monitoring (Medium Priority)
1. **Implement efficient data retrieval** for logs and alerts instead of fixed-range iteration
2. **Add proper performance metrics** collection instead of hardcoded values
3. **Implement KV store cleanup** for test keys in health checks
4. **Fix misleading service status** when fail_fast is enabled

### Implementation Strategy
- Use feature flags for gradual migration where appropriate
- Maintain backward compatibility during transitions
- Include proper error handling and logging
- Add comprehensive tests for new functionality
- Update documentation alongside code changes

## Success Criteria
- All PR comments resolved and marked as fixed
- `make ci` passes without errors
- No hardcoded secrets in version control
- All critical functionality properly implemented
- Documentation is clear and up-to-date
- No performance regressions introduced

## Technical Stack
- Rust with Cloudflare Workers
- KV Store for persistence
- D1 Database for structured data
- WebPush notifications
- Telegram Bot integration
- RESTful API endpoints

## Acceptance Criteria
1. Security vulnerabilities eliminated
2. Missing API endpoints fully functional
3. Code consistency improved across codebase
4. Performance issues resolved
5. Documentation clarity enhanced
6. CI/CD pipeline stability ensured
7. All tests passing
8. PR comments marked as resolved 