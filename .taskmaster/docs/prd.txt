# Product Requirements Document: Telegram Command Router Fix & Data Layer Resilience

## Project Overview
Fix the Telegram modular command system to properly route commands to sophisticated handlers, then implement comprehensive data layer resilience with caching, persistence, and fault tolerance.

## Phase 1: Telegram Command Router Fix

### Problem Statement
The Telegram command system has a critical architectural issue where the CommandRouter uses basic implementations instead of delegating to sophisticated modular handlers in profile.rs, opportunities.rs, admin.rs, etc.

### Requirements
1. **Fix Command Router**: Update CommandRouter::route_command to delegate to proper handlers
2. **RBAC Support**: Ensure all user roles and subscription tiers work properly
3. **Beta Features**: Enable beta command routing
4. **Admin Permissions**: Support different admin levels (Admin vs SuperAdmin)
5. **Pass CI**: All tests must pass with proper compilation

### Success Criteria
- All commands route to proper modular handlers
- RBAC works for all user types and subscription tiers
- Beta features accessible via /beta commands
- Admin commands differentiate between admin levels
- Comprehensive tests coverage
- make ci passes successfully

## Phase 2: Data Layer Resilience

### Problem Statement
Need comprehensive data layer with fault tolerance, caching, persistence, and cleanup mechanisms using Cloudflare services (KV, D1, R2).

### Requirements
1. **Multi-layer Data Access**: KV cache + D1/R2 persistence
2. **Fault Tolerance**: Graceful degradation when services fail
3. **Sync Mechanisms**: Keep cache and persistence in sync
4. **Cleanup**: Automatic cache expiration and cleanup
5. **Backward Compatibility**: Handle service restoration gracefully
6. **Chaos Engineering**: Test fault scenarios

### Architecture Components
- Primary: Cloudflare KV (cache)
- Secondary: Cloudflare D1 (relational data)
- Tertiary: Cloudflare R2 (object storage)
- Fallback: Local/memory cache
- Sync: Background sync processes
- Cleanup: TTL and periodic cleanup jobs

### Success Criteria
- Data accessible even with partial service failures
- Automatic failover and recovery
- Cache invalidation and sync working
- Performance maintained under fault conditions
- Comprehensive monitoring and alerting
- Comprehensive tests coverage
- make ci passes successfully

## Technical Stack
- Rust for core services
- Cloudflare Workers for edge computing
- Cloudflare KV for caching
- Cloudflare D1 for relational data
- Cloudflare R2 for object storage
- Telegram Bot API for user interface

## Timeline
Phase 1: 1-2 days (Command router fix)
Phase 2: 3-5 days (Data layer implementation)

## Dependencies
- Existing Telegram modular handlers
- Cloudflare account and services
- Service container architecture
- Error handling framework 