[
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved imports `crate::types::Timestamp`, `crate::types::UserActionContext`, `crate::types::UserContext`\n --> src/services/core/admin/audit.rs:5:20\n  |\n5 | ...::{Timestamp, UserActionContext, UserContext};\n  |       ^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^ no `UserContext` in `types`\n  |       |          |\n  |       |          no `UserActionContext` in `types`\n  |       no `Timestamp` in `types`\n  |\n  = help: consider importing one of these items instead:\n          crate::services::core::data_access_layer::ValidationRuleType::Timestamp\n          crate::services::core::data_ingestion_module::data_transformer::ValidationType::Timestamp\n          chrono::format::Numeric::Timestamp\n          uuid::Timestamp\n  = help: consider importing this struct through its public re-export instead:\n          crate::services::core::UserContext\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing one of these items instead:\ncrate::services::core::data_access_layer::ValidationRuleType::Timestamp\ncrate::services::core::data_ingestion_module::data_transformer::ValidationType::Timestamp\nchrono::format::Numeric::Timestamp\nuuid::Timestamp",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct through its public re-export instead:\ncrate::services::core::UserContext",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved imports `crate::types::Timestamp`, `crate::types::UserActionContext`, `crate::types::UserContext`",
      "spans": [
        {
          "byte_end": 124,
          "byte_start": 115,
          "column_end": 29,
          "column_start": 20,
          "expansion": null,
          "file_name": "src/services/core/admin/audit.rs",
          "is_primary": true,
          "label": "no `Timestamp` in `types`",
          "line_end": 5,
          "line_start": 5,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 29,
              "highlight_start": 20,
              "text": "use crate::types::{Timestamp, UserActionContext, UserContext};"
            }
          ]
        },
        {
          "byte_end": 143,
          "byte_start": 126,
          "column_end": 48,
          "column_start": 31,
          "expansion": null,
          "file_name": "src/services/core/admin/audit.rs",
          "is_primary": true,
          "label": "no `UserActionContext` in `types`",
          "line_end": 5,
          "line_start": 5,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 48,
              "highlight_start": 31,
              "text": "use crate::types::{Timestamp, UserActionContext, UserContext};"
            }
          ]
        },
        {
          "byte_end": 156,
          "byte_start": 145,
          "column_end": 61,
          "column_start": 50,
          "expansion": null,
          "file_name": "src/services/core/admin/audit.rs",
          "is_primary": true,
          "label": "no `UserContext` in `types`",
          "line_end": 5,
          "line_start": 5,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 61,
              "highlight_start": 50,
              "text": "use crate::types::{Timestamp, UserActionContext, UserContext};"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved imports `crate::types::Timestamp`, `crate::types::UserActionContext`, `crate::types::UserContext`\n --> src/services/core/admin/audit.rs:5:20\n  |\n5 | ...::{Timestamp, UserActionContext, UserContext};\n  |       ^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^ no `UserContext` in `types`\n  |       |          |\n  |       |          no `UserActionContext` in `types`\n  |       no `Timestamp` in `types`\n  |\n  = help: consider importing one of these items instead:\n          crate::services::core::data_access_layer::ValidationRuleType::Timestamp\n          crate::services::core::data_ingestion_module::data_transformer::ValidationType::Timestamp\n          chrono::format::Numeric::Timestamp\n          uuid::Timestamp\n  = help: consider importing this struct through its public re-export instead:\n          crate::services::core::UserContext\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing one of these items instead:\ncrate::services::core::data_access_layer::ValidationRuleType::Timestamp\ncrate::services::core::data_ingestion_module::data_transformer::ValidationType::Timestamp\nchrono::format::Numeric::Timestamp\nuuid::Timestamp",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct through its public re-export instead:\ncrate::services::core::UserContext",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved imports `crate::types::Timestamp`, `crate::types::UserActionContext`, `crate::types::UserContext`",
      "spans": [
        {
          "byte_end": 124,
          "byte_start": 115,
          "column_end": 29,
          "column_start": 20,
          "expansion": null,
          "file_name": "src/services/core/admin/audit.rs",
          "is_primary": true,
          "label": "no `Timestamp` in `types`",
          "line_end": 5,
          "line_start": 5,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 29,
              "highlight_start": 20,
              "text": "use crate::types::{Timestamp, UserActionContext, UserContext};"
            }
          ]
        },
        {
          "byte_end": 143,
          "byte_start": 126,
          "column_end": 48,
          "column_start": 31,
          "expansion": null,
          "file_name": "src/services/core/admin/audit.rs",
          "is_primary": true,
          "label": "no `UserActionContext` in `types`",
          "line_end": 5,
          "line_start": 5,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 48,
              "highlight_start": 31,
              "text": "use crate::types::{Timestamp, UserActionContext, UserContext};"
            }
          ]
        },
        {
          "byte_end": 156,
          "byte_start": 145,
          "column_end": 61,
          "column_start": 50,
          "expansion": null,
          "file_name": "src/services/core/admin/audit.rs",
          "is_primary": true,
          "label": "no `UserContext` in `types`",
          "line_end": 5,
          "line_start": 5,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 61,
              "highlight_start": 50,
              "text": "use crate::types::{Timestamp, UserActionContext, UserContext};"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved import `crate::types::Role`\n  --> src/services/core/auth/rbac.rs:12:39\n   |\n12 | ...ssion, Role, UserRole};\n   |           ^^^^ no `Role` in `types`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved import `crate::types::Role`",
      "spans": [
        {
          "byte_end": 476,
          "byte_start": 472,
          "column_end": 43,
          "column_start": 39,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "no `Role` in `types`",
          "line_end": 12,
          "line_start": 12,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 43,
              "highlight_start": 39,
              "text": "use crate::types::{CommandPermission, Role, UserRole};"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved import `crate::types::Role`\n  --> src/services/core/auth/rbac.rs:12:39\n   |\n12 | ...ssion, Role, UserRole};\n   |           ^^^^ no `Role` in `types`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved import `crate::types::Role`",
      "spans": [
        {
          "byte_end": 476,
          "byte_start": 472,
          "column_end": 43,
          "column_start": 39,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "no `Role` in `types`",
          "line_end": 12,
          "line_start": 12,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 43,
              "highlight_start": 39,
              "text": "use crate::types::{CommandPermission, Role, UserRole};"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved imports `crate::types::AuthRequest`, `crate::types::AuthResponse`, `crate::types::LoginRequest`, `crate::types::RegistrationRequest`, `crate::types::User`\n  --> src/services/core/auth/user_auth.rs:10:20\n   |\n10 | ...::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};\n   |       ^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^ no `User` in `types`\n   |       |            |             |             |\n   |       |            |             |             no `RegistrationRequest` in `types`\n   |       |            |             no `LoginRequest` in `types`\n   |       |            no `AuthResponse` in `types`\n   |       no `AuthRequest` in `types`\n   |\n   = help: consider importing this struct instead:\n           sysinfo::User\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct instead:\nsysinfo::User",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved imports `crate::types::AuthRequest`, `crate::types::AuthResponse`, `crate::types::LoginRequest`, `crate::types::RegistrationRequest`, `crate::types::User`",
      "spans": [
        {
          "byte_end": 347,
          "byte_start": 336,
          "column_end": 31,
          "column_start": 20,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `AuthRequest` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 31,
              "highlight_start": 20,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        },
        {
          "byte_end": 361,
          "byte_start": 349,
          "column_end": 45,
          "column_start": 33,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `AuthResponse` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 45,
              "highlight_start": 33,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        },
        {
          "byte_end": 375,
          "byte_start": 363,
          "column_end": 59,
          "column_start": 47,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `LoginRequest` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 47,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        },
        {
          "byte_end": 396,
          "byte_start": 377,
          "column_end": 80,
          "column_start": 61,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `RegistrationRequest` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 80,
              "highlight_start": 61,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        },
        {
          "byte_end": 402,
          "byte_start": 398,
          "column_end": 86,
          "column_start": 82,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `User` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 82,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved import `crate::types::FeatureFlag`\n  --> src/services/core/infrastructure/mod.rs:29:5\n   |\n29 | use crate::types::FeatureFlag;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `FeatureFlag` in `types`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved import `crate::types::FeatureFlag`",
      "spans": [
        {
          "byte_end": 1385,
          "byte_start": 1360,
          "column_end": 30,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/mod.rs",
          "is_primary": true,
          "label": "no `FeatureFlag` in `types`",
          "line_end": 29,
          "line_start": 29,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 30,
              "highlight_start": 5,
              "text": "use crate::types::FeatureFlag;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved imports `crate::types::AuthRequest`, `crate::types::AuthResponse`, `crate::types::LoginRequest`, `crate::types::RegistrationRequest`, `crate::types::User`\n  --> src/services/core/auth/user_auth.rs:10:20\n   |\n10 | ...::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};\n   |       ^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^  ^^^^ no `User` in `types`\n   |       |            |             |             |\n   |       |            |             |             no `RegistrationRequest` in `types`\n   |       |            |             no `LoginRequest` in `types`\n   |       |            no `AuthResponse` in `types`\n   |       no `AuthRequest` in `types`\n   |\n   = help: consider importing this struct instead:\n           sysinfo::User\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct instead:\nsysinfo::User",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved imports `crate::types::AuthRequest`, `crate::types::AuthResponse`, `crate::types::LoginRequest`, `crate::types::RegistrationRequest`, `crate::types::User`",
      "spans": [
        {
          "byte_end": 347,
          "byte_start": 336,
          "column_end": 31,
          "column_start": 20,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `AuthRequest` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 31,
              "highlight_start": 20,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        },
        {
          "byte_end": 361,
          "byte_start": 349,
          "column_end": 45,
          "column_start": 33,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `AuthResponse` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 45,
              "highlight_start": 33,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        },
        {
          "byte_end": 375,
          "byte_start": 363,
          "column_end": 59,
          "column_start": 47,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `LoginRequest` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 47,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        },
        {
          "byte_end": 396,
          "byte_start": 377,
          "column_end": 80,
          "column_start": 61,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `RegistrationRequest` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 80,
              "highlight_start": 61,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        },
        {
          "byte_end": 402,
          "byte_start": 398,
          "column_end": 86,
          "column_start": 82,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "no `User` in `types`",
          "line_end": 10,
          "line_start": 10,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 82,
              "text": "use crate::types::{AuthRequest, AuthResponse, LoginRequest, RegistrationRequest, User};"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved import `crate::types::FeatureFlag`\n  --> src/services/core/infrastructure/mod.rs:29:5\n   |\n29 | use crate::types::FeatureFlag;\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ no `FeatureFlag` in `types`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved import `crate::types::FeatureFlag`",
      "spans": [
        {
          "byte_end": 1385,
          "byte_start": 1360,
          "column_end": 30,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/mod.rs",
          "is_primary": true,
          "label": "no `FeatureFlag` in `types`",
          "line_end": 29,
          "line_start": 29,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 30,
              "highlight_start": 5,
              "text": "use crate::types::FeatureFlag;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved imports `super::FeatureFlagConfig`, `super::FeatureFlagService`\n  --> src/services/core/infrastructure/infrastructure_engine.rs:20:56\n   |\n20 | ...g, FeatureFlagConfig, FeatureFlagService,\n   |       ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^ no `FeatureFlagService` in `services::core::infrastructure`\n   |       |\n   |       no `FeatureFlagConfig` in `services::core::infrastructure`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved imports `super::FeatureFlagConfig`, `super::FeatureFlagService`",
      "spans": [
        {
          "byte_end": 897,
          "byte_start": 880,
          "column_end": 73,
          "column_start": 56,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "no `FeatureFlagConfig` in `services::core::infrastructure`",
          "line_end": 20,
          "line_start": 20,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 73,
              "highlight_start": 56,
              "text": "    D1Service, DatabaseManager, DatabaseManagerConfig, FeatureFlagConfig, FeatureFlagService,"
            }
          ]
        },
        {
          "byte_end": 917,
          "byte_start": 899,
          "column_end": 93,
          "column_start": 75,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "no `FeatureFlagService` in `services::core::infrastructure`",
          "line_end": 20,
          "line_start": 20,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 93,
              "highlight_start": 75,
              "text": "    D1Service, DatabaseManager, DatabaseManagerConfig, FeatureFlagConfig, FeatureFlagService,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved imports `super::FeatureFlagConfig`, `super::FeatureFlagService`\n  --> src/services/core/infrastructure/infrastructure_engine.rs:20:56\n   |\n20 | ...g, FeatureFlagConfig, FeatureFlagService,\n   |       ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^ no `FeatureFlagService` in `services::core::infrastructure`\n   |       |\n   |       no `FeatureFlagConfig` in `services::core::infrastructure`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved imports `super::FeatureFlagConfig`, `super::FeatureFlagService`",
      "spans": [
        {
          "byte_end": 897,
          "byte_start": 880,
          "column_end": 73,
          "column_start": 56,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "no `FeatureFlagConfig` in `services::core::infrastructure`",
          "line_end": 20,
          "line_start": 20,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 73,
              "highlight_start": 56,
              "text": "    D1Service, DatabaseManager, DatabaseManagerConfig, FeatureFlagConfig, FeatureFlagService,"
            }
          ]
        },
        {
          "byte_end": 917,
          "byte_start": 899,
          "column_end": 93,
          "column_start": 75,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "no `FeatureFlagService` in `services::core::infrastructure`",
          "line_end": 20,
          "line_start": 20,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 93,
              "highlight_start": 75,
              "text": "    D1Service, DatabaseManager, DatabaseManagerConfig, FeatureFlagConfig, FeatureFlagService,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved import `crate::services::core::opportunities::cache_manager::CacheManager`\n --> src/services/core/opportunities/opportunity_engine.rs:8:5\n  |\n8 |     cache_manager::CacheManager,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CacheManager` in `services::core::opportunities::cache_manager`\n  |\n  = help: consider importing this struct through its public re-export instead:\n          crate::services::CacheManager\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct through its public re-export instead:\ncrate::services::CacheManager",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved import `crate::services::core::opportunities::cache_manager::CacheManager`",
      "spans": [
        {
          "byte_end": 296,
          "byte_start": 269,
          "column_end": 32,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/core/opportunities/opportunity_engine.rs",
          "is_primary": true,
          "label": "no `CacheManager` in `services::core::opportunities::cache_manager`",
          "line_end": 8,
          "line_start": 8,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 5,
              "text": "    cache_manager::CacheManager,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved import `crate::services::core::opportunities::cache_manager::CacheManager`\n --> src/services/core/opportunities/opportunity_engine.rs:8:5\n  |\n8 |     cache_manager::CacheManager,\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `CacheManager` in `services::core::opportunities::cache_manager`\n  |\n  = help: consider importing this struct through its public re-export instead:\n          crate::services::CacheManager\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct through its public re-export instead:\ncrate::services::CacheManager",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved import `crate::services::core::opportunities::cache_manager::CacheManager`",
      "spans": [
        {
          "byte_end": 296,
          "byte_start": 269,
          "column_end": 32,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/core/opportunities/opportunity_engine.rs",
          "is_primary": true,
          "label": "no `CacheManager` in `services::core::opportunities::cache_manager`",
          "line_end": 8,
          "line_start": 8,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 5,
              "text": "    cache_manager::CacheManager,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved imports `crate::types::NotificationPreferences`, `crate::types::SubscriptionInfo`\n   --> src/services/core/user/ai_access.rs:894:9\n    |\n894 | ...   NotificationPreferences, SubscriptionInfo, S...\n    |       ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^\n    |       |                        |\n    |       |                        no `SubscriptionInfo` in `types`\n    |       |                        help: a similar name exists in the module: `SubscriptionTier`\n    |       no `NotificationPreferences` in `types`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "a similar name exists in the module",
          "rendered": null,
          "spans": [
            {
              "byte_end": 33631,
              "byte_start": 33615,
              "column_end": 50,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 894,
              "line_start": 894,
              "suggested_replacement": "SubscriptionTier",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 50,
                  "highlight_start": 34,
                  "text": "        NotificationPreferences, SubscriptionInfo, SubscriptionTier, UserConfiguration,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved imports `crate::types::NotificationPreferences`, `crate::types::SubscriptionInfo`",
      "spans": [
        {
          "byte_end": 33613,
          "byte_start": 33590,
          "column_end": 32,
          "column_start": 9,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "no `NotificationPreferences` in `types`",
          "line_end": 894,
          "line_start": 894,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 9,
              "text": "        NotificationPreferences, SubscriptionInfo, SubscriptionTier, UserConfiguration,"
            }
          ]
        },
        {
          "byte_end": 33631,
          "byte_start": 33615,
          "column_end": 50,
          "column_start": 34,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "no `SubscriptionInfo` in `types`",
          "line_end": 894,
          "line_start": 894,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 50,
              "highlight_start": 34,
              "text": "        NotificationPreferences, SubscriptionInfo, SubscriptionTier, UserConfiguration,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved imports `crate::types::MessageType`, `crate::types::TelegramBotCommand`, `crate::types::TelegramConfig`, `crate::types::TelegramUpdate`, `crate::types::User`, `crate::types::UserInterfaceConfig`\n  --> src/services/interfaces/telegram/telegram.rs:25:5\n   |\n25 |     MessageType,\n   |     ^^^^^^^^^^^ no `MessageType` in `types`\n26 |     TelegramBotCommand,\n   |     ^^^^^^^^^^^^^^^^^^ no `TelegramBotCommand` in `types`\n27 |     TelegramConfig,\n   |     ^^^^^^^^^^^^^^ no `TelegramConfig` in `types`\n28 |     TelegramUpdate,\n   |     ^^^^^^^^^^^^^^ no `TelegramUpdate` in `types`\n29 |     User,\n   |     ^^^^ no `User` in `types`\n30 |     UserInterfaceConfig,\n   |     ^^^^^^^^^^^^^^^^^^^ no `UserInterfaceConfig` in `types`\n   |\n   = help: consider importing this struct instead:\n           sysinfo::User\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct instead:\nsysinfo::User",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved imports `crate::types::MessageType`, `crate::types::TelegramBotCommand`, `crate::types::TelegramConfig`, `crate::types::TelegramUpdate`, `crate::types::User`, `crate::types::UserInterfaceConfig`",
      "spans": [
        {
          "byte_end": 1285,
          "byte_start": 1274,
          "column_end": 16,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `MessageType` in `types`",
          "line_end": 25,
          "line_start": 25,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 16,
              "highlight_start": 5,
              "text": "    MessageType,"
            }
          ]
        },
        {
          "byte_end": 1309,
          "byte_start": 1291,
          "column_end": 23,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `TelegramBotCommand` in `types`",
          "line_end": 26,
          "line_start": 26,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 23,
              "highlight_start": 5,
              "text": "    TelegramBotCommand,"
            }
          ]
        },
        {
          "byte_end": 1329,
          "byte_start": 1315,
          "column_end": 19,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `TelegramConfig` in `types`",
          "line_end": 27,
          "line_start": 27,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 19,
              "highlight_start": 5,
              "text": "    TelegramConfig,"
            }
          ]
        },
        {
          "byte_end": 1349,
          "byte_start": 1335,
          "column_end": 19,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `TelegramUpdate` in `types`",
          "line_end": 28,
          "line_start": 28,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 19,
              "highlight_start": 5,
              "text": "    TelegramUpdate,"
            }
          ]
        },
        {
          "byte_end": 1359,
          "byte_start": 1355,
          "column_end": 9,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `User` in `types`",
          "line_end": 29,
          "line_start": 29,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 9,
              "highlight_start": 5,
              "text": "    User,"
            }
          ]
        },
        {
          "byte_end": 1384,
          "byte_start": 1365,
          "column_end": 24,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `UserInterfaceConfig` in `types`",
          "line_end": 30,
          "line_start": 30,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 5,
              "text": "    UserInterfaceConfig,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0432]: unresolved imports `crate::types::MessageType`, `crate::types::TelegramBotCommand`, `crate::types::TelegramConfig`, `crate::types::TelegramUpdate`, `crate::types::User`, `crate::types::UserInterfaceConfig`\n  --> src/services/interfaces/telegram/telegram.rs:25:5\n   |\n25 |     MessageType,\n   |     ^^^^^^^^^^^ no `MessageType` in `types`\n26 |     TelegramBotCommand,\n   |     ^^^^^^^^^^^^^^^^^^ no `TelegramBotCommand` in `types`\n27 |     TelegramConfig,\n   |     ^^^^^^^^^^^^^^ no `TelegramConfig` in `types`\n28 |     TelegramUpdate,\n   |     ^^^^^^^^^^^^^^ no `TelegramUpdate` in `types`\n29 |     User,\n   |     ^^^^ no `User` in `types`\n30 |     UserInterfaceConfig,\n   |     ^^^^^^^^^^^^^^^^^^^ no `UserInterfaceConfig` in `types`\n   |\n   = help: consider importing this struct instead:\n           sysinfo::User\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct instead:\nsysinfo::User",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0432",
        "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
      },
      "level": "error",
      "message": "unresolved imports `crate::types::MessageType`, `crate::types::TelegramBotCommand`, `crate::types::TelegramConfig`, `crate::types::TelegramUpdate`, `crate::types::User`, `crate::types::UserInterfaceConfig`",
      "spans": [
        {
          "byte_end": 1285,
          "byte_start": 1274,
          "column_end": 16,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `MessageType` in `types`",
          "line_end": 25,
          "line_start": 25,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 16,
              "highlight_start": 5,
              "text": "    MessageType,"
            }
          ]
        },
        {
          "byte_end": 1309,
          "byte_start": 1291,
          "column_end": 23,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `TelegramBotCommand` in `types`",
          "line_end": 26,
          "line_start": 26,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 23,
              "highlight_start": 5,
              "text": "    TelegramBotCommand,"
            }
          ]
        },
        {
          "byte_end": 1329,
          "byte_start": 1315,
          "column_end": 19,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `TelegramConfig` in `types`",
          "line_end": 27,
          "line_start": 27,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 19,
              "highlight_start": 5,
              "text": "    TelegramConfig,"
            }
          ]
        },
        {
          "byte_end": 1349,
          "byte_start": 1335,
          "column_end": 19,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `TelegramUpdate` in `types`",
          "line_end": 28,
          "line_start": 28,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 19,
              "highlight_start": 5,
              "text": "    TelegramUpdate,"
            }
          ]
        },
        {
          "byte_end": 1359,
          "byte_start": 1355,
          "column_end": 9,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `User` in `types`",
          "line_end": 29,
          "line_start": 29,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 9,
              "highlight_start": 5,
              "text": "    User,"
            }
          ]
        },
        {
          "byte_end": 1384,
          "byte_start": 1365,
          "column_end": 24,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "no `UserInterfaceConfig` in `types`",
          "line_end": 30,
          "line_start": 30,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 5,
              "text": "    UserInterfaceConfig,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `UserAccessLevel`\n  --> src/services/core/auth/rbac.rs:84:13\n   |\n84 |             UserAccessLevel::SuperAdmin | U...\n   |             ^^^^^^^^^^^^^^^ use of undeclared type `UserAccessLevel`\n   |\nhelp: consider importing this enum\n   |\n10 + use crate::types::UserAccessLevel;\n   |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this enum",
          "rendered": null,
          "spans": [
            {
              "byte_end": 323,
              "byte_start": 323,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/auth/rbac.rs",
              "is_primary": true,
              "label": null,
              "line_end": 10,
              "line_start": 10,
              "suggested_replacement": "use crate::types::UserAccessLevel;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::infrastructure::service_container::ServiceContainer;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `UserAccessLevel`",
      "spans": [
        {
          "byte_end": 2801,
          "byte_start": 2786,
          "column_end": 28,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "use of undeclared type `UserAccessLevel`",
          "line_end": 84,
          "line_start": 84,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 13,
              "text": "            UserAccessLevel::SuperAdmin | UserAccessLevel::Admin"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `UserAccessLevel`\n  --> src/services/core/auth/rbac.rs:84:43\n   |\n84 | ...rAdmin | UserAccessLevel::Admin\n   |             ^^^^^^^^^^^^^^^ use of undeclared type `UserAccessLevel`\n   |\nhelp: consider importing this enum\n   |\n10 + use crate::types::UserAccessLevel;\n   |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this enum",
          "rendered": null,
          "spans": [
            {
              "byte_end": 323,
              "byte_start": 323,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/auth/rbac.rs",
              "is_primary": true,
              "label": null,
              "line_end": 10,
              "line_start": 10,
              "suggested_replacement": "use crate::types::UserAccessLevel;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::infrastructure::service_container::ServiceContainer;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `UserAccessLevel`",
      "spans": [
        {
          "byte_end": 2831,
          "byte_start": 2816,
          "column_end": 58,
          "column_start": 43,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "use of undeclared type `UserAccessLevel`",
          "line_end": 84,
          "line_start": 84,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 58,
              "highlight_start": 43,
              "text": "            UserAccessLevel::SuperAdmin | UserAccessLevel::Admin"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0407]: method `mock_delete` is not a member of trait `KvOperations`\n   --> src/test_utils/mock_kv_store.rs:115:5\n    |\n115 | /     async fn mock_delete(&mut self, key:...\n116 | |         *self.operation_count.lock().awa...\n117 | |         if let Some(ref error_type) = se...\n118 | |             return match error_type.as_s...\n...   |\n126 | |         Ok(())\n127 | |     }\n    | |_____^ not a member of trait `KvOperations`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0407",
        "explanation": "A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"
      },
      "level": "error",
      "message": "method `mock_delete` is not a member of trait `KvOperations`",
      "spans": [
        {
          "byte_end": 4908,
          "byte_start": 4369,
          "column_end": 6,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/test_utils/mock_kv_store.rs",
          "is_primary": true,
          "label": "not a member of trait `KvOperations`",
          "line_end": 127,
          "line_start": 115,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 72,
              "highlight_start": 5,
              "text": "    async fn mock_delete(&mut self, key: &str) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "        *self.operation_count.lock().await += 1;"
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "        if let Some(ref error_type) = self.error_simulation {"
            },
            {
              "highlight_end": 47,
              "highlight_start": 1,
              "text": "            return match error_type.as_str() {"
            },
            {
              "highlight_end": 40,
              "highlight_start": 1,
              "text": "                \"kv_delete_failed\" => {"
            },
            {
              "highlight_end": 86,
              "highlight_start": 1,
              "text": "                    Err(ArbitrageError::database_error(\"KV delete operation failed\"))"
            },
            {
              "highlight_end": 18,
              "highlight_start": 1,
              "text": "                }"
            },
            {
              "highlight_end": 80,
              "highlight_start": 1,
              "text": "                _ => Err(ArbitrageError::validation_error(\"Unknown KV error\")),"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            };"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 44,
              "highlight_start": 1,
              "text": "        self.data.lock().await.remove(key);"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `UserAccessLevel`\n   --> src/services/core/auth/rbac.rs:120:48\n    |\n120 | ...s_level, UserAccessLevel::SuperAdmin) {\n    |             ^^^^^^^^^^^^^^^ use of undeclared type `UserAccessLevel`\n    |\nhelp: consider importing this enum\n    |\n10  + use crate::types::UserAccessLevel;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this enum",
          "rendered": null,
          "spans": [
            {
              "byte_end": 323,
              "byte_start": 323,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/auth/rbac.rs",
              "is_primary": true,
              "label": null,
              "line_end": 10,
              "line_start": 10,
              "suggested_replacement": "use crate::types::UserAccessLevel;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::infrastructure::service_container::ServiceContainer;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `UserAccessLevel`",
      "spans": [
        {
          "byte_end": 3996,
          "byte_start": 3981,
          "column_end": 63,
          "column_start": 48,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "use of undeclared type `UserAccessLevel`",
          "line_end": 120,
          "line_start": 120,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 63,
              "highlight_start": 48,
              "text": "        if matches!(user_profile.access_level, UserAccessLevel::SuperAdmin) {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0412]: cannot find type `RateLimitInfo` in this scope\n   --> src/services/core/trading/exchange.rs:743:46\n    |\n743 | ...ol, Option<RateLimitInfo>)> {\n    |               ^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n3   + use crate::services::core::RateLimitInfo;\n    |\n3   + use crate::services::core::notification_module::channel_manager::RateLimitInfo;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing one of these structs",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/trading/exchange.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::core::RateLimitInfo;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use reqwest::{Client, Method};"
                }
              ]
            },
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/trading/exchange.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::core::notification_module::channel_manager::RateLimitInfo;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use reqwest::{Client, Method};"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0412",
        "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
      },
      "level": "error",
      "message": "cannot find type `RateLimitInfo` in this scope",
      "spans": [
        {
          "byte_end": 24868,
          "byte_start": 24855,
          "column_end": 59,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/trading/exchange.rs",
          "is_primary": true,
          "label": "not found in this scope",
          "line_end": 743,
          "line_start": 743,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 46,
              "text": "    ) -> ArbitrageResult<(bool, bool, Option<RateLimitInfo>)> {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0412]: cannot find type `RateLimitInfo` in this scope\n   --> src/services/core/trading/exchange.rs:755:46\n    |\n755 | ...ol, Option<RateLimitInfo>)> {\n    |               ^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n3   + use crate::services::core::RateLimitInfo;\n    |\n3   + use crate::services::core::notification_module::channel_manager::RateLimitInfo;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing one of these structs",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/trading/exchange.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::core::RateLimitInfo;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use reqwest::{Client, Method};"
                }
              ]
            },
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/trading/exchange.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::core::notification_module::channel_manager::RateLimitInfo;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use reqwest::{Client, Method};"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0412",
        "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
      },
      "level": "error",
      "message": "cannot find type `RateLimitInfo` in this scope",
      "spans": [
        {
          "byte_end": 25255,
          "byte_start": 25242,
          "column_end": 59,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/trading/exchange.rs",
          "is_primary": true,
          "label": "not found in this scope",
          "line_end": 755,
          "line_start": 755,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 46,
              "text": "    ) -> ArbitrageResult<(bool, bool, Option<RateLimitInfo>)> {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `UserAccessLevel`\n  --> src/services/core/auth/rbac.rs:84:13\n   |\n84 |             UserAccessLevel::SuperAdmin | U...\n   |             ^^^^^^^^^^^^^^^ use of undeclared type `UserAccessLevel`\n   |\nhelp: consider importing this enum\n   |\n10 + use crate::types::UserAccessLevel;\n   |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this enum",
          "rendered": null,
          "spans": [
            {
              "byte_end": 323,
              "byte_start": 323,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/auth/rbac.rs",
              "is_primary": true,
              "label": null,
              "line_end": 10,
              "line_start": 10,
              "suggested_replacement": "use crate::types::UserAccessLevel;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::infrastructure::service_container::ServiceContainer;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `UserAccessLevel`",
      "spans": [
        {
          "byte_end": 2801,
          "byte_start": 2786,
          "column_end": 28,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "use of undeclared type `UserAccessLevel`",
          "line_end": 84,
          "line_start": 84,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 13,
              "text": "            UserAccessLevel::SuperAdmin | UserAccessLevel::Admin"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `Nonce`\n   --> src/services/core/user/user_exchange_api.rs:569:21\n    |\n569 | ... let nonce = Nonce::from_slice(nonce_by...\n    |                 ^^^^^ use of undeclared type `Nonce`\n    |\nhelp: consider importing this type alias\n    |\n1   + use aes_gcm::Nonce;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this type alias",
          "rendered": null,
          "spans": [
            {
              "byte_end": 0,
              "byte_start": 0,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/user/user_exchange_api.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1,
              "line_start": 1,
              "suggested_replacement": "use aes_gcm::Nonce;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::log_info;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `Nonce`",
      "spans": [
        {
          "byte_end": 20549,
          "byte_start": 20544,
          "column_end": 26,
          "column_start": 21,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": "use of undeclared type `Nonce`",
          "line_end": 569,
          "line_start": 569,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 21,
              "text": "        let nonce = Nonce::from_slice(nonce_bytes);"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `UserAccessLevel`\n  --> src/services/core/auth/rbac.rs:84:43\n   |\n84 | ...rAdmin | UserAccessLevel::Admin\n   |             ^^^^^^^^^^^^^^^ use of undeclared type `UserAccessLevel`\n   |\nhelp: consider importing this enum\n   |\n10 + use crate::types::UserAccessLevel;\n   |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this enum",
          "rendered": null,
          "spans": [
            {
              "byte_end": 323,
              "byte_start": 323,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/auth/rbac.rs",
              "is_primary": true,
              "label": null,
              "line_end": 10,
              "line_start": 10,
              "suggested_replacement": "use crate::types::UserAccessLevel;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::infrastructure::service_container::ServiceContainer;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `UserAccessLevel`",
      "spans": [
        {
          "byte_end": 2831,
          "byte_start": 2816,
          "column_end": 58,
          "column_start": 43,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "use of undeclared type `UserAccessLevel`",
          "line_end": 84,
          "line_start": 84,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 58,
              "highlight_start": 43,
              "text": "            UserAccessLevel::SuperAdmin | UserAccessLevel::Admin"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `InlineKeyboard`\n    --> src/services/interfaces/telegram/telegram.rs:1182:30\n     |\n1182 | ...yboard = InlineKeyboard::new();\n     |             ^^^^^^^^^^^^^^ use of undeclared type `InlineKeyboard`\n     |\nhelp: consider importing this struct through its public re-export\n     |\n3    + use crate::services::InlineKeyboard;\n     |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct through its public re-export",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/interfaces/telegram/telegram.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::InlineKeyboard;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::ai::{"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `InlineKeyboard`",
      "spans": [
        {
          "byte_end": 41694,
          "byte_start": 41680,
          "column_end": 44,
          "column_start": 30,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "use of undeclared type `InlineKeyboard`",
          "line_end": 1182,
          "line_start": 1182,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 44,
              "highlight_start": 30,
              "text": "        let empty_keyboard = InlineKeyboard::new();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `UserAccessLevel`\n   --> src/services/core/auth/rbac.rs:120:48\n    |\n120 | ...s_level, UserAccessLevel::SuperAdmin) {\n    |             ^^^^^^^^^^^^^^^ use of undeclared type `UserAccessLevel`\n    |\nhelp: consider importing this enum\n    |\n10  + use crate::types::UserAccessLevel;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this enum",
          "rendered": null,
          "spans": [
            {
              "byte_end": 323,
              "byte_start": 323,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/auth/rbac.rs",
              "is_primary": true,
              "label": null,
              "line_end": 10,
              "line_start": 10,
              "suggested_replacement": "use crate::types::UserAccessLevel;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::infrastructure::service_container::ServiceContainer;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `UserAccessLevel`",
      "spans": [
        {
          "byte_end": 3996,
          "byte_start": 3981,
          "column_end": 63,
          "column_start": 48,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "use of undeclared type `UserAccessLevel`",
          "line_end": 120,
          "line_start": 120,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 63,
              "highlight_start": 48,
              "text": "        if matches!(user_profile.access_level, UserAccessLevel::SuperAdmin) {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0412]: cannot find type `InlineKeyboard` in this scope\n    --> src/services/interfaces/telegram/telegram.rs:1192:20\n     |\n1192 |         keyboard: &InlineKeyboard,\n     |                    ^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing this struct through its public re-export\n     |\n3    + use crate::services::InlineKeyboard;\n     |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct through its public re-export",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/interfaces/telegram/telegram.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::InlineKeyboard;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::ai::{"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0412",
        "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
      },
      "level": "error",
      "message": "cannot find type `InlineKeyboard` in this scope",
      "spans": [
        {
          "byte_end": 41996,
          "byte_start": 41982,
          "column_end": 34,
          "column_start": 20,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "not found in this scope",
          "line_end": 1192,
          "line_start": 1192,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 34,
              "highlight_start": 20,
              "text": "        keyboard: &InlineKeyboard,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0412]: cannot find type `RateLimitInfo` in this scope\n   --> src/services/core/trading/exchange.rs:743:46\n    |\n743 | ...ol, Option<RateLimitInfo>)> {\n    |               ^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n3   + use crate::services::core::RateLimitInfo;\n    |\n3   + use crate::services::core::notification_module::channel_manager::RateLimitInfo;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing one of these structs",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/trading/exchange.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::core::RateLimitInfo;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use reqwest::{Client, Method};"
                }
              ]
            },
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/trading/exchange.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::core::notification_module::channel_manager::RateLimitInfo;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use reqwest::{Client, Method};"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0412",
        "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
      },
      "level": "error",
      "message": "cannot find type `RateLimitInfo` in this scope",
      "spans": [
        {
          "byte_end": 24868,
          "byte_start": 24855,
          "column_end": 59,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/trading/exchange.rs",
          "is_primary": true,
          "label": "not found in this scope",
          "line_end": 743,
          "line_start": 743,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 46,
              "text": "    ) -> ArbitrageResult<(bool, bool, Option<RateLimitInfo>)> {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0412]: cannot find type `RateLimitInfo` in this scope\n   --> src/services/core/trading/exchange.rs:755:46\n    |\n755 | ...ol, Option<RateLimitInfo>)> {\n    |               ^^^^^^^^^^^^^ not found in this scope\n    |\nhelp: consider importing one of these structs\n    |\n3   + use crate::services::core::RateLimitInfo;\n    |\n3   + use crate::services::core::notification_module::channel_manager::RateLimitInfo;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing one of these structs",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/trading/exchange.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::core::RateLimitInfo;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use reqwest::{Client, Method};"
                }
              ]
            },
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/trading/exchange.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::core::notification_module::channel_manager::RateLimitInfo;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use reqwest::{Client, Method};"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0412",
        "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
      },
      "level": "error",
      "message": "cannot find type `RateLimitInfo` in this scope",
      "spans": [
        {
          "byte_end": 25255,
          "byte_start": 25242,
          "column_end": 59,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/trading/exchange.rs",
          "is_primary": true,
          "label": "not found in this scope",
          "line_end": 755,
          "line_start": 755,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 46,
              "text": "    ) -> ArbitrageResult<(bool, bool, Option<RateLimitInfo>)> {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `Nonce`\n   --> src/services/core/user/user_exchange_api.rs:569:21\n    |\n569 | ... let nonce = Nonce::from_slice(nonce_by...\n    |                 ^^^^^ use of undeclared type `Nonce`\n    |\nhelp: consider importing this type alias\n    |\n1   + use aes_gcm::Nonce;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this type alias",
          "rendered": null,
          "spans": [
            {
              "byte_end": 0,
              "byte_start": 0,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/user/user_exchange_api.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1,
              "line_start": 1,
              "suggested_replacement": "use aes_gcm::Nonce;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::log_info;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `Nonce`",
      "spans": [
        {
          "byte_end": 20549,
          "byte_start": 20544,
          "column_end": 26,
          "column_start": 21,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": "use of undeclared type `Nonce`",
          "line_end": 569,
          "line_start": 569,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 21,
              "text": "        let nonce = Nonce::from_slice(nonce_bytes);"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0433]: failed to resolve: use of undeclared type `InlineKeyboard`\n    --> src/services/interfaces/telegram/telegram.rs:1182:30\n     |\n1182 | ...yboard = InlineKeyboard::new();\n     |             ^^^^^^^^^^^^^^ use of undeclared type `InlineKeyboard`\n     |\nhelp: consider importing this struct through its public re-export\n     |\n3    + use crate::services::InlineKeyboard;\n     |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct through its public re-export",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/interfaces/telegram/telegram.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::InlineKeyboard;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::ai::{"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0433",
        "explanation": "An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"
      },
      "level": "error",
      "message": "failed to resolve: use of undeclared type `InlineKeyboard`",
      "spans": [
        {
          "byte_end": 41694,
          "byte_start": 41680,
          "column_end": 44,
          "column_start": 30,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "use of undeclared type `InlineKeyboard`",
          "line_end": 1182,
          "line_start": 1182,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 44,
              "highlight_start": 30,
              "text": "        let empty_keyboard = InlineKeyboard::new();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0412]: cannot find type `InlineKeyboard` in this scope\n    --> src/services/interfaces/telegram/telegram.rs:1192:20\n     |\n1192 |         keyboard: &InlineKeyboard,\n     |                    ^^^^^^^^^^^^^^ not found in this scope\n     |\nhelp: consider importing this struct through its public re-export\n     |\n3    + use crate::services::InlineKeyboard;\n     |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this struct through its public re-export",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29,
              "byte_start": 29,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/interfaces/telegram/telegram.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3,
              "line_start": 3,
              "suggested_replacement": "use crate::services::InlineKeyboard;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::ai::{"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0412",
        "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
      },
      "level": "error",
      "message": "cannot find type `InlineKeyboard` in this scope",
      "spans": [
        {
          "byte_end": 41996,
          "byte_start": 41982,
          "column_end": 34,
          "column_start": 20,
          "expansion": null,
          "file_name": "src/services/interfaces/telegram/telegram.rs",
          "is_primary": true,
          "label": "not found in this scope",
          "line_end": 1192,
          "line_start": 1192,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 34,
              "highlight_start": 20,
              "text": "        keyboard: &InlineKeyboard,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0412]: cannot find type `Value` in this scope\n   --> src/utils/error.rs:425:50\n    |\n425 | ...tr::<Value>(json_err_str).unwrap_err();\n    |         ^^^^^ not found in this scope\n    |\nhelp: consider importing this enum\n    |\n370 +     use serde_json::Value;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider importing this enum",
          "rendered": null,
          "spans": [
            {
              "byte_end": 11502,
              "byte_start": 11502,
              "column_end": 5,
              "column_start": 5,
              "expansion": null,
              "file_name": "src/utils/error.rs",
              "is_primary": true,
              "label": null,
              "line_end": 370,
              "line_start": 370,
              "suggested_replacement": "use serde_json::Value;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 5,
                  "highlight_start": 5,
                  "text": "    use super::*;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0412",
        "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
      },
      "level": "error",
      "message": "cannot find type `Value` in this scope",
      "spans": [
        {
          "byte_end": 13673,
          "byte_start": 13668,
          "column_end": 55,
          "column_start": 50,
          "expansion": null,
          "file_name": "src/utils/error.rs",
          "is_primary": true,
          "label": "not found in this scope",
          "line_end": 425,
          "line_start": 425,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 55,
              "highlight_start": 50,
              "text": "        let serde_error = serde_json::from_str::<Value>(json_err_str).unwrap_err();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `clone` found for struct `worker::D1Database` in the current scope\n  --> src/lib.rs:59:42\n   |\n59 | ...(Arc::new(d1.clone()), DatabaseManagerCo...\n   |                 ^^^^^ method not found in `D1Database`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `clone` found for struct `worker::D1Database` in the current scope",
      "spans": [
        {
          "byte_end": 1941,
          "byte_start": 1936,
          "column_end": 47,
          "column_start": 42,
          "expansion": null,
          "file_name": "src/lib.rs",
          "is_primary": true,
          "label": "method not found in `D1Database`",
          "line_end": 59,
          "line_start": 59,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 47,
              "highlight_start": 42,
              "text": "        DatabaseManager::new(Arc::new(d1.clone()), DatabaseManagerConfig::default());"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `clone` found for struct `worker::D1Database` in the current scope\n  --> src/lib.rs:59:42\n   |\n59 | ...(Arc::new(d1.clone()), DatabaseManagerCo...\n   |                 ^^^^^ method not found in `D1Database`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `clone` found for struct `worker::D1Database` in the current scope",
      "spans": [
        {
          "byte_end": 1941,
          "byte_start": 1936,
          "column_end": 47,
          "column_start": 42,
          "expansion": null,
          "file_name": "src/lib.rs",
          "is_primary": true,
          "label": "method not found in `D1Database`",
          "line_end": 59,
          "line_start": 59,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 47,
              "highlight_start": 42,
              "text": "        DatabaseManager::new(Arc::new(d1.clone()), DatabaseManagerConfig::default());"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `GET` found for enum `worker::Method` in the current scope\n    --> src/services/core/ai/ai_intelligence.rs:1572:91\n     |\n1572 | ...thod(Method::GET))?;\n     |                 ^^^ variant or associated item not found in `Method`\n     |\nhelp: there is a variant with a similar name\n     |\n1572 -         let request = Request::new_with_init(&url, RequestInit::new().with_method(Method::GET))?;\n1572 +         let request = Request::new_with_init(&url, RequestInit::new().with_method(Method::Get))?;\n     |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "there is a variant with a similar name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 59423,
              "byte_start": 59420,
              "column_end": 94,
              "column_start": 91,
              "expansion": null,
              "file_name": "src/services/core/ai/ai_intelligence.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1572,
              "line_start": 1572,
              "suggested_replacement": "Get",
              "suggestion_applicability": "HasPlaceholders",
              "text": [
                {
                  "highlight_end": 94,
                  "highlight_start": 91,
                  "text": "        let request = Request::new_with_init(&url, RequestInit::new().with_method(Method::GET))?;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `GET` found for enum `worker::Method` in the current scope",
      "spans": [
        {
          "byte_end": 59423,
          "byte_start": 59420,
          "column_end": 94,
          "column_start": 91,
          "expansion": null,
          "file_name": "src/services/core/ai/ai_intelligence.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `Method`",
          "line_end": 1572,
          "line_start": 1572,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 94,
              "highlight_start": 91,
              "text": "        let request = Request::new_with_init(&url, RequestInit::new().with_method(Method::GET))?;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `GET` found for enum `worker::Method` in the current scope\n    --> src/services/core/ai/ai_intelligence.rs:1572:91\n     |\n1572 | ...thod(Method::GET))?;\n     |                 ^^^ variant or associated item not found in `Method`\n     |\nhelp: there is a variant with a similar name\n     |\n1572 -         let request = Request::new_with_init(&url, RequestInit::new().with_method(Method::GET))?;\n1572 +         let request = Request::new_with_init(&url, RequestInit::new().with_method(Method::Get))?;\n     |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "there is a variant with a similar name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 59423,
              "byte_start": 59420,
              "column_end": 94,
              "column_start": 91,
              "expansion": null,
              "file_name": "src/services/core/ai/ai_intelligence.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1572,
              "line_start": 1572,
              "suggested_replacement": "Get",
              "suggestion_applicability": "HasPlaceholders",
              "text": [
                {
                  "highlight_end": 94,
                  "highlight_start": 91,
                  "text": "        let request = Request::new_with_init(&url, RequestInit::new().with_method(Method::GET))?;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `GET` found for enum `worker::Method` in the current scope",
      "spans": [
        {
          "byte_end": 59423,
          "byte_start": 59420,
          "column_end": 94,
          "column_start": 91,
          "expansion": null,
          "file_name": "src/services/core/ai/ai_intelligence.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `Method`",
          "line_end": 1572,
          "line_start": 1572,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 94,
              "highlight_start": 91,
              "text": "        let request = Request::new_with_init(&url, RequestInit::new().with_method(Method::GET))?;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `default` found for struct `types::SessionAnalytics` in the current scope\n    --> src/services/core/auth/session.rs:402:54\n     |\n402  | ...onAnalytics::default(),\n     |                 ^^^^^^^ function or associated item not found in `SessionAnalytics`\n     |\n    ::: src/types.rs:1161:1\n     |\n1161 | pub struct SessionAnalytics {\n     | --------------------------- function or associated item `default` not found for this struct\n     |\n     = help: items from traits can only be used if the trait is implemented and in scope\n     = note: the following traits define an item `default`, perhaps you need to implement one of them:\n             candidate #1: `std::default::Default`\n             candidate #2: `worker::worker_sys::ext::CacheStorageExt`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is implemented and in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the following traits define an item `default`, perhaps you need to implement one of them:\ncandidate #1: `std::default::Default`\ncandidate #2: `worker::worker_sys::ext::CacheStorageExt`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `default` found for struct `types::SessionAnalytics` in the current scope",
      "spans": [
        {
          "byte_end": 14867,
          "byte_start": 14860,
          "column_end": 61,
          "column_start": 54,
          "expansion": null,
          "file_name": "src/services/core/auth/session.rs",
          "is_primary": true,
          "label": "function or associated item not found in `SessionAnalytics`",
          "line_end": 402,
          "line_start": 402,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 61,
              "highlight_start": 54,
              "text": "                session_analytics: SessionAnalytics::default(),"
            }
          ]
        },
        {
          "byte_end": 37461,
          "byte_start": 37434,
          "column_end": 28,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "function or associated item `default` not found for this struct",
          "line_end": 1161,
          "line_start": 1161,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "pub struct SessionAnalytics {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0382]: use of moved value: `opportunities`\n   --> src/services/core/infrastructure/ai_services/ai_coordinator.rs:497:58\n    |\n467 | ...   opportunities: Vec<ArbitrageOpportunity>,\n    |       ------------- move occurs because `opportunities` has type `Vec<ArbitrageOpportunity>`, which does not implement the `Copy` trait\n...\n486 | ...               .rank_opportunities_for_user(user_id, opportunities)\n    |                                                         ------------- value moved here\n...\n497 | ...                       self.handle_fallback_ranking(opportunities).await\n    |                                                        ^^^^^^^^^^^^^ value used here after move\n    |\nnote: consider changing this parameter type in method `rank_opportunities_for_user` to borrow instead if owning the value isn't necessary\n   --> src/services/core/infrastructure/ai_services/personalization_engine.rs:436:24\n    |\n433 | ...fn rank_opportunities_for_user(\n    |       --------------------------- in this method\n...\n436 | ...unities: Vec<ArbitrageOpportunity>,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ this parameter takes ownership of the value\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8773353212301735546.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: consider cloning the value if the performance cost is acceptable\n    |\n486 |                     .rank_opportunities_for_user(user_id, opportunities.clone())\n    |                                                                        ++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider changing this parameter type in method `rank_opportunities_for_user` to borrow instead if owning the value isn't necessary",
          "rendered": null,
          "spans": [
            {
              "byte_end": 16479,
              "byte_start": 16454,
              "column_end": 49,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/ai_services/personalization_engine.rs",
              "is_primary": true,
              "label": "this parameter takes ownership of the value",
              "line_end": 436,
              "line_start": 436,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 49,
                  "highlight_start": 24,
                  "text": "        opportunities: Vec<ArbitrageOpportunity>,"
                }
              ]
            },
            {
              "byte_end": 16391,
              "byte_start": 16364,
              "column_end": 45,
              "column_start": 18,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/ai_services/personalization_engine.rs",
              "is_primary": false,
              "label": "in this method",
              "line_end": 433,
              "line_start": 433,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 45,
                  "highlight_start": 18,
                  "text": "    pub async fn rank_opportunities_for_user("
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8773353212301735546.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider cloning the value if the performance cost is acceptable",
          "rendered": null,
          "spans": [
            {
              "byte_end": 17365,
              "byte_start": 17365,
              "column_end": 72,
              "column_start": 72,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/ai_services/ai_coordinator.rs",
              "is_primary": true,
              "label": null,
              "line_end": 486,
              "line_start": 486,
              "suggested_replacement": ".clone()",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 72,
                  "highlight_start": 72,
                  "text": "                    .rank_opportunities_for_user(user_id, opportunities)"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0382",
        "explanation": "A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"
      },
      "level": "error",
      "message": "use of moved value: `opportunities`",
      "spans": [
        {
          "byte_end": 17365,
          "byte_start": 17352,
          "column_end": 72,
          "column_start": 59,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/ai_services/ai_coordinator.rs",
          "is_primary": false,
          "label": "value moved here",
          "line_end": 486,
          "line_start": 486,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 72,
              "highlight_start": 59,
              "text": "                    .rank_opportunities_for_user(user_id, opportunities)"
            }
          ]
        },
        {
          "byte_end": 17876,
          "byte_start": 17863,
          "column_end": 71,
          "column_start": 58,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/ai_services/ai_coordinator.rs",
          "is_primary": true,
          "label": "value used here after move",
          "line_end": 497,
          "line_start": 497,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 71,
              "highlight_start": 58,
              "text": "                            self.handle_fallback_ranking(opportunities).await"
            }
          ]
        },
        {
          "byte_end": 16672,
          "byte_start": 16659,
          "column_end": 22,
          "column_start": 9,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/ai_services/ai_coordinator.rs",
          "is_primary": false,
          "label": "move occurs because `opportunities` has type `Vec<ArbitrageOpportunity>`, which does not implement the `Copy` trait",
          "line_end": 467,
          "line_start": 467,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 22,
              "highlight_start": 9,
              "text": "        opportunities: Vec<ArbitrageOpportunity>,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0382]: use of moved value: `opportunities`\n   --> src/services/core/infrastructure/ai_services/ai_coordinator.rs:497:58\n    |\n467 | ...   opportunities: Vec<ArbitrageOpportunity>,\n    |       ------------- move occurs because `opportunities` has type `Vec<ArbitrageOpportunity>`, which does not implement the `Copy` trait\n...\n486 | ...               .rank_opportunities_for_user(user_id, opportunities)\n    |                                                         ------------- value moved here\n...\n497 | ...                       self.handle_fallback_ranking(opportunities).await\n    |                                                        ^^^^^^^^^^^^^ value used here after move\n    |\nnote: consider changing this parameter type in method `rank_opportunities_for_user` to borrow instead if owning the value isn't necessary\n   --> src/services/core/infrastructure/ai_services/personalization_engine.rs:436:24\n    |\n433 | ...fn rank_opportunities_for_user(\n    |       --------------------------- in this method\n...\n436 | ...unities: Vec<ArbitrageOpportunity>,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ this parameter takes ownership of the value\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-13421979170266920437.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: consider cloning the value if the performance cost is acceptable\n    |\n486 |                     .rank_opportunities_for_user(user_id, opportunities.clone())\n    |                                                                        ++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider changing this parameter type in method `rank_opportunities_for_user` to borrow instead if owning the value isn't necessary",
          "rendered": null,
          "spans": [
            {
              "byte_end": 16479,
              "byte_start": 16454,
              "column_end": 49,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/ai_services/personalization_engine.rs",
              "is_primary": true,
              "label": "this parameter takes ownership of the value",
              "line_end": 436,
              "line_start": 436,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 49,
                  "highlight_start": 24,
                  "text": "        opportunities: Vec<ArbitrageOpportunity>,"
                }
              ]
            },
            {
              "byte_end": 16391,
              "byte_start": 16364,
              "column_end": 45,
              "column_start": 18,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/ai_services/personalization_engine.rs",
              "is_primary": false,
              "label": "in this method",
              "line_end": 433,
              "line_start": 433,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 45,
                  "highlight_start": 18,
                  "text": "    pub async fn rank_opportunities_for_user("
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-13421979170266920437.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider cloning the value if the performance cost is acceptable",
          "rendered": null,
          "spans": [
            {
              "byte_end": 17365,
              "byte_start": 17365,
              "column_end": 72,
              "column_start": 72,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/ai_services/ai_coordinator.rs",
              "is_primary": true,
              "label": null,
              "line_end": 486,
              "line_start": 486,
              "suggested_replacement": ".clone()",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 72,
                  "highlight_start": 72,
                  "text": "                    .rank_opportunities_for_user(user_id, opportunities)"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0382",
        "explanation": "A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"
      },
      "level": "error",
      "message": "use of moved value: `opportunities`",
      "spans": [
        {
          "byte_end": 17365,
          "byte_start": 17352,
          "column_end": 72,
          "column_start": 59,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/ai_services/ai_coordinator.rs",
          "is_primary": false,
          "label": "value moved here",
          "line_end": 486,
          "line_start": 486,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 72,
              "highlight_start": 59,
              "text": "                    .rank_opportunities_for_user(user_id, opportunities)"
            }
          ]
        },
        {
          "byte_end": 17876,
          "byte_start": 17863,
          "column_end": 71,
          "column_start": 58,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/ai_services/ai_coordinator.rs",
          "is_primary": true,
          "label": "value used here after move",
          "line_end": 497,
          "line_start": 497,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 71,
              "highlight_start": 58,
              "text": "                            self.handle_fallback_ranking(opportunities).await"
            }
          ]
        },
        {
          "byte_end": 16672,
          "byte_start": 16659,
          "column_end": 22,
          "column_start": 9,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/ai_services/ai_coordinator.rs",
          "is_primary": false,
          "label": "move occurs because `opportunities` has type `Vec<ArbitrageOpportunity>`, which does not implement the `Copy` trait",
          "line_end": 467,
          "line_start": 467,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 22,
              "highlight_start": 9,
              "text": "        opportunities: Vec<ArbitrageOpportunity>,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0615]: attempted to take value of method `meta` on type `worker::D1Result`\n   --> src/services/core/infrastructure/database_repositories/ai_data_repository.rs:282:30\n    |\n282 | ...result.meta.as_ref().map(|m| m.rows_wri...\n    |           ^^^^ method, not a field\n    |\nhelp: use parentheses to call the method\n    |\n282 |         let success = result.meta().as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;\n    |                                  ++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "use parentheses to call the method",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9066,
              "byte_start": 9066,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/ai_data_repository.rs",
              "is_primary": true,
              "label": null,
              "line_end": 282,
              "line_start": 282,
              "suggested_replacement": "()",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "        let success = result.meta.as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0615",
        "explanation": "Attempted to access a method like a field.\n\nErroneous code example:\n\n```compile_fail,E0615\nstruct Foo {\n    x: u32,\n}\n\nimpl Foo {\n    fn method(&self) {}\n}\n\nlet f = Foo { x: 0 };\nf.method; // error: attempted to take value of method `method` on type `Foo`\n```\n\nIf you want to use a method, add `()` after it:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nf.method();\n```\n\nHowever, if you wanted to access a field of a struct check that the field name\nis spelled correctly. Example:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nprintln!(\"{}\", f.x);\n```\n"
      },
      "level": "error",
      "message": "attempted to take value of method `meta` on type `worker::D1Result`",
      "spans": [
        {
          "byte_end": 9066,
          "byte_start": 9062,
          "column_end": 34,
          "column_start": 30,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_repositories/ai_data_repository.rs",
          "is_primary": true,
          "label": "method, not a field",
          "line_end": 282,
          "line_start": 282,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 34,
              "highlight_start": 30,
              "text": "        let success = result.meta.as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0615]: attempted to take value of method `meta` on type `worker::D1Result`\n   --> src/services/core/infrastructure/database_repositories/ai_data_repository.rs:282:30\n    |\n282 | ...result.meta.as_ref().map(|m| m.rows_wri...\n    |           ^^^^ method, not a field\n    |\nhelp: use parentheses to call the method\n    |\n282 |         let success = result.meta().as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;\n    |                                  ++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "use parentheses to call the method",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9066,
              "byte_start": 9066,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/ai_data_repository.rs",
              "is_primary": true,
              "label": null,
              "line_end": 282,
              "line_start": 282,
              "suggested_replacement": "()",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "        let success = result.meta.as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0615",
        "explanation": "Attempted to access a method like a field.\n\nErroneous code example:\n\n```compile_fail,E0615\nstruct Foo {\n    x: u32,\n}\n\nimpl Foo {\n    fn method(&self) {}\n}\n\nlet f = Foo { x: 0 };\nf.method; // error: attempted to take value of method `method` on type `Foo`\n```\n\nIf you want to use a method, add `()` after it:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nf.method();\n```\n\nHowever, if you wanted to access a field of a struct check that the field name\nis spelled correctly. Example:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nprintln!(\"{}\", f.x);\n```\n"
      },
      "level": "error",
      "message": "attempted to take value of method `meta` on type `worker::D1Result`",
      "spans": [
        {
          "byte_end": 9066,
          "byte_start": 9062,
          "column_end": 34,
          "column_start": 30,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_repositories/ai_data_repository.rs",
          "is_primary": true,
          "label": "method, not a field",
          "line_end": 282,
          "line_start": 282,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 34,
              "highlight_start": 30,
              "text": "        let success = result.meta.as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0615]: attempted to take value of method `meta` on type `worker::D1Result`\n   --> src/services/core/infrastructure/database_repositories/invitation_repository.rs:270:30\n    |\n270 | ...result.meta.as_ref().map(|m| m.rows_wri...\n    |           ^^^^ method, not a field\n    |\nhelp: use parentheses to call the method\n    |\n270 |         let success = result.meta().as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;\n    |                                  ++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "use parentheses to call the method",
          "rendered": null,
          "spans": [
            {
              "byte_end": 8746,
              "byte_start": 8746,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/invitation_repository.rs",
              "is_primary": true,
              "label": null,
              "line_end": 270,
              "line_start": 270,
              "suggested_replacement": "()",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "        let success = result.meta.as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0615",
        "explanation": "Attempted to access a method like a field.\n\nErroneous code example:\n\n```compile_fail,E0615\nstruct Foo {\n    x: u32,\n}\n\nimpl Foo {\n    fn method(&self) {}\n}\n\nlet f = Foo { x: 0 };\nf.method; // error: attempted to take value of method `method` on type `Foo`\n```\n\nIf you want to use a method, add `()` after it:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nf.method();\n```\n\nHowever, if you wanted to access a field of a struct check that the field name\nis spelled correctly. Example:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nprintln!(\"{}\", f.x);\n```\n"
      },
      "level": "error",
      "message": "attempted to take value of method `meta` on type `worker::D1Result`",
      "spans": [
        {
          "byte_end": 8746,
          "byte_start": 8742,
          "column_end": 34,
          "column_start": 30,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_repositories/invitation_repository.rs",
          "is_primary": true,
          "label": "method, not a field",
          "line_end": 270,
          "line_start": 270,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 34,
              "highlight_start": 30,
              "text": "        let success = result.meta.as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0615]: attempted to take value of method `meta` on type `worker::D1Result`\n   --> src/services/core/infrastructure/database_repositories/invitation_repository.rs:270:30\n    |\n270 | ...result.meta.as_ref().map(|m| m.rows_wri...\n    |           ^^^^ method, not a field\n    |\nhelp: use parentheses to call the method\n    |\n270 |         let success = result.meta().as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;\n    |                                  ++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "use parentheses to call the method",
          "rendered": null,
          "spans": [
            {
              "byte_end": 8746,
              "byte_start": 8746,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/invitation_repository.rs",
              "is_primary": true,
              "label": null,
              "line_end": 270,
              "line_start": 270,
              "suggested_replacement": "()",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "        let success = result.meta.as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0615",
        "explanation": "Attempted to access a method like a field.\n\nErroneous code example:\n\n```compile_fail,E0615\nstruct Foo {\n    x: u32,\n}\n\nimpl Foo {\n    fn method(&self) {}\n}\n\nlet f = Foo { x: 0 };\nf.method; // error: attempted to take value of method `method` on type `Foo`\n```\n\nIf you want to use a method, add `()` after it:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nf.method();\n```\n\nHowever, if you wanted to access a field of a struct check that the field name\nis spelled correctly. Example:\n\n```\n# struct Foo { x: u32 }\n# impl Foo { fn method(&self) {} }\n# let f = Foo { x: 0 };\nprintln!(\"{}\", f.x);\n```\n"
      },
      "level": "error",
      "message": "attempted to take value of method `meta` on type `worker::D1Result`",
      "spans": [
        {
          "byte_end": 8746,
          "byte_start": 8742,
          "column_end": 34,
          "column_start": 30,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_repositories/invitation_repository.rs",
          "is_primary": true,
          "label": "method, not a field",
          "line_end": 270,
          "line_start": 270,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 34,
              "highlight_start": 30,
              "text": "        let success = result.meta.as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `rows_written` on type `&Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/database_repositories/user_repository.rs:259:56\n    |\n259 | ...|m| m.rows_written).unwrap_or(0) > 0;\n    |          ^^^^^^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-17303057037794707642.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-17303057037794707642.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `rows_written` on type `&Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 8009,
          "byte_start": 7997,
          "column_end": 68,
          "column_start": 56,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_repositories/user_repository.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 259,
          "line_start": 259,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 68,
              "highlight_start": 56,
              "text": "        let success = result.meta().as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `rows_written` on type `&Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/database_repositories/user_repository.rs:259:56\n    |\n259 | ...|m| m.rows_written).unwrap_or(0) > 0;\n    |          ^^^^^^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12833447306989952770.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12833447306989952770.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `rows_written` on type `&Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 8009,
          "byte_start": 7997,
          "column_end": 68,
          "column_start": 56,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_repositories/user_repository.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 259,
          "line_start": 259,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 68,
              "highlight_start": 56,
              "text": "        let success = result.meta().as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `rows_written` on type `&Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/database_repositories/user_repository.rs:382:56\n    |\n382 | ...|m| m.rows_written).unwrap_or(0) > 0;\n    |          ^^^^^^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-17303057037794707642.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-17303057037794707642.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `rows_written` on type `&Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 12082,
          "byte_start": 12070,
          "column_end": 68,
          "column_start": 56,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_repositories/user_repository.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 382,
          "line_start": 382,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 68,
              "highlight_start": 56,
              "text": "        let success = result.meta().as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `rows_written` on type `&Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/database_repositories/user_repository.rs:382:56\n    |\n382 | ...|m| m.rows_written).unwrap_or(0) > 0;\n    |          ^^^^^^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12833447306989952770.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12833447306989952770.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `rows_written` on type `&Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 12082,
          "byte_start": 12070,
          "column_end": 68,
          "column_start": 56,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_repositories/user_repository.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 382,
          "line_start": 382,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 68,
              "highlight_start": 56,
              "text": "        let success = result.meta().as_ref().map(|m| m.rows_written).unwrap_or(0) > 0;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `changes` on type `Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/database_core.rs:427:58\n    |\n427 | ...0, |m| m.changes) as u64,\n    |             ^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8591257971074230168.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: one of the expressions' fields has a field of the same name\n    |\n427 |             rows_affected: result.meta().map_or(0, |m| m.unwrap().changes) as u64,\n    |                                                          +++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8591257971074230168.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "one of the expressions' fields has a field of the same name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 13856,
              "byte_start": 13856,
              "column_end": 58,
              "column_start": 58,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_core.rs",
              "is_primary": true,
              "label": null,
              "line_end": 427,
              "line_start": 427,
              "suggested_replacement": "unwrap().",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 58,
                  "highlight_start": 58,
                  "text": "            rows_affected: result.meta().map_or(0, |m| m.changes) as u64,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `changes` on type `Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 13863,
          "byte_start": 13856,
          "column_end": 65,
          "column_start": 58,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_core.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 427,
          "line_start": 427,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 65,
              "highlight_start": 58,
              "text": "            rows_affected: result.meta().map_or(0, |m| m.changes) as u64,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `last_row_id` on type `Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/database_core.rs:430:33\n    |\n430 | ...(|m| m.last_row_id.map(|id| id as u64)),\n    |           ^^^^^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8591257971074230168.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: one of the expressions' fields has a field of the same name\n    |\n430 |                 .and_then(|m| m.unwrap().last_row_id.map(|id| id as u64)),\n    |                                 +++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8591257971074230168.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "one of the expressions' fields has a field of the same name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 13964,
              "byte_start": 13964,
              "column_end": 33,
              "column_start": 33,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_core.rs",
              "is_primary": true,
              "label": null,
              "line_end": 430,
              "line_start": 430,
              "suggested_replacement": "unwrap().",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 33,
                  "highlight_start": 33,
                  "text": "                .and_then(|m| m.last_row_id.map(|id| id as u64)),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `last_row_id` on type `Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 13975,
          "byte_start": 13964,
          "column_end": 44,
          "column_start": 33,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_core.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 430,
          "line_start": 430,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 44,
              "highlight_start": 33,
              "text": "                .and_then(|m| m.last_row_id.map(|id| id as u64)),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/infrastructure/database_core.rs:428:29\n    |\n428 |               last_insert_id: result\n    |  _____________________________^\n429 | |                 .meta()\n430 | |                 .and_then(|m| m.last_row_id.map(|id| id as u64)),\n    | |________________________________________________________________^ expected `Option<u64>`, found `Result<_, Error>`\n    |\n    = note: expected enum `std::option::Option<u64>`\n               found enum `std::result::Result<_, worker::Error>`\nhelp: use the `?` operator to extract the `std::result::Result<_, worker::Error>` value, propagating a `Result::Err` value to the caller\n    |\n430 |                 .and_then(|m| m.last_row_id.map(|id| id as u64))?,\n    |                                                                 +\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected enum `std::option::Option<u64>`\n   found enum `std::result::Result<_, worker::Error>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "use the `?` operator to extract the `std::result::Result<_, worker::Error>` value, propagating a `Result::Err` value to the caller",
          "rendered": null,
          "spans": [
            {
              "byte_end": 13996,
              "byte_start": 13996,
              "column_end": 65,
              "column_start": 65,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_core.rs",
              "is_primary": true,
              "label": null,
              "line_end": 430,
              "line_start": 430,
              "suggested_replacement": "?",
              "suggestion_applicability": "HasPlaceholders",
              "text": [
                {
                  "highlight_end": 65,
                  "highlight_start": 65,
                  "text": "                .and_then(|m| m.last_row_id.map(|id| id as u64)),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 13996,
          "byte_start": 13901,
          "column_end": 65,
          "column_start": 29,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_core.rs",
          "is_primary": true,
          "label": "expected `Option<u64>`, found `Result<_, Error>`",
          "line_end": 430,
          "line_start": 428,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 35,
              "highlight_start": 29,
              "text": "            last_insert_id: result"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "                .meta()"
            },
            {
              "highlight_end": 65,
              "highlight_start": 1,
              "text": "                .and_then(|m| m.last_row_id.map(|id| id as u64)),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `changes` on type `Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/database_core.rs:427:58\n    |\n427 | ...0, |m| m.changes) as u64,\n    |             ^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-16403086433047713710.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: one of the expressions' fields has a field of the same name\n    |\n427 |             rows_affected: result.meta().map_or(0, |m| m.unwrap().changes) as u64,\n    |                                                          +++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-16403086433047713710.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "one of the expressions' fields has a field of the same name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 13856,
              "byte_start": 13856,
              "column_end": 58,
              "column_start": 58,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_core.rs",
              "is_primary": true,
              "label": null,
              "line_end": 427,
              "line_start": 427,
              "suggested_replacement": "unwrap().",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 58,
                  "highlight_start": 58,
                  "text": "            rows_affected: result.meta().map_or(0, |m| m.changes) as u64,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `changes` on type `Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 13863,
          "byte_start": 13856,
          "column_end": 65,
          "column_start": 58,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_core.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 427,
          "line_start": 427,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 65,
              "highlight_start": 58,
              "text": "            rows_affected: result.meta().map_or(0, |m| m.changes) as u64,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `last_row_id` on type `Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/database_core.rs:430:33\n    |\n430 | ...(|m| m.last_row_id.map(|id| id as u64)),\n    |           ^^^^^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-16403086433047713710.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: one of the expressions' fields has a field of the same name\n    |\n430 |                 .and_then(|m| m.unwrap().last_row_id.map(|id| id as u64)),\n    |                                 +++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-16403086433047713710.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "one of the expressions' fields has a field of the same name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 13964,
              "byte_start": 13964,
              "column_end": 33,
              "column_start": 33,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_core.rs",
              "is_primary": true,
              "label": null,
              "line_end": 430,
              "line_start": 430,
              "suggested_replacement": "unwrap().",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 33,
                  "highlight_start": 33,
                  "text": "                .and_then(|m| m.last_row_id.map(|id| id as u64)),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `last_row_id` on type `Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 13975,
          "byte_start": 13964,
          "column_end": 44,
          "column_start": 33,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_core.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 430,
          "line_start": 430,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 44,
              "highlight_start": 33,
              "text": "                .and_then(|m| m.last_row_id.map(|id| id as u64)),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/infrastructure/database_core.rs:428:29\n    |\n428 |               last_insert_id: result\n    |  _____________________________^\n429 | |                 .meta()\n430 | |                 .and_then(|m| m.last_row_id.map(|id| id as u64)),\n    | |________________________________________________________________^ expected `Option<u64>`, found `Result<_, Error>`\n    |\n    = note: expected enum `std::option::Option<u64>`\n               found enum `std::result::Result<_, worker::Error>`\nhelp: use the `?` operator to extract the `std::result::Result<_, worker::Error>` value, propagating a `Result::Err` value to the caller\n    |\n430 |                 .and_then(|m| m.last_row_id.map(|id| id as u64))?,\n    |                                                                 +\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected enum `std::option::Option<u64>`\n   found enum `std::result::Result<_, worker::Error>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "use the `?` operator to extract the `std::result::Result<_, worker::Error>` value, propagating a `Result::Err` value to the caller",
          "rendered": null,
          "spans": [
            {
              "byte_end": 13996,
              "byte_start": 13996,
              "column_end": 65,
              "column_start": 65,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_core.rs",
              "is_primary": true,
              "label": null,
              "line_end": 430,
              "line_start": 430,
              "suggested_replacement": "?",
              "suggestion_applicability": "HasPlaceholders",
              "text": [
                {
                  "highlight_end": 65,
                  "highlight_start": 65,
                  "text": "                .and_then(|m| m.last_row_id.map(|id| id as u64)),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 13996,
          "byte_start": 13901,
          "column_end": 65,
          "column_start": 29,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_core.rs",
          "is_primary": true,
          "label": "expected `Option<u64>`, found `Result<_, Error>`",
          "line_end": 430,
          "line_start": 428,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 35,
              "highlight_start": 29,
              "text": "            last_insert_id: result"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "                .meta()"
            },
            {
              "highlight_end": 65,
              "highlight_start": 1,
              "text": "                .and_then(|m| m.last_row_id.map(|id| id as u64)),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `start_time` on type `&InfrastructureEngine`\n   --> src/services/core/infrastructure/infrastructure_engine.rs:679:69\n    |\n679 | ...e(self.start_time).as_secs();\n    |           ^^^^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-1667154539906386598.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: a field with a similar name exists\n    |\n679 |         let _uptime_seconds = SystemTime::now().duration_since(self.startup_time).as_secs();\n    |                                                                          ++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-1667154539906386598.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "a field with a similar name exists",
          "rendered": null,
          "spans": [
            {
              "byte_end": 24952,
              "byte_start": 24942,
              "column_end": 79,
              "column_start": 69,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
              "is_primary": true,
              "label": null,
              "line_end": 679,
              "line_start": 679,
              "suggested_replacement": "startup_time",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 79,
                  "highlight_start": 69,
                  "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `start_time` on type `&InfrastructureEngine`",
      "spans": [
        {
          "byte_end": 24952,
          "byte_start": 24942,
          "column_end": 79,
          "column_start": 69,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 679,
          "line_start": 679,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 79,
              "highlight_start": 69,
              "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `as_secs` found for enum `Result` in the current scope\n   --> src/services/core/infrastructure/infrastructure_engine.rs:679:81\n    |\n679 | ....start_time).as_secs();\n    |                 ^^^^^^^ method not found in `Result<Duration, ...>`\n    |\nnote: the method `as_secs` exists on the type `std::time::Duration`\n   --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:471:5\n    |\n471 |     pub const fn as_secs(&self) -> u64 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider using `Result::expect` to unwrap the `std::time::Duration` value, panicking if the value is a `Result::Err`\n    |\n679 |         let _uptime_seconds = SystemTime::now().duration_since(self.start_time).expect(\"REASON\").as_secs();\n    |                                                                                +++++++++++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the method `as_secs` exists on the type `std::time::Duration`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 15958,
              "byte_start": 15924,
              "column_end": 39,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs",
              "is_primary": true,
              "label": null,
              "line_end": 471,
              "line_start": 471,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 39,
                  "highlight_start": 5,
                  "text": "    pub const fn as_secs(&self) -> u64 {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider using `Result::expect` to unwrap the `std::time::Duration` value, panicking if the value is a `Result::Err`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 24953,
              "byte_start": 24953,
              "column_end": 80,
              "column_start": 80,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
              "is_primary": true,
              "label": null,
              "line_end": 679,
              "line_start": 679,
              "suggested_replacement": ".expect(\"REASON\")",
              "suggestion_applicability": "HasPlaceholders",
              "text": [
                {
                  "highlight_end": 80,
                  "highlight_start": 80,
                  "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `as_secs` found for enum `Result` in the current scope",
      "spans": [
        {
          "byte_end": 24961,
          "byte_start": 24954,
          "column_end": 88,
          "column_start": 81,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "method not found in `Result<Duration, ...>`",
          "line_end": 679,
          "line_start": 679,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 81,
              "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/infrastructure/infrastructure_engine.rs:677:74\n    |\n677 |       pub async fn get_detailed_health_status(&self) -> SystemHealthReport {\n    |  __________________________________________________________________________^\n678 | |         // Placeholder - replace with actual health check logic\n679 | |         let _uptime_seconds = SystemTime::now().duration_since(self.start_tim...\n...   |\n683 | |     }\n    | |_____^ expected `SystemHealthReport`, found `()`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 25095,
          "byte_start": 24808,
          "column_end": 6,
          "column_start": 74,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "expected `SystemHealthReport`, found `()`",
          "line_end": 683,
          "line_start": 677,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 75,
              "highlight_start": 74,
              "text": "    pub async fn get_detailed_health_status(&self) -> SystemHealthReport {"
            },
            {
              "highlight_end": 64,
              "highlight_start": 1,
              "text": "        // Placeholder - replace with actual health check logic"
            },
            {
              "highlight_end": 91,
              "highlight_start": 1,
              "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
            },
            {
              "highlight_end": 1,
              "highlight_start": 1,
              "text": ""
            },
            {
              "highlight_end": 91,
              "highlight_start": 1,
              "text": "        // TODO: Implement comprehensive health check across all infrastructure components"
            },
            {
              "highlight_end": 33,
              "highlight_start": 1,
              "text": "        // ... existing code ..."
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `start_time` on type `&InfrastructureEngine`\n   --> src/services/core/infrastructure/infrastructure_engine.rs:679:69\n    |\n679 | ...e(self.start_time).as_secs();\n    |           ^^^^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-2410093945385325390.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: a field with a similar name exists\n    |\n679 |         let _uptime_seconds = SystemTime::now().duration_since(self.startup_time).as_secs();\n    |                                                                          ++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-2410093945385325390.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "a field with a similar name exists",
          "rendered": null,
          "spans": [
            {
              "byte_end": 24952,
              "byte_start": 24942,
              "column_end": 79,
              "column_start": 69,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
              "is_primary": true,
              "label": null,
              "line_end": 679,
              "line_start": 679,
              "suggested_replacement": "startup_time",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 79,
                  "highlight_start": 69,
                  "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `start_time` on type `&InfrastructureEngine`",
      "spans": [
        {
          "byte_end": 24952,
          "byte_start": 24942,
          "column_end": 79,
          "column_start": 69,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 679,
          "line_start": 679,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 79,
              "highlight_start": 69,
              "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `as_secs` found for enum `Result` in the current scope\n   --> src/services/core/infrastructure/infrastructure_engine.rs:679:81\n    |\n679 | ....start_time).as_secs();\n    |                 ^^^^^^^ method not found in `Result<Duration, ...>`\n    |\nnote: the method `as_secs` exists on the type `std::time::Duration`\n   --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs:471:5\n    |\n471 |     pub const fn as_secs(&self) -> u64 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: consider using `Result::expect` to unwrap the `std::time::Duration` value, panicking if the value is a `Result::Err`\n    |\n679 |         let _uptime_seconds = SystemTime::now().duration_since(self.start_time).expect(\"REASON\").as_secs();\n    |                                                                                +++++++++++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the method `as_secs` exists on the type `std::time::Duration`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 15958,
              "byte_start": 15924,
              "column_end": 39,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/time.rs",
              "is_primary": true,
              "label": null,
              "line_end": 471,
              "line_start": 471,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 39,
                  "highlight_start": 5,
                  "text": "    pub const fn as_secs(&self) -> u64 {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider using `Result::expect` to unwrap the `std::time::Duration` value, panicking if the value is a `Result::Err`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 24953,
              "byte_start": 24953,
              "column_end": 80,
              "column_start": 80,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
              "is_primary": true,
              "label": null,
              "line_end": 679,
              "line_start": 679,
              "suggested_replacement": ".expect(\"REASON\")",
              "suggestion_applicability": "HasPlaceholders",
              "text": [
                {
                  "highlight_end": 80,
                  "highlight_start": 80,
                  "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `as_secs` found for enum `Result` in the current scope",
      "spans": [
        {
          "byte_end": 24961,
          "byte_start": 24954,
          "column_end": 88,
          "column_start": 81,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "method not found in `Result<Duration, ...>`",
          "line_end": 679,
          "line_start": 679,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 81,
              "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/infrastructure/infrastructure_engine.rs:677:74\n    |\n677 |       pub async fn get_detailed_health_status(&self) -> SystemHealthReport {\n    |  __________________________________________________________________________^\n678 | |         // Placeholder - replace with actual health check logic\n679 | |         let _uptime_seconds = SystemTime::now().duration_since(self.start_tim...\n...   |\n683 | |     }\n    | |_____^ expected `SystemHealthReport`, found `()`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 25095,
          "byte_start": 24808,
          "column_end": 6,
          "column_start": 74,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/infrastructure_engine.rs",
          "is_primary": true,
          "label": "expected `SystemHealthReport`, found `()`",
          "line_end": 683,
          "line_start": 677,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 75,
              "highlight_start": 74,
              "text": "    pub async fn get_detailed_health_status(&self) -> SystemHealthReport {"
            },
            {
              "highlight_end": 64,
              "highlight_start": 1,
              "text": "        // Placeholder - replace with actual health check logic"
            },
            {
              "highlight_end": 91,
              "highlight_start": 1,
              "text": "        let _uptime_seconds = SystemTime::now().duration_since(self.start_time).as_secs();"
            },
            {
              "highlight_end": 1,
              "highlight_start": 1,
              "text": ""
            },
            {
              "highlight_end": 91,
              "highlight_start": 1,
              "text": "        // TODO: Implement comprehensive health check across all infrastructure components"
            },
            {
              "highlight_end": 33,
              "highlight_start": 1,
              "text": "        // ... existing code ..."
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `changes` on type `Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/d1.rs:112:46\n    |\n112 | ...| Some(m.changes)).unwrap_or(0) as u64)\n    |             ^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8591257971074230168.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: one of the expressions' fields has a field of the same name\n    |\n112 |         Ok(result.meta().and_then(|m| Some(m.unwrap().changes)).unwrap_or(0) as u64)\n    |                                              +++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8591257971074230168.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "one of the expressions' fields has a field of the same name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3563,
              "byte_start": 3563,
              "column_end": 46,
              "column_start": 46,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 112,
              "line_start": 112,
              "suggested_replacement": "unwrap().",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 46,
                  "highlight_start": 46,
                  "text": "        Ok(result.meta().and_then(|m| Some(m.changes)).unwrap_or(0) as u64)"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `changes` on type `Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 3570,
          "byte_start": 3563,
          "column_end": 53,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/d1.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 112,
          "line_start": 112,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 53,
              "highlight_start": 46,
              "text": "        Ok(result.meta().and_then(|m| Some(m.changes)).unwrap_or(0) as u64)"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `changes` on type `Option<D1ResultMeta>`\n   --> src/services/core/infrastructure/d1.rs:112:46\n    |\n112 | ...| Some(m.changes)).unwrap_or(0) as u64)\n    |             ^^^^^^^ unknown field\n    |\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-16403086433047713710.txt'\n    = note: consider using `--verbose` to print the full type name to the console\nhelp: one of the expressions' fields has a field of the same name\n    |\n112 |         Ok(result.meta().and_then(|m| Some(m.unwrap().changes)).unwrap_or(0) as u64)\n    |                                              +++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-16403086433047713710.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "one of the expressions' fields has a field of the same name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3563,
              "byte_start": 3563,
              "column_end": 46,
              "column_start": 46,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 112,
              "line_start": 112,
              "suggested_replacement": "unwrap().",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 46,
                  "highlight_start": 46,
                  "text": "        Ok(result.meta().and_then(|m| Some(m.changes)).unwrap_or(0) as u64)"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `changes` on type `Option<D1ResultMeta>`",
      "spans": [
        {
          "byte_end": 3570,
          "byte_start": 3563,
          "column_end": 53,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/d1.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 112,
          "line_start": 112,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 53,
              "highlight_start": 46,
              "text": "        Ok(result.meta().and_then(|m| Some(m.changes)).unwrap_or(0) as u64)"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `send_event` found for reference `&...` in the current scope\n   --> src/services/core/market_data/coinmarketcap.rs:570:35\n    |\n570 | ... pipelines.send_event(event).await;\n    |               ^^^^^^^^^^ method not found in `&...`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `send_event` found for reference `&...` in the current scope",
      "spans": [
        {
          "byte_end": 20974,
          "byte_start": 20964,
          "column_end": 45,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/market_data/coinmarketcap.rs",
          "is_primary": true,
          "label": "method not found in `&...`",
          "line_end": 570,
          "line_start": 570,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 45,
              "highlight_start": 35,
              "text": "                let _ = pipelines.send_event(event).await;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `send_event` found for reference `&...` in the current scope\n   --> src/services/core/market_data/coinmarketcap.rs:593:31\n    |\n593 | ... pipelines.send_event(event).await;\n    |               ^^^^^^^^^^ method not found in `&...`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `send_event` found for reference `&...` in the current scope",
      "spans": [
        {
          "byte_end": 21840,
          "byte_start": 21830,
          "column_end": 41,
          "column_start": 31,
          "expansion": null,
          "file_name": "src/services/core/market_data/coinmarketcap.rs",
          "is_primary": true,
          "label": "method not found in `&...`",
          "line_end": 593,
          "line_start": 593,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 41,
              "highlight_start": 31,
              "text": "            let _ = pipelines.send_event(event).await;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `send_event` found for reference `&...` in the current scope\n   --> src/services/core/market_data/coinmarketcap.rs:570:35\n    |\n570 | ... pipelines.send_event(event).await;\n    |               ^^^^^^^^^^ method not found in `&...`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `send_event` found for reference `&...` in the current scope",
      "spans": [
        {
          "byte_end": 20974,
          "byte_start": 20964,
          "column_end": 45,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/market_data/coinmarketcap.rs",
          "is_primary": true,
          "label": "method not found in `&...`",
          "line_end": 570,
          "line_start": 570,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 45,
              "highlight_start": 35,
              "text": "                let _ = pipelines.send_event(event).await;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:293:35\n    |\n293 | ...price_data = self.fetch_binance_price_d...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n278 |     async fn fetch_binance_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                  +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9467,
              "byte_start": 9467,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 278,
              "line_start": 278,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "    async fn fetch_binance_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 10089,
          "byte_start": 10085,
          "column_end": 39,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 293,
          "line_start": 293,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 39,
              "highlight_start": 35,
              "text": "            snapshot.price_data = self.fetch_binance_price_data(&binance_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:299:17\n    |\n299 |                 self.fetch_binance_funding...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n278 |     async fn fetch_binance_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                  +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9467,
              "byte_start": 9467,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 278,
              "line_start": 278,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "    async fn fetch_binance_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 10297,
          "byte_start": 10293,
          "column_end": 21,
          "column_start": 17,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 299,
          "line_start": 299,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 21,
              "highlight_start": 17,
              "text": "                self.fetch_binance_funding_rate(&binance_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:304:36\n    |\n304 | ...olume_data = self.fetch_binance_volume_...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n278 |     async fn fetch_binance_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                  +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9467,
              "byte_start": 9467,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 278,
              "line_start": 278,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "    async fn fetch_binance_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 10477,
          "byte_start": 10473,
          "column_end": 40,
          "column_start": 36,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 304,
          "line_start": 304,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 40,
              "highlight_start": 36,
              "text": "            snapshot.volume_data = self.fetch_binance_volume_data(&binance_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:326:35\n    |\n326 | ...price_data = self.fetch_bybit_price_dat...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n311 |     async fn fetch_bybit_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 10637,
              "byte_start": 10637,
              "column_end": 32,
              "column_start": 32,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 311,
              "line_start": 311,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 32,
                  "highlight_start": 32,
                  "text": "    async fn fetch_bybit_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 11255,
          "byte_start": 11251,
          "column_end": 39,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 326,
          "line_start": 326,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 39,
              "highlight_start": 35,
              "text": "            snapshot.price_data = self.fetch_bybit_price_data(&bybit_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:331:42\n    |\n331 | ..._rate_data = self.fetch_bybit_funding_r...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n311 |     async fn fetch_bybit_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 10637,
              "byte_start": 10637,
              "column_end": 32,
              "column_start": 32,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 311,
              "line_start": 311,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 32,
                  "highlight_start": 32,
                  "text": "    async fn fetch_bybit_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 11443,
          "byte_start": 11439,
          "column_end": 46,
          "column_start": 42,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 331,
          "line_start": 331,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 46,
              "highlight_start": 42,
              "text": "            snapshot.funding_rate_data = self.fetch_bybit_funding_rate(&bybit_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:336:36\n    |\n336 | ...olume_data = self.fetch_bybit_volume_da...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n311 |     async fn fetch_bybit_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 10637,
              "byte_start": 10637,
              "column_end": 32,
              "column_start": 32,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 311,
              "line_start": 311,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 32,
                  "highlight_start": 32,
                  "text": "    async fn fetch_bybit_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 11619,
          "byte_start": 11615,
          "column_end": 40,
          "column_start": 36,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 336,
          "line_start": 336,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 40,
              "highlight_start": 36,
              "text": "            snapshot.volume_data = self.fetch_bybit_volume_data(&bybit_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:358:35\n    |\n358 | ...price_data = self.fetch_okx_price_data(...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n343 |     async fn fetch_okx_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                              +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 11771,
              "byte_start": 11771,
              "column_end": 30,
              "column_start": 30,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 343,
              "line_start": 343,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 30,
                  "highlight_start": 30,
                  "text": "    async fn fetch_okx_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 12368,
          "byte_start": 12364,
          "column_end": 39,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 358,
          "line_start": 358,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 39,
              "highlight_start": 35,
              "text": "            snapshot.price_data = self.fetch_okx_price_data(&okx_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `send_event` found for reference `&...` in the current scope\n   --> src/services/core/market_data/coinmarketcap.rs:593:31\n    |\n593 | ... pipelines.send_event(event).await;\n    |               ^^^^^^^^^^ method not found in `&...`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `send_event` found for reference `&...` in the current scope",
      "spans": [
        {
          "byte_end": 21840,
          "byte_start": 21830,
          "column_end": 41,
          "column_start": 31,
          "expansion": null,
          "file_name": "src/services/core/market_data/coinmarketcap.rs",
          "is_primary": true,
          "label": "method not found in `&...`",
          "line_end": 593,
          "line_start": 593,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 41,
              "highlight_start": 31,
              "text": "            let _ = pipelines.send_event(event).await;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:293:35\n    |\n293 | ...price_data = self.fetch_binance_price_d...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n278 |     async fn fetch_binance_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                  +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9467,
              "byte_start": 9467,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 278,
              "line_start": 278,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "    async fn fetch_binance_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 10089,
          "byte_start": 10085,
          "column_end": 39,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 293,
          "line_start": 293,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 39,
              "highlight_start": 35,
              "text": "            snapshot.price_data = self.fetch_binance_price_data(&binance_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:299:17\n    |\n299 |                 self.fetch_binance_funding...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n278 |     async fn fetch_binance_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                  +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9467,
              "byte_start": 9467,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 278,
              "line_start": 278,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "    async fn fetch_binance_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 10297,
          "byte_start": 10293,
          "column_end": 21,
          "column_start": 17,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 299,
          "line_start": 299,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 21,
              "highlight_start": 17,
              "text": "                self.fetch_binance_funding_rate(&binance_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:304:36\n    |\n304 | ...olume_data = self.fetch_binance_volume_...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n278 |     async fn fetch_binance_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                  +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9467,
              "byte_start": 9467,
              "column_end": 34,
              "column_start": 34,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 278,
              "line_start": 278,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 34,
                  "highlight_start": 34,
                  "text": "    async fn fetch_binance_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 10477,
          "byte_start": 10473,
          "column_end": 40,
          "column_start": 36,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 304,
          "line_start": 304,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 40,
              "highlight_start": 36,
              "text": "            snapshot.volume_data = self.fetch_binance_volume_data(&binance_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:326:35\n    |\n326 | ...price_data = self.fetch_bybit_price_dat...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n311 |     async fn fetch_bybit_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 10637,
              "byte_start": 10637,
              "column_end": 32,
              "column_start": 32,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 311,
              "line_start": 311,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 32,
                  "highlight_start": 32,
                  "text": "    async fn fetch_bybit_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 11255,
          "byte_start": 11251,
          "column_end": 39,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 326,
          "line_start": 326,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 39,
              "highlight_start": 35,
              "text": "            snapshot.price_data = self.fetch_bybit_price_data(&bybit_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:331:42\n    |\n331 | ..._rate_data = self.fetch_bybit_funding_r...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n311 |     async fn fetch_bybit_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 10637,
              "byte_start": 10637,
              "column_end": 32,
              "column_start": 32,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 311,
              "line_start": 311,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 32,
                  "highlight_start": 32,
                  "text": "    async fn fetch_bybit_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 11443,
          "byte_start": 11439,
          "column_end": 46,
          "column_start": 42,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 331,
          "line_start": 331,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 46,
              "highlight_start": 42,
              "text": "            snapshot.funding_rate_data = self.fetch_bybit_funding_rate(&bybit_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:336:36\n    |\n336 | ...olume_data = self.fetch_bybit_volume_da...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n311 |     async fn fetch_bybit_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                                +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 10637,
              "byte_start": 10637,
              "column_end": 32,
              "column_start": 32,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 311,
              "line_start": 311,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 32,
                  "highlight_start": 32,
                  "text": "    async fn fetch_bybit_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 11619,
          "byte_start": 11615,
          "column_end": 40,
          "column_start": 36,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 336,
          "line_start": 336,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 40,
              "highlight_start": 36,
              "text": "            snapshot.volume_data = self.fetch_bybit_volume_data(&bybit_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `*self` as mutable, as it is behind a `&` reference\n   --> src/services/core/market_data/market_data_ingestion.rs:358:35\n    |\n358 | ...price_data = self.fetch_okx_price_data(...\n    |                 ^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n343 |     async fn fetch_okx_data(&mut self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {\n    |                              +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 11771,
              "byte_start": 11771,
              "column_end": 30,
              "column_start": 30,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 343,
              "line_start": 343,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 30,
                  "highlight_start": 30,
                  "text": "    async fn fetch_okx_data(&self, pair: &str) -> ArbitrageResult<MarketDataSnapshot> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `*self` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 12368,
          "byte_start": 12364,
          "column_end": 39,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 358,
          "line_start": 358,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 39,
              "highlight_start": 35,
              "text": "            snapshot.price_data = self.fetch_okx_price_data(&okx_symbol).await.ok();"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied\n    --> src/services/core/market_data/market_data_ingestion.rs:1105:53\n     |\n1105 | ... = Result<FundingRateInfo, ArbitrageError>> ...\n     |       ^^^^^^                ---------------- help: remove the unnecessary generic argument\n     |       |\n     |       expected 1 generic argument\n     |\nnote: type alias defined here, with 1 generic parameter: `T`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs:236:10\n     |\n236  | pub type Result<T> = StdResult<T, error::...\n     |          ^^^^^^ -\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "type alias defined here, with 1 generic parameter: `T`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 8913,
              "byte_start": 8912,
              "column_end": 18,
              "column_start": 17,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": false,
              "label": "",
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 18,
                  "highlight_start": 17,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            },
            {
              "byte_end": 8911,
              "byte_start": 8905,
              "column_end": 16,
              "column_start": 10,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 16,
                  "highlight_start": 10,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "remove the unnecessary generic argument",
          "rendered": null,
          "spans": [
            {
              "byte_end": 40480,
              "byte_start": 40464,
              "column_end": 91,
              "column_start": 75,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1105,
              "line_start": 1105,
              "suggested_replacement": "",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 91,
                  "highlight_start": 75,
                  "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0107",
        "explanation": "An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "type alias takes 1 generic argument but 2 generic arguments were supplied",
      "spans": [
        {
          "byte_end": 40448,
          "byte_start": 40442,
          "column_end": 59,
          "column_start": 53,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected 1 generic argument",
          "line_end": 1105,
          "line_start": 1105,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 53,
              "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied\n    --> src/services/core/market_data/market_data_ingestion.rs:1113:53\n     |\n1113 | ... = Result<FundingRateInfo, ArbitrageError>> ...\n     |       ^^^^^^                ---------------- help: remove the unnecessary generic argument\n     |       |\n     |       expected 1 generic argument\n     |\nnote: type alias defined here, with 1 generic parameter: `T`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs:236:10\n     |\n236  | pub type Result<T> = StdResult<T, error::...\n     |          ^^^^^^ -\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "type alias defined here, with 1 generic parameter: `T`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 8913,
              "byte_start": 8912,
              "column_end": 18,
              "column_start": 17,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": false,
              "label": "",
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 18,
                  "highlight_start": 17,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            },
            {
              "byte_end": 8911,
              "byte_start": 8905,
              "column_end": 16,
              "column_start": 10,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 16,
                  "highlight_start": 10,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "remove the unnecessary generic argument",
          "rendered": null,
          "spans": [
            {
              "byte_end": 40845,
              "byte_start": 40829,
              "column_end": 91,
              "column_start": 75,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1113,
              "line_start": 1113,
              "suggested_replacement": "",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 91,
                  "highlight_start": 75,
                  "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0107",
        "explanation": "An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "type alias takes 1 generic argument but 2 generic arguments were supplied",
      "spans": [
        {
          "byte_end": 40813,
          "byte_start": 40807,
          "column_end": 59,
          "column_start": 53,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected 1 generic argument",
          "line_end": 1113,
          "line_start": 1113,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 53,
              "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied\n    --> src/services/core/market_data/market_data_ingestion.rs:1132:53\n     |\n1132 | ... = Result<FundingRateInfo, ArbitrageError>> ...\n     |       ^^^^^^                ---------------- help: remove the unnecessary generic argument\n     |       |\n     |       expected 1 generic argument\n     |\nnote: type alias defined here, with 1 generic parameter: `T`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs:236:10\n     |\n236  | pub type Result<T> = StdResult<T, error::...\n     |          ^^^^^^ -\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "type alias defined here, with 1 generic parameter: `T`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 8913,
              "byte_start": 8912,
              "column_end": 18,
              "column_start": 17,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": false,
              "label": "",
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 18,
                  "highlight_start": 17,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            },
            {
              "byte_end": 8911,
              "byte_start": 8905,
              "column_end": 16,
              "column_start": 10,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 16,
                  "highlight_start": 10,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "remove the unnecessary generic argument",
          "rendered": null,
          "spans": [
            {
              "byte_end": 42105,
              "byte_start": 42089,
              "column_end": 91,
              "column_start": 75,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1132,
              "line_start": 1132,
              "suggested_replacement": "",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 91,
                  "highlight_start": 75,
                  "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0107",
        "explanation": "An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "type alias takes 1 generic argument but 2 generic arguments were supplied",
      "spans": [
        {
          "byte_end": 42073,
          "byte_start": 42067,
          "column_end": 59,
          "column_start": 53,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected 1 generic argument",
          "line_end": 1132,
          "line_start": 1132,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 53,
              "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n    --> src/services/core/market_data/market_data_ingestion.rs:1139:9\n     |\n1139 |         join_all(futures).await\n     |         ^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<Result<FundingRateInfo, ...>>`, found `Vec<Result<FundingRateInfo, Error>>`\n     |\n     = note: expected struct `std::vec::Vec<std::result::Result<_, utils::error::ArbitrageError>>`\n                found struct `std::vec::Vec<std::result::Result<_, worker::Error>>`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected struct `std::vec::Vec<std::result::Result<_, utils::error::ArbitrageError>>`\n   found struct `std::vec::Vec<std::result::Result<_, worker::Error>>`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 42248,
          "byte_start": 42225,
          "column_end": 32,
          "column_start": 9,
          "expansion": {
            "def_site_span": {
              "byte_end": 0,
              "byte_start": 0,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/lib.rs",
              "is_primary": false,
              "label": null,
              "line_end": 1,
              "line_start": 1,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": []
            },
            "macro_decl_name": "desugaring of `await` expression",
            "span": {
              "byte_end": 42248,
              "byte_start": 42225,
              "column_end": 32,
              "column_start": 9,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": false,
              "label": null,
              "line_end": 1139,
              "line_start": 1139,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 32,
                  "highlight_start": 9,
                  "text": "        join_all(futures).await"
                }
              ]
            }
          },
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected `Vec<Result<FundingRateInfo, ...>>`, found `Vec<Result<FundingRateInfo, Error>>`",
          "line_end": 1139,
          "line_start": 1139,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 9,
              "text": "        join_all(futures).await"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0271]: expected `impl Future<Output = Result<FundingRateInfo, ArbitrageError>>` to be a future that resolves to `Result<FundingRateInfo, Error>`, but it resolves to `Result<FundingRateInfo, ArbitrageError>`\n    --> src/services/core/market_data/market_data_ingestion.rs:1102:34\n     |\n1102 | ...sh(Box::pin(self.fetch_binance_funding_rate(&pair))\n     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<FundingRateInfo, Error>`, found `Result<FundingRateInfo, ArbitrageError>`\n     |\n     = note: expected enum `std::result::Result<_, worker::Error>`\n                found enum `std::result::Result<_, utils::error::ArbitrageError>`\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-11146889717715931266.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected enum `std::result::Result<_, worker::Error>`\n   found enum `std::result::Result<_, utils::error::ArbitrageError>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-11146889717715931266.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0271",
        "explanation": "A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"
      },
      "level": "error",
      "message": "expected `impl Future<Output = Result<FundingRateInfo, ArbitrageError>>` to be a future that resolves to `Result<FundingRateInfo, Error>`, but it resolves to `Result<FundingRateInfo, ArbitrageError>`",
      "spans": [
        {
          "byte_end": 40324,
          "byte_start": 40276,
          "column_end": 82,
          "column_start": 34,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected `Result<FundingRateInfo, Error>`, found `Result<FundingRateInfo, ArbitrageError>`",
          "line_end": 1102,
          "line_start": 1102,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 82,
              "highlight_start": 34,
              "text": "                    futures.push(Box::pin(self.fetch_binance_funding_rate(&pair))"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0271]: expected `impl Future<Output = Result<FundingRateInfo, ArbitrageError>>` to be a future that resolves to `Result<FundingRateInfo, Error>`, but it resolves to `Result<FundingRateInfo, ArbitrageError>`\n    --> src/services/core/market_data/market_data_ingestion.rs:1110:34\n     |\n1110 | ...sh(Box::pin(self.fetch_bybit_funding_rate(&pair))\n     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<FundingRateInfo, Error>`, found `Result<FundingRateInfo, ArbitrageError>`\n     |\n     = note: expected enum `std::result::Result<_, worker::Error>`\n                found enum `std::result::Result<_, utils::error::ArbitrageError>`\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8050646318745151910.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected enum `std::result::Result<_, worker::Error>`\n   found enum `std::result::Result<_, utils::error::ArbitrageError>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8050646318745151910.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0271",
        "explanation": "A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"
      },
      "level": "error",
      "message": "expected `impl Future<Output = Result<FundingRateInfo, ArbitrageError>>` to be a future that resolves to `Result<FundingRateInfo, Error>`, but it resolves to `Result<FundingRateInfo, ArbitrageError>`",
      "spans": [
        {
          "byte_end": 40689,
          "byte_start": 40643,
          "column_end": 80,
          "column_start": 34,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected `Result<FundingRateInfo, Error>`, found `Result<FundingRateInfo, ArbitrageError>`",
          "line_end": 1110,
          "line_start": 1110,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 80,
              "highlight_start": 34,
              "text": "                    futures.push(Box::pin(self.fetch_bybit_funding_rate(&pair))"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied\n    --> src/services/core/market_data/market_data_ingestion.rs:1105:53\n     |\n1105 | ... = Result<FundingRateInfo, ArbitrageError>> ...\n     |       ^^^^^^                ---------------- help: remove the unnecessary generic argument\n     |       |\n     |       expected 1 generic argument\n     |\nnote: type alias defined here, with 1 generic parameter: `T`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs:236:10\n     |\n236  | pub type Result<T> = StdResult<T, error::...\n     |          ^^^^^^ -\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "type alias defined here, with 1 generic parameter: `T`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 8913,
              "byte_start": 8912,
              "column_end": 18,
              "column_start": 17,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": false,
              "label": "",
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 18,
                  "highlight_start": 17,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            },
            {
              "byte_end": 8911,
              "byte_start": 8905,
              "column_end": 16,
              "column_start": 10,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 16,
                  "highlight_start": 10,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "remove the unnecessary generic argument",
          "rendered": null,
          "spans": [
            {
              "byte_end": 40480,
              "byte_start": 40464,
              "column_end": 91,
              "column_start": 75,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1105,
              "line_start": 1105,
              "suggested_replacement": "",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 91,
                  "highlight_start": 75,
                  "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0107",
        "explanation": "An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "type alias takes 1 generic argument but 2 generic arguments were supplied",
      "spans": [
        {
          "byte_end": 40448,
          "byte_start": 40442,
          "column_end": 59,
          "column_start": 53,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected 1 generic argument",
          "line_end": 1105,
          "line_start": 1105,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 53,
              "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied\n    --> src/services/core/market_data/market_data_ingestion.rs:1113:53\n     |\n1113 | ... = Result<FundingRateInfo, ArbitrageError>> ...\n     |       ^^^^^^                ---------------- help: remove the unnecessary generic argument\n     |       |\n     |       expected 1 generic argument\n     |\nnote: type alias defined here, with 1 generic parameter: `T`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs:236:10\n     |\n236  | pub type Result<T> = StdResult<T, error::...\n     |          ^^^^^^ -\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "type alias defined here, with 1 generic parameter: `T`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 8913,
              "byte_start": 8912,
              "column_end": 18,
              "column_start": 17,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": false,
              "label": "",
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 18,
                  "highlight_start": 17,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            },
            {
              "byte_end": 8911,
              "byte_start": 8905,
              "column_end": 16,
              "column_start": 10,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 16,
                  "highlight_start": 10,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "remove the unnecessary generic argument",
          "rendered": null,
          "spans": [
            {
              "byte_end": 40845,
              "byte_start": 40829,
              "column_end": 91,
              "column_start": 75,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1113,
              "line_start": 1113,
              "suggested_replacement": "",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 91,
                  "highlight_start": 75,
                  "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0107",
        "explanation": "An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "type alias takes 1 generic argument but 2 generic arguments were supplied",
      "spans": [
        {
          "byte_end": 40813,
          "byte_start": 40807,
          "column_end": 59,
          "column_start": 53,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected 1 generic argument",
          "line_end": 1113,
          "line_start": 1113,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 53,
              "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied\n    --> src/services/core/market_data/market_data_ingestion.rs:1132:53\n     |\n1132 | ... = Result<FundingRateInfo, ArbitrageError>> ...\n     |       ^^^^^^                ---------------- help: remove the unnecessary generic argument\n     |       |\n     |       expected 1 generic argument\n     |\nnote: type alias defined here, with 1 generic parameter: `T`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs:236:10\n     |\n236  | pub type Result<T> = StdResult<T, error::...\n     |          ^^^^^^ -\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "type alias defined here, with 1 generic parameter: `T`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 8913,
              "byte_start": 8912,
              "column_end": 18,
              "column_start": 17,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": false,
              "label": "",
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 18,
                  "highlight_start": 17,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            },
            {
              "byte_end": 8911,
              "byte_start": 8905,
              "column_end": 16,
              "column_start": 10,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 236,
              "line_start": 236,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 16,
                  "highlight_start": 10,
                  "text": "pub type Result<T> = StdResult<T, error::Error>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "remove the unnecessary generic argument",
          "rendered": null,
          "spans": [
            {
              "byte_end": 42105,
              "byte_start": 42089,
              "column_end": 91,
              "column_start": 75,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1132,
              "line_start": 1132,
              "suggested_replacement": "",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 91,
                  "highlight_start": 75,
                  "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0107",
        "explanation": "An incorrect number of generic arguments was provided.\n\nErroneous code example:\n\n```compile_fail,E0107\nstruct Foo<T> { x: T }\n\nstruct Bar { x: Foo }             // error: wrong number of type arguments:\n                                  //        expected 1, found 0\nstruct Baz<S, T> { x: Foo<S, T> } // error: wrong number of type arguments:\n                                  //        expected 1, found 2\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool>(x);                 // error: wrong number of type arguments:\n                                    //        expected 2, found 1\n    foo::<bool, i32, i32>(x, 2, 4); // error: wrong number of type arguments:\n                                    //        expected 2, found 3\n    f::<'static>();                 // error: wrong number of lifetime arguments\n                                    //        expected 0, found 1\n}\n```\n\nWhen using/declaring an item with generic arguments, you must provide the exact\nsame number:\n\n```\nstruct Foo<T> { x: T }\n\nstruct Bar<T> { x: Foo<T> }               // ok!\nstruct Baz<S, T> { x: Foo<S>, y: Foo<T> } // ok!\n\nfn foo<T, U>(x: T, y: U) {}\nfn f() {}\n\nfn main() {\n    let x: bool = true;\n    foo::<bool, u32>(x, 12);              // ok!\n    f();                                  // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "type alias takes 1 generic argument but 2 generic arguments were supplied",
      "spans": [
        {
          "byte_end": 42073,
          "byte_start": 42067,
          "column_end": 59,
          "column_start": 53,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected 1 generic argument",
          "line_end": 1132,
          "line_start": 1132,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 53,
              "text": "                                dyn Future<Output = Result<FundingRateInfo, ArbitrageError>> + Send,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n    --> src/services/core/market_data/market_data_ingestion.rs:1139:9\n     |\n1139 |         join_all(futures).await\n     |         ^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<Result<FundingRateInfo, ...>>`, found `Vec<Result<FundingRateInfo, Error>>`\n     |\n     = note: expected struct `std::vec::Vec<std::result::Result<_, utils::error::ArbitrageError>>`\n                found struct `std::vec::Vec<std::result::Result<_, worker::Error>>`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected struct `std::vec::Vec<std::result::Result<_, utils::error::ArbitrageError>>`\n   found struct `std::vec::Vec<std::result::Result<_, worker::Error>>`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 42248,
          "byte_start": 42225,
          "column_end": 32,
          "column_start": 9,
          "expansion": {
            "def_site_span": {
              "byte_end": 0,
              "byte_start": 0,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/lib.rs",
              "is_primary": false,
              "label": null,
              "line_end": 1,
              "line_start": 1,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": []
            },
            "macro_decl_name": "desugaring of `await` expression",
            "span": {
              "byte_end": 42248,
              "byte_start": 42225,
              "column_end": 32,
              "column_start": 9,
              "expansion": null,
              "file_name": "src/services/core/market_data/market_data_ingestion.rs",
              "is_primary": false,
              "label": null,
              "line_end": 1139,
              "line_start": 1139,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 32,
                  "highlight_start": 9,
                  "text": "        join_all(futures).await"
                }
              ]
            }
          },
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected `Vec<Result<FundingRateInfo, ...>>`, found `Vec<Result<FundingRateInfo, Error>>`",
          "line_end": 1139,
          "line_start": 1139,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 9,
              "text": "        join_all(futures).await"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0271]: expected `impl Future<Output = Result<FundingRateInfo, ArbitrageError>>` to be a future that resolves to `Result<FundingRateInfo, Error>`, but it resolves to `Result<FundingRateInfo, ArbitrageError>`\n    --> src/services/core/market_data/market_data_ingestion.rs:1102:34\n     |\n1102 | ...sh(Box::pin(self.fetch_binance_funding_rate(&pair))\n     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<FundingRateInfo, Error>`, found `Result<FundingRateInfo, ArbitrageError>`\n     |\n     = note: expected enum `std::result::Result<_, worker::Error>`\n                found enum `std::result::Result<_, utils::error::ArbitrageError>`\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-15493074650099308685.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected enum `std::result::Result<_, worker::Error>`\n   found enum `std::result::Result<_, utils::error::ArbitrageError>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-15493074650099308685.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0271",
        "explanation": "A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"
      },
      "level": "error",
      "message": "expected `impl Future<Output = Result<FundingRateInfo, ArbitrageError>>` to be a future that resolves to `Result<FundingRateInfo, Error>`, but it resolves to `Result<FundingRateInfo, ArbitrageError>`",
      "spans": [
        {
          "byte_end": 40324,
          "byte_start": 40276,
          "column_end": 82,
          "column_start": 34,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected `Result<FundingRateInfo, Error>`, found `Result<FundingRateInfo, ArbitrageError>`",
          "line_end": 1102,
          "line_start": 1102,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 82,
              "highlight_start": 34,
              "text": "                    futures.push(Box::pin(self.fetch_binance_funding_rate(&pair))"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0271]: expected `impl Future<Output = Result<FundingRateInfo, ArbitrageError>>` to be a future that resolves to `Result<FundingRateInfo, Error>`, but it resolves to `Result<FundingRateInfo, ArbitrageError>`\n    --> src/services/core/market_data/market_data_ingestion.rs:1110:34\n     |\n1110 | ...sh(Box::pin(self.fetch_bybit_funding_rate(&pair))\n     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Result<FundingRateInfo, Error>`, found `Result<FundingRateInfo, ArbitrageError>`\n     |\n     = note: expected enum `std::result::Result<_, worker::Error>`\n                found enum `std::result::Result<_, utils::error::ArbitrageError>`\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-11429592730413650869.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected enum `std::result::Result<_, worker::Error>`\n   found enum `std::result::Result<_, utils::error::ArbitrageError>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-11429592730413650869.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0271",
        "explanation": "A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"
      },
      "level": "error",
      "message": "expected `impl Future<Output = Result<FundingRateInfo, ArbitrageError>>` to be a future that resolves to `Result<FundingRateInfo, Error>`, but it resolves to `Result<FundingRateInfo, ArbitrageError>`",
      "spans": [
        {
          "byte_end": 40689,
          "byte_start": 40643,
          "column_end": 80,
          "column_start": 34,
          "expansion": null,
          "file_name": "src/services/core/market_data/market_data_ingestion.rs",
          "is_primary": true,
          "label": "expected `Result<FundingRateInfo, Error>`, found `Result<FundingRateInfo, ArbitrageError>`",
          "line_end": 1110,
          "line_start": 1110,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 80,
              "highlight_start": 34,
              "text": "                    futures.push(Box::pin(self.fetch_bybit_funding_rate(&pair))"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `size_usd` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:124:60\n    |\n124 | ...on_data.size_usd {\n    |            ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `size_usd` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 4724,
          "byte_start": 4716,
          "column_end": 68,
          "column_start": 60,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 124,
          "line_start": 124,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 68,
              "highlight_start": 60,
              "text": "        } else if let Some(fixed_usd_size) = position_data.size_usd {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pair` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:153:39\n    |\n153 | ...tion_data.pair.clone(),\n    |              ^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pair` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 6133,
          "byte_start": 6129,
          "column_end": 43,
          "column_start": 39,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 153,
          "line_start": 153,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 43,
              "highlight_start": 39,
              "text": "                symbol: position_data.pair.clone(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pair` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:180:39\n    |\n180 | ...tion_data.pair.clone(),\n    |              ^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pair` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 7279,
          "byte_start": 7275,
          "column_end": 43,
          "column_start": 39,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 180,
          "line_start": 180,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 43,
              "highlight_start": 39,
              "text": "                symbol: position_data.pair.clone(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pair` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:212:35\n    |\n212 | ...tion_data.pair.clone(),\n    |              ^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pair` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 8620,
          "byte_start": 8616,
          "column_end": 39,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 212,
          "line_start": 212,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 39,
              "highlight_start": 35,
              "text": "            symbol: position_data.pair.clone(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `exchange` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:218:42\n    |\n218 | ...on_data.exchange, // This is ExchangeId...\n    |            ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `exchange` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 8916,
          "byte_start": 8908,
          "column_end": 50,
          "column_start": 42,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 218,
          "line_start": 218,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 50,
              "highlight_start": 42,
              "text": "            long_exchange: position_data.exchange, // This is ExchangeIdEnum, not Option<ExchangeIdEnum>"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `exchange` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:234:37\n    |\n234 |             exchange: position_data.exchange,\n    |                                     ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `exchange` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 9766,
          "byte_start": 9758,
          "column_end": 45,
          "column_start": 37,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 234,
          "line_start": 234,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 45,
              "highlight_start": 37,
              "text": "            exchange: position_data.exchange,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pair` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:235:33\n    |\n235 |             pair: position_data.pair,\n    |                                 ^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-4212043309270546274.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pair` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 9804,
          "byte_start": 9800,
          "column_end": 37,
          "column_start": 33,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 235,
          "line_start": 235,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 37,
              "highlight_start": 33,
              "text": "            pair: position_data.pair,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `current_price` on type `UpdatePositionData`\n   --> src/services/core/trading/positions.rs:296:42\n    |\n296 | ..._data.current_price {\n    |          ^^^^^^^^^^^^^ unknown field\n    |\n    = note: available fields are: `take_profit_price`, `stop_loss_price`, `status`, `size`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-16363824479776012122.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `take_profit_price`, `stop_loss_price`, `status`, `size`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-16363824479776012122.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `current_price` on type `UpdatePositionData`",
      "spans": [
        {
          "byte_end": 12256,
          "byte_start": 12243,
          "column_end": 55,
          "column_start": 42,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 296,
          "line_start": 296,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 55,
              "highlight_start": 42,
              "text": "        if let Some(price) = update_data.current_price {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pnl` on type `UpdatePositionData`\n   --> src/services/core/trading/positions.rs:301:40\n    |\n301 |         if let Some(pnl) = update_data.pnl {\n    |                                        ^^^ unknown field\n    |\n    = note: available fields are: `take_profit_price`, `stop_loss_price`, `status`, `size`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-16363824479776012122.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `take_profit_price`, `stop_loss_price`, `status`, `size`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-16363824479776012122.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pnl` on type `UpdatePositionData`",
      "spans": [
        {
          "byte_end": 12558,
          "byte_start": 12555,
          "column_end": 43,
          "column_start": 40,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 301,
          "line_start": 301,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 43,
              "highlight_start": 40,
              "text": "        if let Some(pnl) = update_data.pnl {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `size_usd` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:124:60\n    |\n124 | ...on_data.size_usd {\n    |            ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `size_usd` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 4724,
          "byte_start": 4716,
          "column_end": 68,
          "column_start": 60,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 124,
          "line_start": 124,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 68,
              "highlight_start": 60,
              "text": "        } else if let Some(fixed_usd_size) = position_data.size_usd {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pair` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:153:39\n    |\n153 | ...tion_data.pair.clone(),\n    |              ^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pair` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 6133,
          "byte_start": 6129,
          "column_end": 43,
          "column_start": 39,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 153,
          "line_start": 153,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 43,
              "highlight_start": 39,
              "text": "                symbol: position_data.pair.clone(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pair` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:180:39\n    |\n180 | ...tion_data.pair.clone(),\n    |              ^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pair` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 7279,
          "byte_start": 7275,
          "column_end": 43,
          "column_start": 39,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 180,
          "line_start": 180,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 43,
              "highlight_start": 39,
              "text": "                symbol: position_data.pair.clone(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pair` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:212:35\n    |\n212 | ...tion_data.pair.clone(),\n    |              ^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pair` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 8620,
          "byte_start": 8616,
          "column_end": 39,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 212,
          "line_start": 212,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 39,
              "highlight_start": 35,
              "text": "            symbol: position_data.pair.clone(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `exchange` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:218:42\n    |\n218 | ...on_data.exchange, // This is ExchangeId...\n    |            ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `exchange` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 8916,
          "byte_start": 8908,
          "column_end": 50,
          "column_start": 42,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 218,
          "line_start": 218,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 50,
              "highlight_start": 42,
              "text": "            long_exchange: position_data.exchange, // This is ExchangeIdEnum, not Option<ExchangeIdEnum>"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `exchange` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:234:37\n    |\n234 |             exchange: position_data.exchange,\n    |                                     ^^^^^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `exchange` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 9766,
          "byte_start": 9758,
          "column_end": 45,
          "column_start": 37,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 234,
          "line_start": 234,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 45,
              "highlight_start": 37,
              "text": "            exchange: position_data.exchange,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pair` on type `CreatePositionData`\n   --> src/services/core/trading/positions.rs:235:33\n    |\n235 |             pair: position_data.pair,\n    |                                 ^^^^ unknown field\n    |\n    = note: available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `symbol`, `side`, `size`, `entry_price_long`, `entry_price_short` ... and 6 others",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-17504188224155064401.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pair` on type `CreatePositionData`",
      "spans": [
        {
          "byte_end": 9804,
          "byte_start": 9800,
          "column_end": 37,
          "column_start": 33,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 235,
          "line_start": 235,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 37,
              "highlight_start": 33,
              "text": "            pair: position_data.pair,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `current_price` on type `UpdatePositionData`\n   --> src/services/core/trading/positions.rs:296:42\n    |\n296 | ..._data.current_price {\n    |          ^^^^^^^^^^^^^ unknown field\n    |\n    = note: available fields are: `take_profit_price`, `stop_loss_price`, `status`, `size`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-11552956232128345813.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `take_profit_price`, `stop_loss_price`, `status`, `size`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-11552956232128345813.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `current_price` on type `UpdatePositionData`",
      "spans": [
        {
          "byte_end": 12256,
          "byte_start": 12243,
          "column_end": 55,
          "column_start": 42,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 296,
          "line_start": 296,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 55,
              "highlight_start": 42,
              "text": "        if let Some(price) = update_data.current_price {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `pnl` on type `UpdatePositionData`\n   --> src/services/core/trading/positions.rs:301:40\n    |\n301 |         if let Some(pnl) = update_data.pnl {\n    |                                        ^^^ unknown field\n    |\n    = note: available fields are: `take_profit_price`, `stop_loss_price`, `status`, `size`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-11552956232128345813.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `take_profit_price`, `stop_loss_price`, `status`, `size`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-11552956232128345813.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `pnl` on type `UpdatePositionData`",
      "spans": [
        {
          "byte_end": 12558,
          "byte_start": 12555,
          "column_end": 43,
          "column_start": 40,
          "expansion": null,
          "file_name": "src/services/core/trading/positions.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 301,
          "line_start": 301,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 43,
              "highlight_start": 40,
              "text": "        if let Some(pnl) = update_data.pnl {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `put` found for struct `KVService` in the current scope\n   --> src/services/core/user/ai_access.rs:106:14\n    |\n104 |           let _ = self\n    |  _________________-\n105 | |             .kv_service\n106 | |             .put(&cache_key, &cache_valu...\n    | |             -^^^ method not found in `KVService`\n    | |_____________|\n    |\n    |\n   ::: src/services/core/infrastructure/kv.rs:13:1\n    |\n13  |   pub struct KVService {\n    |   -------------------- method `put` not found for this struct\n    |\n   ::: src/services/core/trading/kv_operations.rs:31:14\n    |\n31  |       async fn put<T: Serialize + Send + ?...\n    |                --- the method is available for `services::core::infrastructure::kv::KVService` here\n    |\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `KvOperations` which provides `put` is implemented but not in scope; perhaps you want to import it\n    |\n1   + use crate::services::core::trading::kv_operations::KvOperations;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "trait `KvOperations` which provides `put` is implemented but not in scope; perhaps you want to import it",
          "rendered": null,
          "spans": [
            {
              "byte_end": 0,
              "byte_start": 0,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1,
              "line_start": 1,
              "suggested_replacement": "use crate::services::core::trading::kv_operations::KvOperations;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::infrastructure::d1::D1Service;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `put` found for struct `KVService` in the current scope",
      "spans": [
        {
          "byte_end": 3618,
          "byte_start": 3576,
          "column_end": 14,
          "column_start": 17,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "",
          "line_end": 106,
          "line_start": 104,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 21,
              "highlight_start": 17,
              "text": "        let _ = self"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "            .kv_service"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            .put(&cache_key, &cache_value, Some(3600))"
            }
          ]
        },
        {
          "byte_end": 3621,
          "byte_start": 3618,
          "column_end": 17,
          "column_start": 14,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "method not found in `KVService`",
          "line_end": 106,
          "line_start": 106,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 17,
              "highlight_start": 14,
              "text": "            .put(&cache_key, &cache_value, Some(3600))"
            }
          ]
        },
        {
          "byte_end": 407,
          "byte_start": 387,
          "column_end": 21,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/kv.rs",
          "is_primary": false,
          "label": "method `put` not found for this struct",
          "line_end": 13,
          "line_start": 13,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "pub struct KVService {"
            }
          ]
        },
        {
          "byte_end": 1000,
          "byte_start": 997,
          "column_end": 17,
          "column_start": 14,
          "expansion": null,
          "file_name": "src/services/core/trading/kv_operations.rs",
          "is_primary": false,
          "label": "the method is available for `services::core::infrastructure::kv::KVService` here",
          "line_end": 31,
          "line_start": 31,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 17,
              "highlight_start": 14,
              "text": "    async fn put<T: Serialize + Send + ?Sized>(&self, key: &str, value: &T) -> KvResult<()>;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/user/ai_access.rs:109:12\n    |\n109 |         Ok(access_level)\n    |         -- ^^^^^^^^^^^^ expected `AIAccessLevel`, found `UserAccessLevel`\n    |         |\n    |         arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `types::UserAccessLevel` due to the type of the argument passed\n   --> src/services/core/user/ai_access.rs:109:9\n    |\n109 |         Ok(access_level)\n    |         ^^^------------^\n    |            |\n    |            this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:532:5\n    |\n532 |     Ok(#[stable(feature = \"rust1\", since =...\n    |     ^^\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "the type constructed contains `types::UserAccessLevel` due to the type of the argument passed",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3704,
              "byte_start": 3692,
              "column_end": 24,
              "column_start": 12,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": false,
              "label": "this argument influences the type of `Ok`",
              "line_end": 109,
              "line_start": 109,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 12,
                  "text": "        Ok(access_level)"
                }
              ]
            },
            {
              "byte_end": 3705,
              "byte_start": 3689,
              "column_end": 25,
              "column_start": 9,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 109,
              "line_start": 109,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 25,
                  "highlight_start": 9,
                  "text": "        Ok(access_level)"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "tuple variant defined here",
          "rendered": null,
          "spans": [
            {
              "byte_end": 19731,
              "byte_start": 19729,
              "column_end": 7,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs",
              "is_primary": true,
              "label": null,
              "line_end": 532,
              "line_start": 532,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 7,
                  "highlight_start": 5,
                  "text": "    Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 3704,
          "byte_start": 3692,
          "column_end": 24,
          "column_start": 12,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "expected `AIAccessLevel`, found `UserAccessLevel`",
          "line_end": 109,
          "line_start": 109,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 12,
              "text": "        Ok(access_level)"
            }
          ]
        },
        {
          "byte_end": 3691,
          "byte_start": 3689,
          "column_end": 11,
          "column_start": 9,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "arguments to this enum variant are incorrect",
          "line_end": 109,
          "line_start": 109,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 11,
              "highlight_start": 9,
              "text": "        Ok(access_level)"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `self.kv_service` as mutable, as it is behind a `&` reference\n   --> src/services/core/user/ai_access.rs:115:9\n    |\n115 |         self.kv_service\n    |         ^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n113 |     pub async fn invalidate_ai_access_cache(&mut self, user_id: &str) -> Result<(), String> {\n    |                                              +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3810,
              "byte_start": 3810,
              "column_end": 46,
              "column_start": 46,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 113,
              "line_start": 113,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 46,
                  "highlight_start": 46,
                  "text": "    pub async fn invalidate_ai_access_cache(&self, user_id: &str) -> Result<(), String> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `self.kv_service` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 3942,
          "byte_start": 3927,
          "column_end": 24,
          "column_start": 9,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 115,
          "line_start": 115,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 9,
              "text": "        self.kv_service"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `self.kv_service` as mutable, as it is behind a `&` reference\n   --> src/services/core/user/ai_access.rs:261:17\n    |\n261 | ... let _ = self.kv_service.delete(&cache_...\n    |             ^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n239 |         &mut self,\n    |          +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9343,
              "byte_start": 9343,
              "column_end": 10,
              "column_start": 10,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 239,
              "line_start": 239,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 10,
                  "highlight_start": 10,
                  "text": "        &self,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `self.kv_service` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 10041,
          "byte_start": 10026,
          "column_end": 32,
          "column_start": 17,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 261,
          "line_start": 261,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 17,
              "text": "        let _ = self.kv_service.delete(&cache_key).await;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `put` found for struct `KVService` in the current scope\n   --> src/services/core/user/ai_access.rs:106:14\n    |\n104 |           let _ = self\n    |  _________________-\n105 | |             .kv_service\n106 | |             .put(&cache_key, &cache_valu...\n    | |             -^^^ method not found in `KVService`\n    | |_____________|\n    |\n    |\n   ::: src/services/core/infrastructure/kv.rs:13:1\n    |\n13  |   pub struct KVService {\n    |   -------------------- method `put` not found for this struct\n    |\n   ::: src/services/core/trading/kv_operations.rs:31:14\n    |\n31  |       async fn put<T: Serialize + Send + ?...\n    |                --- the method is available for `services::core::infrastructure::kv::KVService` here\n    |\n    = help: items from traits can only be used if the trait is in scope\nhelp: trait `KvOperations` which provides `put` is implemented but not in scope; perhaps you want to import it\n    |\n1   + use crate::services::core::trading::kv_operations::KvOperations;\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "trait `KvOperations` which provides `put` is implemented but not in scope; perhaps you want to import it",
          "rendered": null,
          "spans": [
            {
              "byte_end": 0,
              "byte_start": 0,
              "column_end": 1,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1,
              "line_start": 1,
              "suggested_replacement": "use crate::services::core::trading::kv_operations::KvOperations;\n",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "use crate::services::core::infrastructure::d1::D1Service;"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `put` found for struct `KVService` in the current scope",
      "spans": [
        {
          "byte_end": 3618,
          "byte_start": 3576,
          "column_end": 14,
          "column_start": 17,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "",
          "line_end": 106,
          "line_start": 104,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 21,
              "highlight_start": 17,
              "text": "        let _ = self"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "            .kv_service"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            .put(&cache_key, &cache_value, Some(3600))"
            }
          ]
        },
        {
          "byte_end": 3621,
          "byte_start": 3618,
          "column_end": 17,
          "column_start": 14,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "method not found in `KVService`",
          "line_end": 106,
          "line_start": 106,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 17,
              "highlight_start": 14,
              "text": "            .put(&cache_key, &cache_value, Some(3600))"
            }
          ]
        },
        {
          "byte_end": 407,
          "byte_start": 387,
          "column_end": 21,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/kv.rs",
          "is_primary": false,
          "label": "method `put` not found for this struct",
          "line_end": 13,
          "line_start": 13,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "pub struct KVService {"
            }
          ]
        },
        {
          "byte_end": 1000,
          "byte_start": 997,
          "column_end": 17,
          "column_start": 14,
          "expansion": null,
          "file_name": "src/services/core/trading/kv_operations.rs",
          "is_primary": false,
          "label": "the method is available for `services::core::infrastructure::kv::KVService` here",
          "line_end": 31,
          "line_start": 31,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 17,
              "highlight_start": 14,
              "text": "    async fn put<T: Serialize + Send + ?Sized>(&self, key: &str, value: &T) -> KvResult<()>;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/user/ai_access.rs:109:12\n    |\n109 |         Ok(access_level)\n    |         -- ^^^^^^^^^^^^ expected `AIAccessLevel`, found `UserAccessLevel`\n    |         |\n    |         arguments to this enum variant are incorrect\n    |\nhelp: the type constructed contains `types::UserAccessLevel` due to the type of the argument passed\n   --> src/services/core/user/ai_access.rs:109:9\n    |\n109 |         Ok(access_level)\n    |         ^^^------------^\n    |            |\n    |            this argument influences the type of `Ok`\nnote: tuple variant defined here\n   --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:532:5\n    |\n532 |     Ok(#[stable(feature = \"rust1\", since =...\n    |     ^^\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "the type constructed contains `types::UserAccessLevel` due to the type of the argument passed",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3704,
              "byte_start": 3692,
              "column_end": 24,
              "column_start": 12,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": false,
              "label": "this argument influences the type of `Ok`",
              "line_end": 109,
              "line_start": 109,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 12,
                  "text": "        Ok(access_level)"
                }
              ]
            },
            {
              "byte_end": 3705,
              "byte_start": 3689,
              "column_end": 25,
              "column_start": 9,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 109,
              "line_start": 109,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 25,
                  "highlight_start": 9,
                  "text": "        Ok(access_level)"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "tuple variant defined here",
          "rendered": null,
          "spans": [
            {
              "byte_end": 19731,
              "byte_start": 19729,
              "column_end": 7,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs",
              "is_primary": true,
              "label": null,
              "line_end": 532,
              "line_start": 532,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 7,
                  "highlight_start": 5,
                  "text": "    Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 3704,
          "byte_start": 3692,
          "column_end": 24,
          "column_start": 12,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "expected `AIAccessLevel`, found `UserAccessLevel`",
          "line_end": 109,
          "line_start": 109,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 12,
              "text": "        Ok(access_level)"
            }
          ]
        },
        {
          "byte_end": 3691,
          "byte_start": 3689,
          "column_end": 11,
          "column_start": 9,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "arguments to this enum variant are incorrect",
          "line_end": 109,
          "line_start": 109,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 11,
              "highlight_start": 9,
              "text": "        Ok(access_level)"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `self.kv_service` as mutable, as it is behind a `&` reference\n   --> src/services/core/user/ai_access.rs:115:9\n    |\n115 |         self.kv_service\n    |         ^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n113 |     pub async fn invalidate_ai_access_cache(&mut self, user_id: &str) -> Result<(), String> {\n    |                                              +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3810,
              "byte_start": 3810,
              "column_end": 46,
              "column_start": 46,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 113,
              "line_start": 113,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 46,
                  "highlight_start": 46,
                  "text": "    pub async fn invalidate_ai_access_cache(&self, user_id: &str) -> Result<(), String> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `self.kv_service` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 3942,
          "byte_start": 3927,
          "column_end": 24,
          "column_start": 9,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 115,
          "line_start": 115,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 9,
              "text": "        self.kv_service"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `self.kv_service` as mutable, as it is behind a `&` reference\n   --> src/services/core/user/ai_access.rs:261:17\n    |\n261 | ... let _ = self.kv_service.delete(&cache_...\n    |             ^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n    |\nhelp: consider changing this to be a mutable reference\n    |\n239 |         &mut self,\n    |          +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be a mutable reference",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9343,
              "byte_start": 9343,
              "column_end": 10,
              "column_start": 10,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 239,
              "line_start": 239,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 10,
                  "highlight_start": 10,
                  "text": "        &self,"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `self.kv_service` as mutable, as it is behind a `&` reference",
      "spans": [
        {
          "byte_end": 10041,
          "byte_start": 10026,
          "column_end": 32,
          "column_start": 17,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`self` is a `&` reference, so the data it refers to cannot be borrowed as mutable",
          "line_end": 261,
          "line_start": 261,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 17,
              "text": "        let _ = self.kv_service.delete(&cache_key).await;"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `insert` found for struct `Arc<Mutex<...>>` in the current scope\n  --> src/test_utils/mock_kv_store.rs:43:19\n   |\n43 | ...   self.data.insert(key.to_string(), val...\n   |                 ^^^^^^ method not found in `Arc<Mutex<...>>`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `insert` found for struct `Arc<Mutex<...>>` in the current scope",
      "spans": [
        {
          "byte_end": 1486,
          "byte_start": 1480,
          "column_end": 25,
          "column_start": 19,
          "expansion": null,
          "file_name": "src/test_utils/mock_kv_store.rs",
          "is_primary": true,
          "label": "method not found in `Arc<Mutex<...>>`",
          "line_end": 43,
          "line_start": 43,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 19,
              "text": "        self.data.insert(key.to_string(), value.to_string());"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `get` found for struct `Arc<Mutex<...>>` in the current scope\n  --> src/test_utils/mock_kv_store.rs:55:22\n   |\n55 |         Ok(self.data.get(key).cloned())\n   |                      ^^^ method not found in `Arc<Mutex<...>>`\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\nnote: `services::core::trading::kv_operations::KvOperations` defines an item `get`, perhaps you need to implement it\n  --> src/services/core/trading/kv_operations.rs:30:1\n   |\n30 | pub trait KvOperations: Send + Sync {\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is implemented and in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "`services::core::trading::kv_operations::KvOperations` defines an item `get`, perhaps you need to implement it",
          "rendered": null,
          "spans": [
            {
              "byte_end": 981,
              "byte_start": 946,
              "column_end": 36,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/trading/kv_operations.rs",
              "is_primary": true,
              "label": null,
              "line_end": 30,
              "line_start": 30,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "pub trait KvOperations: Send + Sync {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `get` found for struct `Arc<Mutex<...>>` in the current scope",
      "spans": [
        {
          "byte_end": 2017,
          "byte_start": 2014,
          "column_end": 25,
          "column_start": 22,
          "expansion": null,
          "file_name": "src/test_utils/mock_kv_store.rs",
          "is_primary": true,
          "label": "method not found in `Arc<Mutex<...>>`",
          "line_end": 55,
          "line_start": 55,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 22,
              "text": "        Ok(self.data.get(key).cloned())"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0276]: impl has stricter requirements than trait\n  --> src/test_utils/mock_kv_store.rs:61:18\n   |\n61 |     async fn put<T: Serialize + Send>(&self...\n   |                  ^ impl has extra requirement `T: std::marker::Sized`\n   |\n  ::: src/services/core/trading/kv_operations.rs:31:5\n   |\n31 |     async fn put<T: Serialize + Send + ?Sized>(&self, key: &str, value: &T) -> KvResult<()>;\n   |     ---------------------------------------------------------------------------------------- definition of `put` from trait\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0276",
        "explanation": "A trait implementation has stricter requirements than the trait definition.\n\nErroneous code example:\n\n```compile_fail,E0276\ntrait Foo {\n    fn foo<T>(x: T);\n}\n\nimpl Foo for bool {\n    fn foo<T>(x: T) where T: Copy {}\n}\n```\n\nHere, all types implementing `Foo` must have a method `foo<T>(x: T)` which can\ntake any type `T`. However, in the `impl` for `bool`, we have added an extra\nbound that `T` is `Copy`, which isn't compatible with the original trait.\n\nConsider removing the bound from the method or adding the bound to the original\nmethod definition in the trait.\n"
      },
      "level": "error",
      "message": "impl has stricter requirements than trait",
      "spans": [
        {
          "byte_end": 1076,
          "byte_start": 988,
          "column_end": 93,
          "column_start": 5,
          "expansion": null,
          "file_name": "src/services/core/trading/kv_operations.rs",
          "is_primary": false,
          "label": "definition of `put` from trait",
          "line_end": 31,
          "line_start": 31,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 93,
              "highlight_start": 5,
              "text": "    async fn put<T: Serialize + Send + ?Sized>(&self, key: &str, value: &T) -> KvResult<()>;"
            }
          ]
        },
        {
          "byte_end": 2111,
          "byte_start": 2110,
          "column_end": 19,
          "column_start": 18,
          "expansion": null,
          "file_name": "src/test_utils/mock_kv_store.rs",
          "is_primary": true,
          "label": "impl has extra requirement `T: std::marker::Sized`",
          "line_end": 61,
          "line_start": 61,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 19,
              "highlight_start": 18,
              "text": "    async fn put<T: Serialize + Send>(&self, key: &str, value: &T) -> KvResult<()> {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope\n   --> src/services/core/auth/permissions.rs:177:23\n    |\n177 |             UserRole::Basic => {\n    |                       ^^^^^ variant or associated item not found in `UserAccessLevel`\n    |\n   ::: src/types.rs:150:1\n    |\n150 | pub enum UserAccessLevel {\n    | ------------------------ variant or associated item `Basic` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 6520,
          "byte_start": 6515,
          "column_end": 28,
          "column_start": 23,
          "expansion": null,
          "file_name": "src/services/core/auth/permissions.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `UserAccessLevel`",
          "line_end": 177,
          "line_start": 177,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 23,
              "text": "            UserRole::Basic => {"
            }
          ]
        },
        {
          "byte_end": 4273,
          "byte_start": 4249,
          "column_end": 25,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `Basic` not found for this enum",
          "line_end": 150,
          "line_start": 150,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 1,
              "text": "pub enum UserAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/auth/permissions.rs:305:34\n    |\n305 |             chrono::Utc::now() > expires_at\n    |                                  ^^^^^^^^^^ expected `DateTime<_>`, found `u64`\n    |\n    = note: expected struct `chrono::DateTime<_>`\n                 found type `u64`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected struct `chrono::DateTime<_>`\n     found type `u64`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 11196,
          "byte_start": 11186,
          "column_end": 44,
          "column_start": 34,
          "expansion": null,
          "file_name": "src/services/core/auth/permissions.rs",
          "is_primary": true,
          "label": "expected `DateTime<_>`, found `u64`",
          "line_end": 305,
          "line_start": 305,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 44,
              "highlight_start": 34,
              "text": "            chrono::Utc::now() > expires_at"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope\n   --> src/services/core/auth/rbac.rs:147:23\n    |\n147 | ...   UserRole::Basic => 10,       // Basi...\n    |                 ^^^^^ variant or associated item not found in `UserAccessLevel`\n    |\n   ::: src/types.rs:150:1\n    |\n150 | pub enum UserAccessLevel {\n    | ------------------------ variant or associated item `Basic` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 4990,
          "byte_start": 4985,
          "column_end": 28,
          "column_start": 23,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `UserAccessLevel`",
          "line_end": 147,
          "line_start": 147,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 23,
              "text": "            UserRole::Basic => 10,       // Basic limit"
            }
          ]
        },
        {
          "byte_end": 4273,
          "byte_start": 4249,
          "column_end": 25,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `Basic` not found for this enum",
          "line_end": 150,
          "line_start": 150,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 1,
              "text": "pub enum UserAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `as_str` found for enum `types::SubscriptionTier` in the current scope\n    --> src/services/core/auth/rbac.rs:152:71\n     |\n152  | ...ription_tier.as_str() {\n     |                 ^^^^^^ method not found in `SubscriptionTier`\n     |\n    ::: src/types.rs:1903:1\n     |\n1903 | pub enum SubscriptionTier {\n     | ------------------------- method `as_str` not found for this enum\n     |\n     = help: items from traits can only be used if the trait is implemented and in scope\n     = note: the following traits define an item `as_str`, perhaps you need to implement one of them:\n             candidate #1: `http::header::map::as_header_name::Sealed`\n             candidate #2: `reqwest::into_url::IntoUrlSealed`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is implemented and in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the following traits define an item `as_str`, perhaps you need to implement one of them:\ncandidate #1: `http::header::map::as_header_name::Sealed`\ncandidate #2: `reqwest::into_url::IntoUrlSealed`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `as_str` found for enum `types::SubscriptionTier` in the current scope",
      "spans": [
        {
          "byte_end": 5199,
          "byte_start": 5193,
          "column_end": 77,
          "column_start": 71,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "method not found in `SubscriptionTier`",
          "line_end": 152,
          "line_start": 152,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 77,
              "highlight_start": 71,
              "text": "        let subscription_limit = match user_profile.subscription_tier.as_str() {"
            }
          ]
        },
        {
          "byte_end": 64303,
          "byte_start": 64278,
          "column_end": 26,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `as_str` not found for this enum",
          "line_end": 1903,
          "line_start": 1903,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 1,
              "text": "pub enum SubscriptionTier {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope\n   --> src/services/core/auth/rbac.rs:271:23\n    |\n271 |             UserRole::Basic,\n    |                       ^^^^^ variant or associated item not found in `UserAccessLevel`\n    |\n   ::: src/types.rs:150:1\n    |\n150 | pub enum UserAccessLevel {\n    | ------------------------ variant or associated item `Basic` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 9494,
          "byte_start": 9489,
          "column_end": 28,
          "column_start": 23,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `UserAccessLevel`",
          "line_end": 271,
          "line_start": 271,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 23,
              "text": "            UserRole::Basic,"
            }
          ]
        },
        {
          "byte_end": 4273,
          "byte_start": 4249,
          "column_end": 25,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `Basic` not found for this enum",
          "line_end": 150,
          "line_start": 150,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 1,
              "text": "pub enum UserAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0560]: struct `types::UserProfile` has no field named `telegram_first_name`\n   --> src/services/core/auth/user_auth.rs:121:13\n    |\n121 | ...       telegram_first_name: None, // Wi...\n    |           ^^^^^^^^^^^^^^^^^^^ `types::UserProfile` does not have this field\n    |\n    = note: available fields are: `username`, `subscription_tier`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `username`, `subscription_tier`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0560",
        "explanation": "An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "struct `types::UserProfile` has no field named `telegram_first_name`",
      "spans": [
        {
          "byte_end": 4165,
          "byte_start": 4146,
          "column_end": 32,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "`types::UserProfile` does not have this field",
          "line_end": 121,
          "line_start": 121,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 13,
              "text": "            telegram_first_name: None, // Will be updated from Telegram info"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0560]: struct `types::UserProfile` has no field named `telegram_last_name`\n   --> src/services/core/auth/user_auth.rs:122:13\n    |\n122 |             telegram_last_name: None,\n    |             ^^^^^^^^^^^^^^^^^^ `types::UserProfile` does not have this field\n    |\n    = note: available fields are: `username`, `subscription_tier`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `username`, `subscription_tier`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0560",
        "explanation": "An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "struct `types::UserProfile` has no field named `telegram_last_name`",
      "spans": [
        {
          "byte_end": 4241,
          "byte_start": 4223,
          "column_end": 31,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "`types::UserProfile` does not have this field",
          "line_end": 122,
          "line_start": 122,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 31,
              "highlight_start": 13,
              "text": "            telegram_last_name: None,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/auth/user_auth.rs:136:23\n    |\n136 | ...s: std::collections::HashMap::new(),\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<UserApiKey>`, found `HashMap<_, _>`\n    |\n    = note: expected struct `std::vec::Vec<types::UserApiKey>`\n               found struct `std::collections::HashMap<_, _>`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected struct `std::vec::Vec<types::UserApiKey>`\n   found struct `std::collections::HashMap<_, _>`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 5167,
          "byte_start": 5135,
          "column_end": 55,
          "column_start": 23,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "expected `Vec<UserApiKey>`, found `HashMap<_, _>`",
          "line_end": 136,
          "line_start": 136,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 55,
              "highlight_start": 23,
              "text": "            api_keys: std::collections::HashMap::new(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `Beta` found for enum `types::SubscriptionTier` in the current scope\n    --> src/services/core/auth/user_auth.rs:178:72\n     |\n178  | ...riptionTier::Beta);\n     |                 ^^^^ variant or associated item not found in `SubscriptionTier`\n     |\n    ::: src/types.rs:1903:1\n     |\n1903 | pub enum SubscriptionTier {\n     | ------------------------- variant or associated item `Beta` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `Beta` found for enum `types::SubscriptionTier` in the current scope",
      "spans": [
        {
          "byte_end": 6991,
          "byte_start": 6987,
          "column_end": 76,
          "column_start": 72,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `SubscriptionTier`",
          "line_end": 178,
          "line_start": 178,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 76,
              "highlight_start": 72,
              "text": "            profile.subscription = Subscription::new(SubscriptionTier::Beta);"
            }
          ]
        },
        {
          "byte_end": 64303,
          "byte_start": 64278,
          "column_end": 26,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `Beta` not found for this enum",
          "line_end": 1903,
          "line_start": 1903,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 1,
              "text": "pub enum SubscriptionTier {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope\n   --> src/services/core/auth/permissions.rs:177:23\n    |\n177 |             UserRole::Basic => {\n    |                       ^^^^^ variant or associated item not found in `UserAccessLevel`\n    |\n   ::: src/types.rs:150:1\n    |\n150 | pub enum UserAccessLevel {\n    | ------------------------ variant or associated item `Basic` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 6520,
          "byte_start": 6515,
          "column_end": 28,
          "column_start": 23,
          "expansion": null,
          "file_name": "src/services/core/auth/permissions.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `UserAccessLevel`",
          "line_end": 177,
          "line_start": 177,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 23,
              "text": "            UserRole::Basic => {"
            }
          ]
        },
        {
          "byte_end": 4273,
          "byte_start": 4249,
          "column_end": 25,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `Basic` not found for this enum",
          "line_end": 150,
          "line_start": 150,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 1,
              "text": "pub enum UserAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/auth/permissions.rs:305:34\n    |\n305 |             chrono::Utc::now() > expires_at\n    |                                  ^^^^^^^^^^ expected `DateTime<_>`, found `u64`\n    |\n    = note: expected struct `chrono::DateTime<_>`\n                 found type `u64`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected struct `chrono::DateTime<_>`\n     found type `u64`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 11196,
          "byte_start": 11186,
          "column_end": 44,
          "column_start": 34,
          "expansion": null,
          "file_name": "src/services/core/auth/permissions.rs",
          "is_primary": true,
          "label": "expected `DateTime<_>`, found `u64`",
          "line_end": 305,
          "line_start": 305,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 44,
              "highlight_start": 34,
              "text": "            chrono::Utc::now() > expires_at"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope\n   --> src/services/core/auth/rbac.rs:147:23\n    |\n147 | ...   UserRole::Basic => 10,       // Basi...\n    |                 ^^^^^ variant or associated item not found in `UserAccessLevel`\n    |\n   ::: src/types.rs:150:1\n    |\n150 | pub enum UserAccessLevel {\n    | ------------------------ variant or associated item `Basic` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 4990,
          "byte_start": 4985,
          "column_end": 28,
          "column_start": 23,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `UserAccessLevel`",
          "line_end": 147,
          "line_start": 147,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 23,
              "text": "            UserRole::Basic => 10,       // Basic limit"
            }
          ]
        },
        {
          "byte_end": 4273,
          "byte_start": 4249,
          "column_end": 25,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `Basic` not found for this enum",
          "line_end": 150,
          "line_start": 150,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 1,
              "text": "pub enum UserAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `as_str` found for enum `types::SubscriptionTier` in the current scope\n    --> src/services/core/auth/rbac.rs:152:71\n     |\n152  | ...ription_tier.as_str() {\n     |                 ^^^^^^ method not found in `SubscriptionTier`\n     |\n    ::: src/types.rs:1903:1\n     |\n1903 | pub enum SubscriptionTier {\n     | ------------------------- method `as_str` not found for this enum\n     |\n     = help: items from traits can only be used if the trait is implemented and in scope\n     = note: the following traits define an item `as_str`, perhaps you need to implement one of them:\n             candidate #1: `http::header::map::as_header_name::Sealed`\n             candidate #2: `reqwest::into_url::IntoUrlSealed`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is implemented and in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the following traits define an item `as_str`, perhaps you need to implement one of them:\ncandidate #1: `http::header::map::as_header_name::Sealed`\ncandidate #2: `reqwest::into_url::IntoUrlSealed`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `as_str` found for enum `types::SubscriptionTier` in the current scope",
      "spans": [
        {
          "byte_end": 5199,
          "byte_start": 5193,
          "column_end": 77,
          "column_start": 71,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "method not found in `SubscriptionTier`",
          "line_end": 152,
          "line_start": 152,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 77,
              "highlight_start": 71,
              "text": "        let subscription_limit = match user_profile.subscription_tier.as_str() {"
            }
          ]
        },
        {
          "byte_end": 64303,
          "byte_start": 64278,
          "column_end": 26,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `as_str` not found for this enum",
          "line_end": 1903,
          "line_start": 1903,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 1,
              "text": "pub enum SubscriptionTier {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope\n   --> src/services/core/auth/rbac.rs:271:23\n    |\n271 |             UserRole::Basic,\n    |                       ^^^^^ variant or associated item not found in `UserAccessLevel`\n    |\n   ::: src/types.rs:150:1\n    |\n150 | pub enum UserAccessLevel {\n    | ------------------------ variant or associated item `Basic` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `Basic` found for enum `types::UserAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 9494,
          "byte_start": 9489,
          "column_end": 28,
          "column_start": 23,
          "expansion": null,
          "file_name": "src/services/core/auth/rbac.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `UserAccessLevel`",
          "line_end": 271,
          "line_start": 271,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 23,
              "text": "            UserRole::Basic,"
            }
          ]
        },
        {
          "byte_end": 4273,
          "byte_start": 4249,
          "column_end": 25,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `Basic` not found for this enum",
          "line_end": 150,
          "line_start": 150,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 1,
              "text": "pub enum UserAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: the trait bound `Mutex<Option<...>>: Clone` is not satisfied\n   --> src/services/core/auth/session.rs:353:9\n    |\n351 | ...[derive(Clone)]\n    |            ----- in this derive macro expansion\n352 | ...truct MockSessionManagementService {\n353 | ...   expected_session: Mutex<Option<Option<EnhancedUserSession>>>,\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound\n    |\n    = help: the trait `std::clone::Clone` is not implemented for `Mutex<Option<...>>`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-5599458187038435126.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "the trait `std::clone::Clone` is not implemented for `Mutex<Option<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-5599458187038435126.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "the trait bound `Mutex<Option<...>>: Clone` is not satisfied",
      "spans": [
        {
          "byte_end": 12823,
          "byte_start": 12763,
          "column_end": 69,
          "column_start": 9,
          "expansion": {
            "def_site_span": {
              "byte_end": 5973,
              "byte_start": 5958,
              "column_end": 16,
              "column_start": 1,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/clone.rs",
              "is_primary": false,
              "label": null,
              "line_end": 183,
              "line_start": 183,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "pub macro Clone($item:item) {"
                }
              ]
            },
            "macro_decl_name": "#[derive(Clone)]",
            "span": {
              "byte_end": 12710,
              "byte_start": 12705,
              "column_end": 19,
              "column_start": 14,
              "expansion": null,
              "file_name": "src/services/core/auth/session.rs",
              "is_primary": false,
              "label": null,
              "line_end": 351,
              "line_start": 351,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 14,
                  "text": "    #[derive(Clone)]"
                }
              ]
            }
          },
          "file_name": "src/services/core/auth/session.rs",
          "is_primary": true,
          "label": "unsatisfied trait bound",
          "line_end": 353,
          "line_start": 353,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 69,
              "highlight_start": 9,
              "text": "        expected_session: Mutex<Option<Option<EnhancedUserSession>>>,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: the trait bound `Mutex<...>: Clone` is not satisfied\n   --> src/services/core/auth/session.rs:355:9\n    |\n351 | ...[derive(Clone)]\n    |            ----- in this derive macro expansion\n...\n355 | ...   active_sessions_mock: Mutex<HashMap<String, EnhancedUserSession>>,\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound\n    |\n    = help: the trait `std::clone::Clone` is not implemented for `Mutex<HashMap<..., ...>>`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-6802054733725926610.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "the trait `std::clone::Clone` is not implemented for `Mutex<HashMap<..., ...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-6802054733725926610.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "the trait bound `Mutex<...>: Clone` is not satisfied",
      "spans": [
        {
          "byte_end": 12992,
          "byte_start": 12927,
          "column_end": 74,
          "column_start": 9,
          "expansion": {
            "def_site_span": {
              "byte_end": 5973,
              "byte_start": 5958,
              "column_end": 16,
              "column_start": 1,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/clone.rs",
              "is_primary": false,
              "label": null,
              "line_end": 183,
              "line_start": 183,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "pub macro Clone($item:item) {"
                }
              ]
            },
            "macro_decl_name": "#[derive(Clone)]",
            "span": {
              "byte_end": 12710,
              "byte_start": 12705,
              "column_end": 19,
              "column_start": 14,
              "expansion": null,
              "file_name": "src/services/core/auth/session.rs",
              "is_primary": false,
              "label": null,
              "line_end": 351,
              "line_start": 351,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 14,
                  "text": "    #[derive(Clone)]"
                }
              ]
            }
          },
          "file_name": "src/services/core/auth/session.rs",
          "is_primary": true,
          "label": "unsatisfied trait bound",
          "line_end": 355,
          "line_start": 355,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 74,
              "highlight_start": 9,
              "text": "        active_sessions_mock: Mutex<HashMap<String, EnhancedUserSession>>,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `default` found for struct `types::SessionAnalytics` in the current scope\n    --> src/services/core/auth/session.rs:514:50\n     |\n514  | ...onAnalytics::default(),\n     |                 ^^^^^^^ function or associated item not found in `SessionAnalytics`\n     |\n    ::: src/types.rs:1161:1\n     |\n1161 | pub struct SessionAnalytics {\n     | --------------------------- function or associated item `default` not found for this struct\n     |\n     = help: items from traits can only be used if the trait is implemented and in scope\n     = note: the following traits define an item `default`, perhaps you need to implement one of them:\n             candidate #1: `std::default::Default`\n             candidate #2: `worker::worker_sys::ext::CacheStorageExt`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is implemented and in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the following traits define an item `default`, perhaps you need to implement one of them:\ncandidate #1: `std::default::Default`\ncandidate #2: `worker::worker_sys::ext::CacheStorageExt`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `default` found for struct `types::SessionAnalytics` in the current scope",
      "spans": [
        {
          "byte_end": 20792,
          "byte_start": 20785,
          "column_end": 57,
          "column_start": 50,
          "expansion": null,
          "file_name": "src/services/core/auth/session.rs",
          "is_primary": true,
          "label": "function or associated item not found in `SessionAnalytics`",
          "line_end": 514,
          "line_start": 514,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 57,
              "highlight_start": 50,
              "text": "            session_analytics: SessionAnalytics::default(),"
            }
          ]
        },
        {
          "byte_end": 37461,
          "byte_start": 37434,
          "column_end": 28,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "function or associated item `default` not found for this struct",
          "line_end": 1161,
          "line_start": 1161,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "pub struct SessionAnalytics {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0560]: struct `types::UserProfile` has no field named `telegram_first_name`\n   --> src/services/core/auth/user_auth.rs:121:13\n    |\n121 | ...       telegram_first_name: None, // Wi...\n    |           ^^^^^^^^^^^^^^^^^^^ `types::UserProfile` does not have this field\n    |\n    = note: available fields are: `username`, `subscription_tier`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `username`, `subscription_tier`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0560",
        "explanation": "An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "struct `types::UserProfile` has no field named `telegram_first_name`",
      "spans": [
        {
          "byte_end": 4165,
          "byte_start": 4146,
          "column_end": 32,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "`types::UserProfile` does not have this field",
          "line_end": 121,
          "line_start": 121,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 13,
              "text": "            telegram_first_name: None, // Will be updated from Telegram info"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0560]: struct `types::UserProfile` has no field named `telegram_last_name`\n   --> src/services/core/auth/user_auth.rs:122:13\n    |\n122 |             telegram_last_name: None,\n    |             ^^^^^^^^^^^^^^^^^^ `types::UserProfile` does not have this field\n    |\n    = note: available fields are: `username`, `subscription_tier`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `username`, `subscription_tier`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0560",
        "explanation": "An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "struct `types::UserProfile` has no field named `telegram_last_name`",
      "spans": [
        {
          "byte_end": 4241,
          "byte_start": 4223,
          "column_end": 31,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "`types::UserProfile` does not have this field",
          "line_end": 122,
          "line_start": 122,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 31,
              "highlight_start": 13,
              "text": "            telegram_last_name: None,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/auth/user_auth.rs:136:23\n    |\n136 | ...s: std::collections::HashMap::new(),\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Vec<UserApiKey>`, found `HashMap<_, _>`\n    |\n    = note: expected struct `std::vec::Vec<types::UserApiKey>`\n               found struct `std::collections::HashMap<_, _>`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "expected struct `std::vec::Vec<types::UserApiKey>`\n   found struct `std::collections::HashMap<_, _>`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 5167,
          "byte_start": 5135,
          "column_end": 55,
          "column_start": 23,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "expected `Vec<UserApiKey>`, found `HashMap<_, _>`",
          "line_end": 136,
          "line_start": 136,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 55,
              "highlight_start": 23,
              "text": "            api_keys: std::collections::HashMap::new(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `Beta` found for enum `types::SubscriptionTier` in the current scope\n    --> src/services/core/auth/user_auth.rs:178:72\n     |\n178  | ...riptionTier::Beta);\n     |                 ^^^^ variant or associated item not found in `SubscriptionTier`\n     |\n    ::: src/types.rs:1903:1\n     |\n1903 | pub enum SubscriptionTier {\n     | ------------------------- variant or associated item `Beta` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `Beta` found for enum `types::SubscriptionTier` in the current scope",
      "spans": [
        {
          "byte_end": 6991,
          "byte_start": 6987,
          "column_end": 76,
          "column_start": 72,
          "expansion": null,
          "file_name": "src/services/core/auth/user_auth.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `SubscriptionTier`",
          "line_end": 178,
          "line_start": 178,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 76,
              "highlight_start": 72,
              "text": "            profile.subscription = Subscription::new(SubscriptionTier::Beta);"
            }
          ]
        },
        {
          "byte_end": 64303,
          "byte_start": 64278,
          "column_end": 26,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `Beta` not found for this enum",
          "line_end": 1903,
          "line_start": 1903,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 1,
              "text": "pub enum SubscriptionTier {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0063]: missing field `is_beta_active` in initializer of `types::UserProfile`\n   --> src/services/core/infrastructure/database_repositories/user_repository.rs:897:27\n    |\n897 |         let mut profile = UserProfile {\n    |                           ^^^^^^^^^^^ missing `is_beta_active`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0063",
        "explanation": "A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "missing field `is_beta_active` in initializer of `types::UserProfile`",
      "spans": [
        {
          "byte_end": 30266,
          "byte_start": 30255,
          "column_end": 38,
          "column_start": 27,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/database_repositories/user_repository.rs",
          "is_primary": true,
          "label": "missing `is_beta_active`",
          "line_end": 897,
          "line_start": 897,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 38,
              "highlight_start": 27,
              "text": "        let mut profile = UserProfile {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `high_performance` found for struct `ChannelManagerConfig` in the current scope\n   --> src/services/core/infrastructure/notification_module/notification_coordinator.rs:234:59\n    |\n234 | ...rConfig::high_performance(),\n    |             ^^^^^^^^^^^^^^^^ function or associated item not found in `ChannelManagerConfig`\n    |\n   ::: src/services/core/infrastructure/notification_module/channel_manager.rs:129:1\n    |\n129 | pub struct ChannelManagerConfig {\n    | ------------------------------- function or associated item `high_performance` not found for this struct\n    |\nnote: if you're trying to build a new `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig`, consider using `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig::high_reliability` which returns `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig`\n   --> src/services/core/infrastructure/notification_module/channel_manager.rs:184:5\n    |\n184 |     pub fn high_reliability() -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "if you're trying to build a new `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig`, consider using `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig::high_reliability` which returns `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 5285,
              "byte_start": 5252,
              "column_end": 38,
              "column_start": 5,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/notification_module/channel_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 184,
              "line_start": 184,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 38,
                  "highlight_start": 5,
                  "text": "    pub fn high_reliability() -> Self {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `high_performance` found for struct `ChannelManagerConfig` in the current scope",
      "spans": [
        {
          "byte_end": 7511,
          "byte_start": 7495,
          "column_end": 75,
          "column_start": 59,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/notification_module/notification_coordinator.rs",
          "is_primary": true,
          "label": "function or associated item not found in `ChannelManagerConfig`",
          "line_end": 234,
          "line_start": 234,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 75,
              "highlight_start": 59,
              "text": "            channel_manager_config: ChannelManagerConfig::high_performance(),"
            }
          ]
        },
        {
          "byte_end": 3485,
          "byte_start": 3454,
          "column_end": 32,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/notification_module/channel_manager.rs",
          "is_primary": false,
          "label": "function or associated item `high_performance` not found for this struct",
          "line_end": 129,
          "line_start": 129,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 1,
              "text": "pub struct ChannelManagerConfig {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `high_performance` found for struct `ChannelManagerConfig` in the current scope\n   --> src/services/core/infrastructure/notification_module/notification_coordinator.rs:234:59\n    |\n234 | ...rConfig::high_performance(),\n    |             ^^^^^^^^^^^^^^^^ function or associated item not found in `ChannelManagerConfig`\n    |\n   ::: src/services/core/infrastructure/notification_module/channel_manager.rs:129:1\n    |\n129 | pub struct ChannelManagerConfig {\n    | ------------------------------- function or associated item `high_performance` not found for this struct\n    |\nnote: if you're trying to build a new `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig`, consider using `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig::high_reliability` which returns `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig`\n   --> src/services/core/infrastructure/notification_module/channel_manager.rs:184:5\n    |\n184 |     pub fn high_reliability() -> Self {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "if you're trying to build a new `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig`, consider using `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig::high_reliability` which returns `services::core::infrastructure::notification_module::channel_manager::ChannelManagerConfig`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 5285,
              "byte_start": 5252,
              "column_end": 38,
              "column_start": 5,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/notification_module/channel_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 184,
              "line_start": 184,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 38,
                  "highlight_start": 5,
                  "text": "    pub fn high_reliability() -> Self {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `high_performance` found for struct `ChannelManagerConfig` in the current scope",
      "spans": [
        {
          "byte_end": 7511,
          "byte_start": 7495,
          "column_end": 75,
          "column_start": 59,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/notification_module/notification_coordinator.rs",
          "is_primary": true,
          "label": "function or associated item not found in `ChannelManagerConfig`",
          "line_end": 234,
          "line_start": 234,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 75,
              "highlight_start": 59,
              "text": "            channel_manager_config: ChannelManagerConfig::high_performance(),"
            }
          ]
        },
        {
          "byte_end": 3485,
          "byte_start": 3454,
          "column_end": 32,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/notification_module/channel_manager.rs",
          "is_primary": false,
          "label": "function or associated item `high_performance` not found for this struct",
          "line_end": 129,
          "line_start": 129,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 1,
              "text": "pub struct ChannelManagerConfig {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error: future cannot be sent between threads safely\n  --> src/services/core/infrastructure/kv.rs:69:70\n   |\n69 |       ) -> crate::services::core::trading::kv_operations::KvResult<()> {\n   |  ______________________________________________________________________^\n70 | |         let full_key = format!(\"{}:{}\", self.namespace, key);\n71 | |         let serialized_value = serde_json::to_string(value).map_err(|e| {\n72 | |             crate::services::core::trading::kv_operations::KvOperationErr...\n...  |\n77 | |         Ok(())\n78 | |     }\n   | |_____^ future created by async block is not `Send`\n   |\nnote: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n  --> src/services/core/infrastructure/kv.rs:71:54\n   |\n71 | ...n::to_string(value).map_err(|e| {\n   |                 ^^^^^ has type `&T` which is not `Send`, because `T` is not `Sync`\n   = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n   = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-13771708464791567755.txt'\n   = note: consider using `--verbose` to print the full type name to the console\nhelp: consider further restricting type parameter `T` with trait `Sync`\n   |\n65 |     async fn put<T: Serialize + Send + ?Sized + std::marker::Sync>(\n   |                                               +++++++++++++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2298,
              "byte_start": 2293,
              "column_end": 59,
              "column_start": 54,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/kv.rs",
              "is_primary": true,
              "label": "has type `&T` which is not `Send`, because `T` is not `Sync`",
              "line_end": 71,
              "line_start": 71,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 59,
                  "highlight_start": 54,
                  "text": "        let serialized_value = serde_json::to_string(value).map_err(|e| {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-13771708464791567755.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider further restricting type parameter `T` with trait `Sync`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2051,
              "byte_start": 2051,
              "column_end": 46,
              "column_start": 46,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/kv.rs",
              "is_primary": true,
              "label": null,
              "line_end": 65,
              "line_start": 65,
              "suggested_replacement": " + std::marker::Sync",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 46,
                  "highlight_start": 46,
                  "text": "    async fn put<T: Serialize + Send + ?Sized>("
                }
              ]
            }
          ]
        }
      ],
      "code": null,
      "level": "error",
      "message": "future cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 2598,
          "byte_start": 2176,
          "column_end": 6,
          "column_start": 70,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/kv.rs",
          "is_primary": true,
          "label": "future created by async block is not `Send`",
          "line_end": 78,
          "line_start": 69,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 71,
              "highlight_start": 70,
              "text": "    ) -> crate::services::core::trading::kv_operations::KvResult<()> {"
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "        let full_key = format!(\"{}:{}\", self.namespace, key);"
            },
            {
              "highlight_end": 74,
              "highlight_start": 1,
              "text": "        let serialized_value = serde_json::to_string(value).map_err(|e| {"
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "            crate::services::core::trading::kv_operations::KvOperationError::Serialization(e)"
            },
            {
              "highlight_end": 13,
              "highlight_start": 1,
              "text": "        })?;"
            },
            {
              "highlight_end": 1,
              "highlight_start": 1,
              "text": ""
            },
            {
              "highlight_end": 79,
              "highlight_start": 1,
              "text": "        // Note: This is a simplified implementation for the current KVService"
            },
            {
              "highlight_end": 77,
              "highlight_start": 1,
              "text": "        // In a real implementation, this would write to the actual KV store"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `store` on type `&KVService`\n  --> src/services/core/infrastructure/kv.rs:85:20\n   |\n85 | ...   match self.store.get(&full_key).json(...\n   |                  ^^^^^ unknown field\n   |\n   = note: available fields are: `namespace`, `cache`, `default_ttl`\n   = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-10408394270045043336.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `namespace`, `cache`, `default_ttl`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-10408394270045043336.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `store` on type `&KVService`",
      "spans": [
        {
          "byte_end": 2844,
          "byte_start": 2839,
          "column_end": 25,
          "column_start": 20,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/kv.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 85,
          "line_start": 85,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 20,
              "text": "        match self.store.get(&full_key).json().await {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error: future cannot be sent between threads safely\n  --> src/services/core/infrastructure/kv.rs:69:70\n   |\n69 |       ) -> crate::services::core::trading::kv_operations::KvResult<()> {\n   |  ______________________________________________________________________^\n70 | |         let full_key = format!(\"{}:{}\", self.namespace, key);\n71 | |         let serialized_value = serde_json::to_string(value).map_err(|e| {\n72 | |             crate::services::core::trading::kv_operations::KvOperationErr...\n...  |\n77 | |         Ok(())\n78 | |     }\n   | |_____^ future created by async block is not `Send`\n   |\nnote: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n  --> src/services/core/infrastructure/kv.rs:71:54\n   |\n71 | ...n::to_string(value).map_err(|e| {\n   |                 ^^^^^ has type `&T` which is not `Send`, because `T` is not `Sync`\n   = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n   = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-10567317937152509768.txt'\n   = note: consider using `--verbose` to print the full type name to the console\nhelp: consider further restricting type parameter `T` with trait `Sync`\n   |\n65 |     async fn put<T: Serialize + Send + ?Sized + std::marker::Sync>(\n   |                                               +++++++++++++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2298,
              "byte_start": 2293,
              "column_end": 59,
              "column_start": 54,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/kv.rs",
              "is_primary": true,
              "label": "has type `&T` which is not `Send`, because `T` is not `Sync`",
              "line_end": 71,
              "line_start": 71,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 59,
                  "highlight_start": 54,
                  "text": "        let serialized_value = serde_json::to_string(value).map_err(|e| {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-10567317937152509768.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider further restricting type parameter `T` with trait `Sync`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2051,
              "byte_start": 2051,
              "column_end": 46,
              "column_start": 46,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/kv.rs",
              "is_primary": true,
              "label": null,
              "line_end": 65,
              "line_start": 65,
              "suggested_replacement": " + std::marker::Sync",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 46,
                  "highlight_start": 46,
                  "text": "    async fn put<T: Serialize + Send + ?Sized>("
                }
              ]
            }
          ]
        }
      ],
      "code": null,
      "level": "error",
      "message": "future cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 2598,
          "byte_start": 2176,
          "column_end": 6,
          "column_start": 70,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/kv.rs",
          "is_primary": true,
          "label": "future created by async block is not `Send`",
          "line_end": 78,
          "line_start": 69,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 71,
              "highlight_start": 70,
              "text": "    ) -> crate::services::core::trading::kv_operations::KvResult<()> {"
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "        let full_key = format!(\"{}:{}\", self.namespace, key);"
            },
            {
              "highlight_end": 74,
              "highlight_start": 1,
              "text": "        let serialized_value = serde_json::to_string(value).map_err(|e| {"
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "            crate::services::core::trading::kv_operations::KvOperationError::Serialization(e)"
            },
            {
              "highlight_end": 13,
              "highlight_start": 1,
              "text": "        })?;"
            },
            {
              "highlight_end": 1,
              "highlight_start": 1,
              "text": ""
            },
            {
              "highlight_end": 79,
              "highlight_start": 1,
              "text": "        // Note: This is a simplified implementation for the current KVService"
            },
            {
              "highlight_end": 77,
              "highlight_start": 1,
              "text": "        // In a real implementation, this would write to the actual KV store"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `store` on type `&KVService`\n  --> src/services/core/infrastructure/kv.rs:85:20\n   |\n85 | ...   match self.store.get(&full_key).json(...\n   |                  ^^^^^ unknown field\n   |\n   = note: available fields are: `namespace`, `cache`, `default_ttl`\n   = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-1327983525015685320.txt'\n   = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `namespace`, `cache`, `default_ttl`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-1327983525015685320.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `store` on type `&KVService`",
      "spans": [
        {
          "byte_end": 2844,
          "byte_start": 2839,
          "column_end": 25,
          "column_start": 20,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/kv.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 85,
          "line_start": 85,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 20,
              "text": "        match self.store.get(&full_key).json().await {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0600]: cannot apply unary operator `!` to type `()`\n   --> src/services/core/infrastructure/kv.rs:439:9\n    |\n439 |         assert!(deleted);\n    |         ^^^^^^^^^^^^^^^^ cannot apply unary operator `!`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0600",
        "explanation": "An unary operator was used on a type which doesn't implement it.\n\nErroneous code example:\n\n```compile_fail,E0600\nenum Question {\n    Yes,\n    No,\n}\n\n!Question::Yes; // error: cannot apply unary operator `!` to type `Question`\n```\n\nIn this case, `Question` would need to implement the `std::ops::Not` trait in\norder to be able to use `!` on it. Let's implement it:\n\n```\nuse std::ops::Not;\n\nenum Question {\n    Yes,\n    No,\n}\n\n// We implement the `Not` trait on the enum.\nimpl Not for Question {\n    type Output = bool;\n\n    fn not(self) -> bool {\n        match self {\n            Question::Yes => false, // If the `Answer` is `Yes`, then it\n                                    // returns false.\n            Question::No => true, // And here we do the opposite.\n        }\n    }\n}\n\nassert_eq!(!Question::Yes, false);\nassert_eq!(!Question::No, true);\n```\n"
      },
      "level": "error",
      "message": "cannot apply unary operator `!` to type `()`",
      "spans": [
        {
          "byte_end": 12974,
          "byte_start": 12958,
          "column_end": 25,
          "column_start": 9,
          "expansion": {
            "def_site_span": {
              "byte_end": 56427,
              "byte_start": 56408,
              "column_end": 24,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs",
              "is_primary": false,
              "label": null,
              "line_end": 1588,
              "line_start": 1588,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 5,
                  "text": "    macro_rules! assert {"
                }
              ]
            },
            "macro_decl_name": "assert!",
            "span": {
              "byte_end": 12974,
              "byte_start": 12958,
              "column_end": 25,
              "column_start": 9,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/kv.rs",
              "is_primary": false,
              "label": null,
              "line_end": 439,
              "line_start": 439,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 25,
                  "highlight_start": 9,
                  "text": "        assert!(deleted);"
                }
              ]
            }
          },
          "file_name": "src/services/core/infrastructure/kv.rs",
          "is_primary": true,
          "label": "cannot apply unary operator `!`",
          "line_end": 439,
          "line_start": 439,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 9,
              "text": "        assert!(deleted);"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `validate` found for struct `AnalyticsModuleConfig` in the current scope\n   --> src/services/core/infrastructure/analytics_module/mod.rs:180:24\n    |\n45  | pub struct AnalyticsModuleConfig {\n    | -------------------------------- method `validate` not found for this struct\n...\n180 |         assert!(config.validate().is_ok());\n    |                        ^^^^^^^^ method not found in `AnalyticsModuleConfig`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\nnote: `services::core::infrastructure::database_repositories::RepositoryConfig` defines an item `validate`, perhaps you need to implement it\n   --> src/services/core/infrastructure/database_repositories/mod.rs:85:1\n    |\n85  | pub trait RepositoryConfig {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: some of the expressions' fields have a method of the same name\n    |\n180 |         assert!(config.analytics_coordinator_config.validate().is_ok());\n    |                        +++++++++++++++++++++++++++++\n180 |         assert!(config.data_processor_config.validate().is_ok());\n    |                        ++++++++++++++++++++++\n180 |         assert!(config.metrics_aggregator_config.validate().is_ok());\n    |                        ++++++++++++++++++++++++++\n180 |         assert!(config.report_generator_config.validate().is_ok());\n    |                        ++++++++++++++++++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is implemented and in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "`services::core::infrastructure::database_repositories::RepositoryConfig` defines an item `validate`, perhaps you need to implement it",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2674,
              "byte_start": 2648,
              "column_end": 27,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 85,
              "line_start": 85,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "pub trait RepositoryConfig {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "some of the expressions' fields have a method of the same name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 6906,
              "byte_start": 6906,
              "column_end": 24,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 180,
              "line_start": 180,
              "suggested_replacement": "analytics_coordinator_config.",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 24,
                  "text": "        assert!(config.validate().is_ok());"
                }
              ]
            },
            {
              "byte_end": 6906,
              "byte_start": 6906,
              "column_end": 24,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 180,
              "line_start": 180,
              "suggested_replacement": "data_processor_config.",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 24,
                  "text": "        assert!(config.validate().is_ok());"
                }
              ]
            },
            {
              "byte_end": 6906,
              "byte_start": 6906,
              "column_end": 24,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 180,
              "line_start": 180,
              "suggested_replacement": "metrics_aggregator_config.",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 24,
                  "text": "        assert!(config.validate().is_ok());"
                }
              ]
            },
            {
              "byte_end": 6906,
              "byte_start": 6906,
              "column_end": 24,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 180,
              "line_start": 180,
              "suggested_replacement": "report_generator_config.",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 24,
                  "text": "        assert!(config.validate().is_ok());"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `validate` found for struct `AnalyticsModuleConfig` in the current scope",
      "spans": [
        {
          "byte_end": 6914,
          "byte_start": 6906,
          "column_end": 32,
          "column_start": 24,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
          "is_primary": true,
          "label": "method not found in `AnalyticsModuleConfig`",
          "line_end": 180,
          "line_start": 180,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 24,
              "text": "        assert!(config.validate().is_ok());"
            }
          ]
        },
        {
          "byte_end": 1971,
          "byte_start": 1939,
          "column_end": 33,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
          "is_primary": false,
          "label": "method `validate` not found for this struct",
          "line_end": 45,
          "line_start": 45,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 33,
              "highlight_start": 1,
              "text": "pub struct AnalyticsModuleConfig {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `validate` found for struct `AnalyticsModuleConfig` in the current scope\n   --> src/services/core/infrastructure/analytics_module/mod.rs:183:24\n    |\n45  | pub struct AnalyticsModuleConfig {\n    | -------------------------------- method `validate` not found for this struct\n...\n183 |         assert!(config.validate().is_err());\n    |                        ^^^^^^^^ method not found in `AnalyticsModuleConfig`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\nnote: `services::core::infrastructure::database_repositories::RepositoryConfig` defines an item `validate`, perhaps you need to implement it\n   --> src/services/core/infrastructure/database_repositories/mod.rs:85:1\n    |\n85  | pub trait RepositoryConfig {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: some of the expressions' fields have a method of the same name\n    |\n183 |         assert!(config.analytics_coordinator_config.validate().is_err());\n    |                        +++++++++++++++++++++++++++++\n183 |         assert!(config.data_processor_config.validate().is_err());\n    |                        ++++++++++++++++++++++\n183 |         assert!(config.metrics_aggregator_config.validate().is_err());\n    |                        ++++++++++++++++++++++++++\n183 |         assert!(config.report_generator_config.validate().is_err());\n    |                        ++++++++++++++++++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is implemented and in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "`services::core::infrastructure::database_repositories::RepositoryConfig` defines an item `validate`, perhaps you need to implement it",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2674,
              "byte_start": 2648,
              "column_end": 27,
              "column_start": 1,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 85,
              "line_start": 85,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "pub trait RepositoryConfig {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "some of the expressions' fields have a method of the same name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 6994,
              "byte_start": 6994,
              "column_end": 24,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 183,
              "line_start": 183,
              "suggested_replacement": "analytics_coordinator_config.",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 24,
                  "text": "        assert!(config.validate().is_err());"
                }
              ]
            },
            {
              "byte_end": 6994,
              "byte_start": 6994,
              "column_end": 24,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 183,
              "line_start": 183,
              "suggested_replacement": "data_processor_config.",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 24,
                  "text": "        assert!(config.validate().is_err());"
                }
              ]
            },
            {
              "byte_end": 6994,
              "byte_start": 6994,
              "column_end": 24,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 183,
              "line_start": 183,
              "suggested_replacement": "metrics_aggregator_config.",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 24,
                  "text": "        assert!(config.validate().is_err());"
                }
              ]
            },
            {
              "byte_end": 6994,
              "byte_start": 6994,
              "column_end": 24,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 183,
              "line_start": 183,
              "suggested_replacement": "report_generator_config.",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 24,
                  "text": "        assert!(config.validate().is_err());"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `validate` found for struct `AnalyticsModuleConfig` in the current scope",
      "spans": [
        {
          "byte_end": 7002,
          "byte_start": 6994,
          "column_end": 32,
          "column_start": 24,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
          "is_primary": true,
          "label": "method not found in `AnalyticsModuleConfig`",
          "line_end": 183,
          "line_start": 183,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 24,
              "text": "        assert!(config.validate().is_err());"
            }
          ]
        },
        {
          "byte_end": 1971,
          "byte_start": 1939,
          "column_end": 33,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/analytics_module/mod.rs",
          "is_primary": false,
          "label": "method `validate` not found for this struct",
          "line_end": 45,
          "line_start": 45,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 33,
              "highlight_start": 1,
              "text": "pub struct AnalyticsModuleConfig {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0063]: missing field `daily_opportunity_limit` in initializer of `types::Subscription`\n   --> src/services/core/opportunities/access_manager.rs:490:27\n    |\n490 | ...ion: crate::types::Subscription {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `daily_opportunity_limit`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0063",
        "explanation": "A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "missing field `daily_opportunity_limit` in initializer of `types::Subscription`",
      "spans": [
        {
          "byte_end": 18169,
          "byte_start": 18143,
          "column_end": 53,
          "column_start": 27,
          "expansion": null,
          "file_name": "src/services/core/opportunities/access_manager.rs",
          "is_primary": true,
          "label": "missing `daily_opportunity_limit`",
          "line_end": 490,
          "line_start": 490,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 53,
              "highlight_start": 27,
              "text": "            subscription: crate::types::Subscription {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0063]: missing field `is_beta_active` in initializer of `types::UserProfile`\n   --> src/services/core/opportunities/access_manager.rs:478:9\n    |\n478 |         UserProfile {\n    |         ^^^^^^^^^^^ missing `is_beta_active`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0063",
        "explanation": "A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "missing field `is_beta_active` in initializer of `types::UserProfile`",
      "spans": [
        {
          "byte_end": 17556,
          "byte_start": 17545,
          "column_end": 20,
          "column_start": 9,
          "expansion": null,
          "file_name": "src/services/core/opportunities/access_manager.rs",
          "is_primary": true,
          "label": "missing `is_beta_active`",
          "line_end": 478,
          "line_start": 478,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 20,
              "highlight_start": 9,
              "text": "        UserProfile {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0063]: missing field `is_beta_active` in initializer of `types::UserProfile`\n   --> src/services/core/opportunities/opportunity_engine.rs:615:9\n    |\n615 |         UserProfile {\n    |         ^^^^^^^^^^^ missing `is_beta_active`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0063",
        "explanation": "A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "missing field `is_beta_active` in initializer of `types::UserProfile`",
      "spans": [
        {
          "byte_end": 22057,
          "byte_start": 22046,
          "column_end": 20,
          "column_start": 9,
          "expansion": null,
          "file_name": "src/services/core/opportunities/opportunity_engine.rs",
          "is_primary": true,
          "label": "missing `is_beta_active`",
          "line_end": 615,
          "line_start": 615,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 20,
              "highlight_start": 9,
              "text": "        UserProfile {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/services/core/user/ai_access.rs:903:40\n    |\n903 | ...s!(access_level, AIAccessLevel::FreeWithoutAI { .. }));\n    |       ------------  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `UserAccessLevel`, found `AIAccessLevel`\n    |       |\n    |       this expression has type `types::UserAccessLevel`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 33985,
          "byte_start": 33950,
          "column_end": 75,
          "column_start": 40,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "expected `UserAccessLevel`, found `AIAccessLevel`",
          "line_end": 903,
          "line_start": 903,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 75,
              "highlight_start": 40,
              "text": "        assert!(matches!(access_level, AIAccessLevel::FreeWithoutAI { .. }));"
            }
          ]
        },
        {
          "byte_end": 33948,
          "byte_start": 33936,
          "column_end": 38,
          "column_start": 26,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "this expression has type `types::UserAccessLevel`",
          "line_end": 903,
          "line_start": 903,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 38,
              "highlight_start": 26,
              "text": "        assert!(matches!(access_level, AIAccessLevel::FreeWithoutAI { .. }));"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `get_daily_ai_limits` found for enum `types::UserAccessLevel` in the current scope\n   --> src/services/core/user/ai_access.rs:904:33\n    |\n904 | ...ess_level.get_daily_ai_limits(), 0);\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n   ::: src/types.rs:150:1\n    |\n150 | pub enum UserAccessLevel {\n    | ------------------------ method `get_daily_ai_limits` not found for this enum\n    |\nhelp: there is a method `get_daily_opportunity_limits` with a similar name\n    |\n904 -         assert_eq!(access_level.get_daily_ai_limits(), 0);\n904 +         assert_eq!(access_level.get_daily_opportunity_limits(), 0);\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "there is a method `get_daily_opportunity_limits` with a similar name",
          "rendered": null,
          "spans": [
            {
              "byte_end": 34040,
              "byte_start": 34021,
              "column_end": 52,
              "column_start": 33,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 904,
              "line_start": 904,
              "suggested_replacement": "get_daily_opportunity_limits",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 52,
                  "highlight_start": 33,
                  "text": "        assert_eq!(access_level.get_daily_ai_limits(), 0);"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `get_daily_ai_limits` found for enum `types::UserAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 4273,
          "byte_start": 4249,
          "column_end": 25,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `get_daily_ai_limits` not found for this enum",
          "line_end": 150,
          "line_start": 150,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 25,
              "highlight_start": 1,
              "text": "pub enum UserAccessLevel {"
            }
          ]
        },
        {
          "byte_end": 34040,
          "byte_start": 34021,
          "column_end": 52,
          "column_start": 33,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": null,
          "line_end": 904,
          "line_start": 904,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 52,
              "highlight_start": 33,
              "text": "        assert_eq!(access_level.get_daily_ai_limits(), 0);"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `ai_analysis`\n   --> src/services/core/user/ai_access.rs:911:13\n    |\n911 |             ai_analysis: true,\n    |             ^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `ai_analysis`",
      "spans": [
        {
          "byte_end": 34350,
          "byte_start": 34339,
          "column_end": 24,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 911,
          "line_start": 911,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 13,
              "text": "            ai_analysis: true,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `custom_templates`\n   --> src/services/core/user/ai_access.rs:912:13\n    |\n912 |             custom_templates: false,\n    |             ^^^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `custom_templates`",
      "spans": [
        {
          "byte_end": 34386,
          "byte_start": 34370,
          "column_end": 29,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 912,
          "line_start": 912,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 29,
              "highlight_start": 13,
              "text": "            custom_templates: false,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `daily_ai_limit`\n   --> src/services/core/user/ai_access.rs:913:13\n    |\n913 |             daily_ai_limit: 5,\n    |             ^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `daily_ai_limit`",
      "spans": [
        {
          "byte_end": 34421,
          "byte_start": 34407,
          "column_end": 27,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 913,
          "line_start": 913,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 27,
              "highlight_start": 13,
              "text": "            daily_ai_limit: 5,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `global_ai_enhancement`\n   --> src/services/core/user/ai_access.rs:914:13\n    |\n914 |             global_ai_enhancement: true,\n    |             ^^^^^^^^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `global_ai_enhancement`",
      "spans": [
        {
          "byte_end": 34459,
          "byte_start": 34438,
          "column_end": 34,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 914,
          "line_start": 914,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 34,
              "highlight_start": 13,
              "text": "            global_ai_enhancement: true,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `personal_ai_generation`\n   --> src/services/core/user/ai_access.rs:915:13\n    |\n915 |             personal_ai_generation: false,\n    |             ^^^^^^^^^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `personal_ai_generation`",
      "spans": [
        {
          "byte_end": 34501,
          "byte_start": 34479,
          "column_end": 35,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 915,
          "line_start": 915,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 35,
              "highlight_start": 13,
              "text": "            personal_ai_generation: false,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `template_access`\n   --> src/services/core/user/ai_access.rs:916:13\n    |\n916 |             template_access: TemplateAcces...\n    |             ^^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `template_access`",
      "spans": [
        {
          "byte_end": 34537,
          "byte_start": 34522,
          "column_end": 28,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 916,
          "line_start": 916,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 13,
              "text": "            template_access: TemplateAccess::DefaultOnly,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no associated item named `DefaultOnly` found for struct `types::TemplateAccess` in the current scope\n    --> src/services/core/user/ai_access.rs:916:46\n     |\n916  | ...ateAccess::DefaultOnly,\n     |               ^^^^^^^^^^^ associated item not found in `TemplateAccess`\n     |\n    ::: src/types.rs:2647:1\n     |\n2647 | pub struct TemplateAccess {\n     | ------------------------- associated item `DefaultOnly` not found for this struct\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no associated item named `DefaultOnly` found for struct `types::TemplateAccess` in the current scope",
      "spans": [
        {
          "byte_end": 34566,
          "byte_start": 34555,
          "column_end": 57,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "associated item not found in `TemplateAccess`",
          "line_end": 916,
          "line_start": 916,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 57,
              "highlight_start": 46,
              "text": "            template_access: TemplateAccess::DefaultOnly,"
            }
          ]
        },
        {
          "byte_end": 90485,
          "byte_start": 90460,
          "column_end": 26,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "associated item `DefaultOnly` not found for this struct",
          "line_end": 2647,
          "line_start": 2647,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 1,
              "text": "pub struct TemplateAccess {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `get_daily_ai_limits` found for enum `types::AIAccessLevel` in the current scope\n    --> src/services/core/user/ai_access.rs:918:41\n     |\n918  | ...ith_ai.get_daily_ai_limits(), 5);\n     |           ^^^^^^^^^^^^^^^^^^^ method not found in `AIAccessLevel`\n     |\n    ::: src/types.rs:2369:1\n     |\n2369 | pub enum AIAccessLevel {\n     | ---------------------- method `get_daily_ai_limits` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `get_daily_ai_limits` found for enum `types::AIAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 34638,
          "byte_start": 34619,
          "column_end": 60,
          "column_start": 41,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "method not found in `AIAccessLevel`",
          "line_end": 918,
          "line_start": 918,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 60,
              "highlight_start": 41,
              "text": "        assert_eq!(access_level_with_ai.get_daily_ai_limits(), 5);"
            }
          ]
        },
        {
          "byte_end": 80967,
          "byte_start": 80945,
          "column_end": 23,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `get_daily_ai_limits` not found for this enum",
          "line_end": 2369,
          "line_start": 2369,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 23,
              "highlight_start": 1,
              "text": "pub enum AIAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `can_use_ai_analysis` found for enum `types::AIAccessLevel` in the current scope\n    --> src/services/core/user/ai_access.rs:919:38\n     |\n919  | ...ith_ai.can_use_ai_analysis());\n     |           ^^^^^^^^^^^^^^^^^^^ method not found in `AIAccessLevel`\n     |\n    ::: src/types.rs:2369:1\n     |\n2369 | pub enum AIAccessLevel {\n     | ---------------------- method `can_use_ai_analysis` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `can_use_ai_analysis` found for enum `types::AIAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 34702,
          "byte_start": 34683,
          "column_end": 57,
          "column_start": 38,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "method not found in `AIAccessLevel`",
          "line_end": 919,
          "line_start": 919,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 57,
              "highlight_start": 38,
              "text": "        assert!(access_level_with_ai.can_use_ai_analysis());"
            }
          ]
        },
        {
          "byte_end": 80967,
          "byte_start": 80945,
          "column_end": 23,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `can_use_ai_analysis` not found for this enum",
          "line_end": 2369,
          "line_start": 2369,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 23,
              "highlight_start": 1,
              "text": "pub enum AIAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `can_create_custom_templates` found for enum `types::AIAccessLevel` in the current scope\n    --> src/services/core/user/ai_access.rs:920:39\n     |\n920  | ...h_ai.can_create_custom_templates());\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `AIAccessLevel`\n     |\n    ::: src/types.rs:2369:1\n     |\n2369 | pub enum AIAccessLevel {\n     | ---------------------- method `can_create_custom_templates` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `can_create_custom_templates` found for enum `types::AIAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 34772,
          "byte_start": 34745,
          "column_end": 66,
          "column_start": 39,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "method not found in `AIAccessLevel`",
          "line_end": 920,
          "line_start": 920,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 66,
              "highlight_start": 39,
              "text": "        assert!(!access_level_with_ai.can_create_custom_templates());"
            }
          ]
        },
        {
          "byte_end": 80967,
          "byte_start": 80945,
          "column_end": 23,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `can_create_custom_templates` not found for this enum",
          "line_end": 2369,
          "line_start": 2369,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 23,
              "highlight_start": 1,
              "text": "pub enum AIAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `ai_analysis`\n   --> src/services/core/user/ai_access.rs:924:13\n    |\n924 |             ai_analysis: true,\n    |             ^^^^^^^^^^^ `types::AIAccessLevel::SubscriptionWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `ai_analysis`",
      "spans": [
        {
          "byte_end": 34918,
          "byte_start": 34907,
          "column_end": 24,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::SubscriptionWithAI` does not have this field",
          "line_end": 924,
          "line_start": 924,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 13,
              "text": "            ai_analysis: true,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `custom_templates`\n   --> src/services/core/user/ai_access.rs:925:13\n    |\n925 |             custom_templates: true,\n    |             ^^^^^^^^^^^^^^^^ `types::AIAccessLevel::SubscriptionWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `custom_templates`",
      "spans": [
        {
          "byte_end": 34954,
          "byte_start": 34938,
          "column_end": 29,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::SubscriptionWithAI` does not have this field",
          "line_end": 925,
          "line_start": 925,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 29,
              "highlight_start": 13,
              "text": "            custom_templates: true,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `daily_ai_limit`\n   --> src/services/core/user/ai_access.rs:926:13\n    |\n926 |             daily_ai_limit: 100,\n    |             ^^^^^^^^^^^^^^ `types::AIAccessLevel::SubscriptionWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `daily_ai_limit`",
      "spans": [
        {
          "byte_end": 34988,
          "byte_start": 34974,
          "column_end": 27,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::SubscriptionWithAI` does not have this field",
          "line_end": 926,
          "line_start": 926,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 27,
              "highlight_start": 13,
              "text": "            daily_ai_limit: 100,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `global_ai_enhancement`\n   --> src/services/core/user/ai_access.rs:927:13\n    |\n927 |             global_ai_enhancement: true,\n    |             ^^^^^^^^^^^^^^^^^^^^^ `types::AIAccessLevel::SubscriptionWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `global_ai_enhancement`",
      "spans": [
        {
          "byte_end": 35028,
          "byte_start": 35007,
          "column_end": 34,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::SubscriptionWithAI` does not have this field",
          "line_end": 927,
          "line_start": 927,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 34,
              "highlight_start": 13,
              "text": "            global_ai_enhancement: true,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `personal_ai_generation`\n   --> src/services/core/user/ai_access.rs:928:13\n    |\n928 |             personal_ai_generation: true,\n    |             ^^^^^^^^^^^^^^^^^^^^^^ `types::AIAccessLevel::SubscriptionWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `personal_ai_generation`",
      "spans": [
        {
          "byte_end": 35070,
          "byte_start": 35048,
          "column_end": 35,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::SubscriptionWithAI` does not have this field",
          "line_end": 928,
          "line_start": 928,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 35,
              "highlight_start": 13,
              "text": "            personal_ai_generation: true,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `ai_marketplace`\n   --> src/services/core/user/ai_access.rs:929:13\n    |\n929 |             ai_marketplace: true,\n    |             ^^^^^^^^^^^^^^ `types::AIAccessLevel::SubscriptionWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `ai_marketplace`",
      "spans": [
        {
          "byte_end": 35104,
          "byte_start": 35090,
          "column_end": 27,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::SubscriptionWithAI` does not have this field",
          "line_end": 929,
          "line_start": 929,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 27,
              "highlight_start": 13,
              "text": "            ai_marketplace: true,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `template_access`\n   --> src/services/core/user/ai_access.rs:930:13\n    |\n930 |             template_access: TemplateAcces...\n    |             ^^^^^^^^^^^^^^^ `types::AIAccessLevel::SubscriptionWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::SubscriptionWithAI` has no field named `template_access`",
      "spans": [
        {
          "byte_end": 35139,
          "byte_start": 35124,
          "column_end": 28,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::SubscriptionWithAI` does not have this field",
          "line_end": 930,
          "line_start": 930,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 13,
              "text": "            template_access: TemplateAccess::Full,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no associated item named `Full` found for struct `types::TemplateAccess` in the current scope\n    --> src/services/core/user/ai_access.rs:930:46\n     |\n930  | ...plateAccess::Full,\n     |                 ^^^^ associated item not found in `TemplateAccess`\n     |\n    ::: src/types.rs:2647:1\n     |\n2647 | pub struct TemplateAccess {\n     | ------------------------- associated item `Full` not found for this struct\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no associated item named `Full` found for struct `types::TemplateAccess` in the current scope",
      "spans": [
        {
          "byte_end": 35161,
          "byte_start": 35157,
          "column_end": 50,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "associated item not found in `TemplateAccess`",
          "line_end": 930,
          "line_start": 930,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 50,
              "highlight_start": 46,
              "text": "            template_access: TemplateAccess::Full,"
            }
          ]
        },
        {
          "byte_end": 90485,
          "byte_start": 90460,
          "column_end": 26,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "associated item `Full` not found for this struct",
          "line_end": 2647,
          "line_start": 2647,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 1,
              "text": "pub struct TemplateAccess {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `get_daily_ai_limits` found for enum `types::AIAccessLevel` in the current scope\n    --> src/services/core/user/ai_access.rs:932:40\n     |\n932  | ...access.get_daily_ai_limits(), 100);\n     |           ^^^^^^^^^^^^^^^^^^^ method not found in `AIAccessLevel`\n     |\n    ::: src/types.rs:2369:1\n     |\n2369 | pub enum AIAccessLevel {\n     | ---------------------- method `get_daily_ai_limits` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `get_daily_ai_limits` found for enum `types::AIAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 35232,
          "byte_start": 35213,
          "column_end": 59,
          "column_start": 40,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "method not found in `AIAccessLevel`",
          "line_end": 932,
          "line_start": 932,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 59,
              "highlight_start": 40,
              "text": "        assert_eq!(subscription_access.get_daily_ai_limits(), 100);"
            }
          ]
        },
        {
          "byte_end": 80967,
          "byte_start": 80945,
          "column_end": 23,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `get_daily_ai_limits` not found for this enum",
          "line_end": 2369,
          "line_start": 2369,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 23,
              "highlight_start": 1,
              "text": "pub enum AIAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `can_use_ai_analysis` found for enum `types::AIAccessLevel` in the current scope\n    --> src/services/core/user/ai_access.rs:933:37\n     |\n933  | ...access.can_use_ai_analysis());\n     |           ^^^^^^^^^^^^^^^^^^^ method not found in `AIAccessLevel`\n     |\n    ::: src/types.rs:2369:1\n     |\n2369 | pub enum AIAccessLevel {\n     | ---------------------- method `can_use_ai_analysis` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `can_use_ai_analysis` found for enum `types::AIAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 35297,
          "byte_start": 35278,
          "column_end": 56,
          "column_start": 37,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "method not found in `AIAccessLevel`",
          "line_end": 933,
          "line_start": 933,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 56,
              "highlight_start": 37,
              "text": "        assert!(subscription_access.can_use_ai_analysis());"
            }
          ]
        },
        {
          "byte_end": 80967,
          "byte_start": 80945,
          "column_end": 23,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `can_use_ai_analysis` not found for this enum",
          "line_end": 2369,
          "line_start": 2369,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 23,
              "highlight_start": 1,
              "text": "pub enum AIAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `can_create_custom_templates` found for enum `types::AIAccessLevel` in the current scope\n    --> src/services/core/user/ai_access.rs:934:37\n     |\n934  | ...cess.can_create_custom_templates());\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `AIAccessLevel`\n     |\n    ::: src/types.rs:2369:1\n     |\n2369 | pub enum AIAccessLevel {\n     | ---------------------- method `can_create_custom_templates` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `can_create_custom_templates` found for enum `types::AIAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 35365,
          "byte_start": 35338,
          "column_end": 64,
          "column_start": 37,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "method not found in `AIAccessLevel`",
          "line_end": 934,
          "line_start": 934,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 64,
              "highlight_start": 37,
              "text": "        assert!(subscription_access.can_create_custom_templates());"
            }
          ]
        },
        {
          "byte_end": 80967,
          "byte_start": 80945,
          "column_end": 23,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `can_create_custom_templates` not found for this enum",
          "line_end": 2369,
          "line_start": 2369,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 23,
              "highlight_start": 1,
              "text": "pub enum AIAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `can_generate_personal_ai_opportunities` found for enum `types::AIAccessLevel` in the current scope\n    --> src/services/core/user/ai_access.rs:935:37\n     |\n935  | ...ss.can_generate_personal_ai_opportunities());\n     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `AIAccessLevel`\n     |\n    ::: src/types.rs:2369:1\n     |\n2369 | pub enum AIAccessLevel {\n     | ---------------------- method `can_generate_personal_ai_opportunities` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `can_generate_personal_ai_opportunities` found for enum `types::AIAccessLevel` in the current scope",
      "spans": [
        {
          "byte_end": 35444,
          "byte_start": 35406,
          "column_end": 75,
          "column_start": 37,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "method not found in `AIAccessLevel`",
          "line_end": 935,
          "line_start": 935,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 75,
              "highlight_start": 37,
              "text": "        assert!(subscription_access.can_generate_personal_ai_opportunities());"
            }
          ]
        },
        {
          "byte_end": 80967,
          "byte_start": 80945,
          "column_end": 23,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `can_generate_personal_ai_opportunities` not found for this enum",
          "line_end": 2369,
          "line_start": 2369,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 23,
              "highlight_start": 1,
              "text": "pub enum AIAccessLevel {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `ai_analysis`\n   --> src/services/core/user/ai_access.rs:941:13\n    |\n941 |             ai_analysis: true,\n    |             ^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `ai_analysis`",
      "spans": [
        {
          "byte_end": 35579,
          "byte_start": 35568,
          "column_end": 24,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 941,
          "line_start": 941,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 13,
              "text": "            ai_analysis: true,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `custom_templates`\n   --> src/services/core/user/ai_access.rs:942:13\n    |\n942 |             custom_templates: false,\n    |             ^^^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `custom_templates`",
      "spans": [
        {
          "byte_end": 35615,
          "byte_start": 35599,
          "column_end": 29,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 942,
          "line_start": 942,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 29,
              "highlight_start": 13,
              "text": "            custom_templates: false,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `daily_ai_limit`\n   --> src/services/core/user/ai_access.rs:943:13\n    |\n943 |             daily_ai_limit: 5,\n    |             ^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `daily_ai_limit`",
      "spans": [
        {
          "byte_end": 35650,
          "byte_start": 35636,
          "column_end": 27,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 943,
          "line_start": 943,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 27,
              "highlight_start": 13,
              "text": "            daily_ai_limit: 5,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `global_ai_enhancement`\n   --> src/services/core/user/ai_access.rs:944:13\n    |\n944 |             global_ai_enhancement: true,\n    |             ^^^^^^^^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `global_ai_enhancement`",
      "spans": [
        {
          "byte_end": 35688,
          "byte_start": 35667,
          "column_end": 34,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 944,
          "line_start": 944,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 34,
              "highlight_start": 13,
              "text": "            global_ai_enhancement: true,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `personal_ai_generation`\n   --> src/services/core/user/ai_access.rs:945:13\n    |\n945 |             personal_ai_generation: false,\n    |             ^^^^^^^^^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `personal_ai_generation`",
      "spans": [
        {
          "byte_end": 35730,
          "byte_start": 35708,
          "column_end": 35,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 945,
          "line_start": 945,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 35,
              "highlight_start": 13,
              "text": "            personal_ai_generation: false,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0559]: variant `types::AIAccessLevel::FreeWithAI` has no field named `template_access`\n   --> src/services/core/user/ai_access.rs:946:13\n    |\n946 |             template_access: TemplateAcces...\n    |             ^^^^^^^^^^^^^^^ `types::AIAccessLevel::FreeWithAI` does not have this field\n    |\n    = note: all struct fields are already assigned\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "all struct fields are already assigned",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0559",
        "explanation": "An unknown field was specified into an enum's structure variant.\n\nErroneous code example:\n\n```compile_fail,E0559\nenum Field {\n    Fool { x: u32 },\n}\n\nlet s = Field::Fool { joke: 0 };\n// error: struct variant `Field::Fool` has no field named `joke`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nenum Field {\n    Fool { joke: u32 },\n}\n\nlet s = Field::Fool { joke: 0 }; // ok!\n```\n"
      },
      "level": "error",
      "message": "variant `types::AIAccessLevel::FreeWithAI` has no field named `template_access`",
      "spans": [
        {
          "byte_end": 35766,
          "byte_start": 35751,
          "column_end": 28,
          "column_start": 13,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "`types::AIAccessLevel::FreeWithAI` does not have this field",
          "line_end": 946,
          "line_start": 946,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 28,
              "highlight_start": 13,
              "text": "            template_access: TemplateAccess::DefaultOnly,"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no associated item named `DefaultOnly` found for struct `types::TemplateAccess` in the current scope\n    --> src/services/core/user/ai_access.rs:946:46\n     |\n946  | ...ateAccess::DefaultOnly,\n     |               ^^^^^^^^^^^ associated item not found in `TemplateAccess`\n     |\n    ::: src/types.rs:2647:1\n     |\n2647 | pub struct TemplateAccess {\n     | ------------------------- associated item `DefaultOnly` not found for this struct\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no associated item named `DefaultOnly` found for struct `types::TemplateAccess` in the current scope",
      "spans": [
        {
          "byte_end": 35795,
          "byte_start": 35784,
          "column_end": 57,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "associated item not found in `TemplateAccess`",
          "line_end": 946,
          "line_start": 946,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 57,
              "highlight_start": 46,
              "text": "            template_access: TemplateAccess::DefaultOnly,"
            }
          ]
        },
        {
          "byte_end": 90485,
          "byte_start": 90460,
          "column_end": 26,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "associated item `DefaultOnly` not found for this struct",
          "line_end": 2647,
          "line_start": 2647,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 1,
              "text": "pub struct TemplateAccess {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: arguments to this method are incorrect\n    --> src/services/core/user/ai_access.rs:956:25\n     |\n956  | ...er.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));\n     |       ^^^^^^^^^^^^^^       --------------------  ---------------------- expected `&str`, found `String`\n     |                            |\n     |                            expected `&str`, found `String`\n     |\nnote: method defined here\n    --> src/types.rs:2718:12\n     |\n2718 | ...fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {\n     |       ^^^^^^^^^^^^^^                           --------------  -------------\nhelp: try removing the method call\n     |\n956  -         assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));\n956  +         assert!(tracker.record_ai_call(0.01, \"openai\", \"analysis\".to_string()));\n     |\nhelp: try removing the method call\n     |\n956  -         assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));\n956  +         assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\"));\n     |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "method defined here",
          "rendered": null,
          "spans": [
            {
              "byte_end": 92801,
              "byte_start": 92787,
              "column_end": 67,
              "column_start": 53,
              "expansion": null,
              "file_name": "src/types.rs",
              "is_primary": false,
              "label": "",
              "line_end": 2718,
              "line_start": 2718,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 67,
                  "highlight_start": 53,
                  "text": "    pub fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {"
                }
              ]
            },
            {
              "byte_end": 92816,
              "byte_start": 92803,
              "column_end": 82,
              "column_start": 69,
              "expansion": null,
              "file_name": "src/types.rs",
              "is_primary": false,
              "label": "",
              "line_end": 2718,
              "line_start": 2718,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 82,
                  "highlight_start": 69,
                  "text": "    pub fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {"
                }
              ]
            },
            {
              "byte_end": 92760,
              "byte_start": 92746,
              "column_end": 26,
              "column_start": 12,
              "expansion": null,
              "file_name": "src/types.rs",
              "is_primary": true,
              "label": null,
              "line_end": 2718,
              "line_start": 2718,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 26,
                  "highlight_start": 12,
                  "text": "    pub fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "try removing the method call",
          "rendered": null,
          "spans": [
            {
              "byte_end": 36126,
              "byte_start": 36114,
              "column_end": 66,
              "column_start": 54,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 956,
              "line_start": 956,
              "suggested_replacement": "",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 66,
                  "highlight_start": 54,
                  "text": "        assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "try removing the method call",
          "rendered": null,
          "spans": [
            {
              "byte_end": 36150,
              "byte_start": 36138,
              "column_end": 90,
              "column_start": 78,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 956,
              "line_start": 956,
              "suggested_replacement": "",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 90,
                  "highlight_start": 78,
                  "text": "        assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "arguments to this method are incorrect",
      "spans": [
        {
          "byte_end": 36126,
          "byte_start": 36106,
          "column_end": 66,
          "column_start": 46,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "expected `&str`, found `String`",
          "line_end": 956,
          "line_start": 956,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 66,
              "highlight_start": 46,
              "text": "        assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
            }
          ]
        },
        {
          "byte_end": 36150,
          "byte_start": 36128,
          "column_end": 90,
          "column_start": 68,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "expected `&str`, found `String`",
          "line_end": 956,
          "line_start": 956,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 90,
              "highlight_start": 68,
              "text": "        assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
            }
          ]
        },
        {
          "byte_end": 36099,
          "byte_start": 36085,
          "column_end": 39,
          "column_start": 25,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": null,
          "line_end": 956,
          "line_start": 956,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 39,
              "highlight_start": 25,
              "text": "        assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0600]: cannot apply unary operator `!` to type `()`\n   --> src/services/core/user/ai_access.rs:956:9\n    |\n956 | ...   assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot apply unary operator `!`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0600",
        "explanation": "An unary operator was used on a type which doesn't implement it.\n\nErroneous code example:\n\n```compile_fail,E0600\nenum Question {\n    Yes,\n    No,\n}\n\n!Question::Yes; // error: cannot apply unary operator `!` to type `Question`\n```\n\nIn this case, `Question` would need to implement the `std::ops::Not` trait in\norder to be able to use `!` on it. Let's implement it:\n\n```\nuse std::ops::Not;\n\nenum Question {\n    Yes,\n    No,\n}\n\n// We implement the `Not` trait on the enum.\nimpl Not for Question {\n    type Output = bool;\n\n    fn not(self) -> bool {\n        match self {\n            Question::Yes => false, // If the `Answer` is `Yes`, then it\n                                    // returns false.\n            Question::No => true, // And here we do the opposite.\n        }\n    }\n}\n\nassert_eq!(!Question::Yes, false);\nassert_eq!(!Question::No, true);\n```\n"
      },
      "level": "error",
      "message": "cannot apply unary operator `!` to type `()`",
      "spans": [
        {
          "byte_end": 36152,
          "byte_start": 36069,
          "column_end": 92,
          "column_start": 9,
          "expansion": {
            "def_site_span": {
              "byte_end": 56427,
              "byte_start": 56408,
              "column_end": 24,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs",
              "is_primary": false,
              "label": null,
              "line_end": 1588,
              "line_start": 1588,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 24,
                  "highlight_start": 5,
                  "text": "    macro_rules! assert {"
                }
              ]
            },
            "macro_decl_name": "assert!",
            "span": {
              "byte_end": 36152,
              "byte_start": 36069,
              "column_end": 92,
              "column_start": 9,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": false,
              "label": null,
              "line_end": 956,
              "line_start": 956,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 92,
                  "highlight_start": 9,
                  "text": "        assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
                }
              ]
            }
          },
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "cannot apply unary operator `!`",
          "line_end": 956,
          "line_start": 956,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 92,
              "highlight_start": 9,
              "text": "        assert!(tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: arguments to this method are incorrect\n    --> src/services/core/user/ai_access.rs:962:21\n     |\n962  | ...er.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string());\n     |       ^^^^^^^^^^^^^^       --------------------  ---------------------- expected `&str`, found `String`\n     |                            |\n     |                            expected `&str`, found `String`\n     |\nnote: method defined here\n    --> src/types.rs:2718:12\n     |\n2718 | ...fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {\n     |       ^^^^^^^^^^^^^^                           --------------  -------------\nhelp: try removing the method call\n     |\n962  -             tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string());\n962  +             tracker.record_ai_call(0.01, \"openai\", \"analysis\".to_string());\n     |\nhelp: try removing the method call\n     |\n962  -             tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string());\n962  +             tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\");\n     |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "method defined here",
          "rendered": null,
          "spans": [
            {
              "byte_end": 92801,
              "byte_start": 92787,
              "column_end": 67,
              "column_start": 53,
              "expansion": null,
              "file_name": "src/types.rs",
              "is_primary": false,
              "label": "",
              "line_end": 2718,
              "line_start": 2718,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 67,
                  "highlight_start": 53,
                  "text": "    pub fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {"
                }
              ]
            },
            {
              "byte_end": 92816,
              "byte_start": 92803,
              "column_end": 82,
              "column_start": 69,
              "expansion": null,
              "file_name": "src/types.rs",
              "is_primary": false,
              "label": "",
              "line_end": 2718,
              "line_start": 2718,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 82,
                  "highlight_start": 69,
                  "text": "    pub fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {"
                }
              ]
            },
            {
              "byte_end": 92760,
              "byte_start": 92746,
              "column_end": 26,
              "column_start": 12,
              "expansion": null,
              "file_name": "src/types.rs",
              "is_primary": true,
              "label": null,
              "line_end": 2718,
              "line_start": 2718,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 26,
                  "highlight_start": 12,
                  "text": "    pub fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "try removing the method call",
          "rendered": null,
          "spans": [
            {
              "byte_end": 36375,
              "byte_start": 36363,
              "column_end": 62,
              "column_start": 50,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 962,
              "line_start": 962,
              "suggested_replacement": "",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 50,
                  "text": "            tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string());"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "try removing the method call",
          "rendered": null,
          "spans": [
            {
              "byte_end": 36399,
              "byte_start": 36387,
              "column_end": 86,
              "column_start": 74,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 962,
              "line_start": 962,
              "suggested_replacement": "",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 86,
                  "highlight_start": 74,
                  "text": "            tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string());"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "arguments to this method are incorrect",
      "spans": [
        {
          "byte_end": 36375,
          "byte_start": 36355,
          "column_end": 62,
          "column_start": 42,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "expected `&str`, found `String`",
          "line_end": 962,
          "line_start": 962,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 62,
              "highlight_start": 42,
              "text": "            tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string());"
            }
          ]
        },
        {
          "byte_end": 36399,
          "byte_start": 36377,
          "column_end": 86,
          "column_start": 64,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "expected `&str`, found `String`",
          "line_end": 962,
          "line_start": 962,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 64,
              "text": "            tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string());"
            }
          ]
        },
        {
          "byte_end": 36348,
          "byte_start": 36334,
          "column_end": 35,
          "column_start": 21,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": null,
          "line_end": 962,
          "line_start": 962,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 35,
              "highlight_start": 21,
              "text": "            tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string());"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: arguments to this method are incorrect\n    --> src/services/core/user/ai_access.rs:966:26\n     |\n966  | ...er.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));\n     |       ^^^^^^^^^^^^^^       --------------------  ---------------------- expected `&str`, found `String`\n     |                            |\n     |                            expected `&str`, found `String`\n     |\nnote: method defined here\n    --> src/types.rs:2718:12\n     |\n2718 | ...fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {\n     |       ^^^^^^^^^^^^^^                           --------------  -------------\nhelp: try removing the method call\n     |\n966  -         assert!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));\n966  +         assert!(!tracker.record_ai_call(0.01, \"openai\", \"analysis\".to_string()));\n     |\nhelp: try removing the method call\n     |\n966  -         assert!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));\n966  +         assert!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\"));\n     |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "method defined here",
          "rendered": null,
          "spans": [
            {
              "byte_end": 92801,
              "byte_start": 92787,
              "column_end": 67,
              "column_start": 53,
              "expansion": null,
              "file_name": "src/types.rs",
              "is_primary": false,
              "label": "",
              "line_end": 2718,
              "line_start": 2718,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 67,
                  "highlight_start": 53,
                  "text": "    pub fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {"
                }
              ]
            },
            {
              "byte_end": 92816,
              "byte_start": 92803,
              "column_end": 82,
              "column_start": 69,
              "expansion": null,
              "file_name": "src/types.rs",
              "is_primary": false,
              "label": "",
              "line_end": 2718,
              "line_start": 2718,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 82,
                  "highlight_start": 69,
                  "text": "    pub fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {"
                }
              ]
            },
            {
              "byte_end": 92760,
              "byte_start": 92746,
              "column_end": 26,
              "column_start": 12,
              "expansion": null,
              "file_name": "src/types.rs",
              "is_primary": true,
              "label": null,
              "line_end": 2718,
              "line_start": 2718,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 26,
                  "highlight_start": 12,
                  "text": "    pub fn record_ai_call(&mut self, cost_usd: f64, provider: &str, feature: &str) {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "try removing the method call",
          "rendered": null,
          "spans": [
            {
              "byte_end": 36578,
              "byte_start": 36566,
              "column_end": 67,
              "column_start": 55,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 966,
              "line_start": 966,
              "suggested_replacement": "",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 67,
                  "highlight_start": 55,
                  "text": "        assert!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "try removing the method call",
          "rendered": null,
          "spans": [
            {
              "byte_end": 36602,
              "byte_start": 36590,
              "column_end": 91,
              "column_start": 79,
              "expansion": null,
              "file_name": "src/services/core/user/ai_access.rs",
              "is_primary": true,
              "label": null,
              "line_end": 966,
              "line_start": 966,
              "suggested_replacement": "",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 91,
                  "highlight_start": 79,
                  "text": "        assert!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "arguments to this method are incorrect",
      "spans": [
        {
          "byte_end": 36578,
          "byte_start": 36558,
          "column_end": 67,
          "column_start": 47,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "expected `&str`, found `String`",
          "line_end": 966,
          "line_start": 966,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 67,
              "highlight_start": 47,
              "text": "        assert!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
            }
          ]
        },
        {
          "byte_end": 36602,
          "byte_start": 36580,
          "column_end": 91,
          "column_start": 69,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": false,
          "label": "expected `&str`, found `String`",
          "line_end": 966,
          "line_start": 966,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 91,
              "highlight_start": 69,
              "text": "        assert!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
            }
          ]
        },
        {
          "byte_end": 36551,
          "byte_start": 36537,
          "column_end": 40,
          "column_start": 26,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": null,
          "line_end": 966,
          "line_start": 966,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 40,
              "highlight_start": 26,
              "text": "        assert!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0600]: cannot apply unary operator `!` to type `()`\n   --> src/services/core/user/ai_access.rs:966:17\n    |\n966 | ...t!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot apply unary operator `!`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0600",
        "explanation": "An unary operator was used on a type which doesn't implement it.\n\nErroneous code example:\n\n```compile_fail,E0600\nenum Question {\n    Yes,\n    No,\n}\n\n!Question::Yes; // error: cannot apply unary operator `!` to type `Question`\n```\n\nIn this case, `Question` would need to implement the `std::ops::Not` trait in\norder to be able to use `!` on it. Let's implement it:\n\n```\nuse std::ops::Not;\n\nenum Question {\n    Yes,\n    No,\n}\n\n// We implement the `Not` trait on the enum.\nimpl Not for Question {\n    type Output = bool;\n\n    fn not(self) -> bool {\n        match self {\n            Question::Yes => false, // If the `Answer` is `Yes`, then it\n                                    // returns false.\n            Question::No => true, // And here we do the opposite.\n        }\n    }\n}\n\nassert_eq!(!Question::Yes, false);\nassert_eq!(!Question::No, true);\n```\n"
      },
      "level": "error",
      "message": "cannot apply unary operator `!` to type `()`",
      "spans": [
        {
          "byte_end": 36603,
          "byte_start": 36528,
          "column_end": 92,
          "column_start": 17,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "cannot apply unary operator `!`",
          "line_end": 966,
          "line_start": 966,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 92,
              "highlight_start": 17,
              "text": "        assert!(!tracker.record_ai_call(0.01, \"openai\".to_string(), \"analysis\".to_string()));"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `new_system_template` found for struct `types::AITemplate` in the current scope\n    --> src/services/core/user/ai_access.rs:971:36\n     |\n971  | ...plate::new_system_template(\n     |           ^^^^^^^^^^^^^^^^^^^ function or associated item not found in `AITemplate`\n     |\n    ::: src/types.rs:2614:1\n     |\n2614 | pub struct AITemplate {\n     | --------------------- function or associated item `new_system_template` not found for this struct\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `new_system_template` found for struct `types::AITemplate` in the current scope",
      "spans": [
        {
          "byte_end": 36716,
          "byte_start": 36697,
          "column_end": 55,
          "column_start": 36,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "function or associated item not found in `AITemplate`",
          "line_end": 971,
          "line_start": 971,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 55,
              "highlight_start": 36,
              "text": "        let template = AITemplate::new_system_template("
            }
          ]
        },
        {
          "byte_end": 89654,
          "byte_start": 89633,
          "column_end": 22,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "function or associated item `new_system_template` not found for this struct",
          "line_end": 2614,
          "line_start": 2614,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 22,
              "highlight_start": 1,
              "text": "pub struct AITemplate {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `GlobalOpportunityAnalysis` found for enum `types::AITemplateType` in the current scope\n    --> src/services/core/user/ai_access.rs:973:29\n     |\n973  | ...ype::GlobalOpportunityAnalysis,\n     |         ^^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AITemplateType`\n     |\n    ::: src/types.rs:2627:1\n     |\n2627 | pub enum AITemplateType {\n     | ----------------------- variant or associated item `GlobalOpportunityAnalysis` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `GlobalOpportunityAnalysis` found for enum `types::AITemplateType` in the current scope",
      "spans": [
        {
          "byte_end": 36812,
          "byte_start": 36787,
          "column_end": 54,
          "column_start": 29,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `AITemplateType`",
          "line_end": 973,
          "line_start": 973,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 54,
              "highlight_start": 29,
              "text": "            AITemplateType::GlobalOpportunityAnalysis,"
            }
          ]
        },
        {
          "byte_end": 89998,
          "byte_start": 89975,
          "column_end": 24,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `GlobalOpportunityAnalysis` not found for this enum",
          "line_end": 2627,
          "line_start": 2627,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "pub enum AITemplateType {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `default` found for struct `types::AITemplateParameters` in the current scope\n    --> src/services/core/user/ai_access.rs:975:35\n     |\n975  |             AITemplateParameters::default(),\n     |                                   ^^^^^^^ function or associated item not found in `AITemplateParameters`\n     |\n    ::: src/types.rs:2637:1\n     |\n2637 | pub struct AITemplateParameters {\n     | ------------------------------- function or associated item `default` not found for this struct\n     |\n     = help: items from traits can only be used if the trait is implemented and in scope\n     = note: the following traits define an item `default`, perhaps you need to implement one of them:\n             candidate #1: `std::default::Default`\n             candidate #2: `worker::worker_sys::ext::CacheStorageExt`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is implemented and in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the following traits define an item `default`, perhaps you need to implement one of them:\ncandidate #1: `std::default::Default`\ncandidate #2: `worker::worker_sys::ext::CacheStorageExt`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `default` found for struct `types::AITemplateParameters` in the current scope",
      "spans": [
        {
          "byte_end": 36902,
          "byte_start": 36895,
          "column_end": 42,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "function or associated item not found in `AITemplateParameters`",
          "line_end": 975,
          "line_start": 975,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 42,
              "highlight_start": 35,
              "text": "            AITemplateParameters::default(),"
            }
          ]
        },
        {
          "byte_end": 90201,
          "byte_start": 90170,
          "column_end": 32,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "function or associated item `default` not found for this struct",
          "line_end": 2637,
          "line_start": 2637,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 1,
              "text": "pub struct AITemplateParameters {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no associated item named `DefaultOnly` found for struct `types::TemplateAccess` in the current scope\n    --> src/services/core/user/ai_access.rs:981:59\n     |\n981  | ...ateAccess::DefaultOnly);\n     |               ^^^^^^^^^^^ associated item not found in `TemplateAccess`\n     |\n    ::: src/types.rs:2647:1\n     |\n2647 | pub struct TemplateAccess {\n     | ------------------------- associated item `DefaultOnly` not found for this struct\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no associated item named `DefaultOnly` found for struct `types::TemplateAccess` in the current scope",
      "spans": [
        {
          "byte_end": 37141,
          "byte_start": 37130,
          "column_end": 70,
          "column_start": 59,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "associated item not found in `TemplateAccess`",
          "line_end": 981,
          "line_start": 981,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 70,
              "highlight_start": 59,
              "text": "        assert_eq!(template.access_level, TemplateAccess::DefaultOnly);"
            }
          ]
        },
        {
          "byte_end": 90485,
          "byte_start": 90460,
          "column_end": 26,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "associated item `DefaultOnly` not found for this struct",
          "line_end": 2647,
          "line_start": 2647,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 1,
              "text": "pub struct TemplateAccess {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `new_user_template` found for struct `types::AITemplate` in the current scope\n    --> src/services/core/user/ai_access.rs:983:41\n     |\n983  | ...emplate::new_user_template(\n     |             ^^^^^^^^^^^^^^^^^ function or associated item not found in `AITemplate`\n     |\n    ::: src/types.rs:2614:1\n     |\n2614 | pub struct AITemplate {\n     | --------------------- function or associated item `new_user_template` not found for this struct\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `new_user_template` found for struct `types::AITemplate` in the current scope",
      "spans": [
        {
          "byte_end": 37202,
          "byte_start": 37185,
          "column_end": 58,
          "column_start": 41,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "function or associated item not found in `AITemplate`",
          "line_end": 983,
          "line_start": 983,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 58,
              "highlight_start": 41,
              "text": "        let user_template = AITemplate::new_user_template("
            }
          ]
        },
        {
          "byte_end": 89654,
          "byte_start": 89633,
          "column_end": 22,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "function or associated item `new_user_template` not found for this struct",
          "line_end": 2614,
          "line_start": 2614,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 22,
              "highlight_start": 1,
              "text": "pub struct AITemplate {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no variant or associated item named `PersonalOpportunityGeneration` found for enum `types::AITemplateType` in the current scope\n    --> src/services/core/user/ai_access.rs:985:29\n     |\n985  | ...e::PersonalOpportunityGeneration,\n     |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AITemplateType`\n     |\n    ::: src/types.rs:2627:1\n     |\n2627 | pub enum AITemplateType {\n     | ----------------------- variant or associated item `PersonalOpportunityGeneration` not found for this enum\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no variant or associated item named `PersonalOpportunityGeneration` found for enum `types::AITemplateType` in the current scope",
      "spans": [
        {
          "byte_end": 37302,
          "byte_start": 37273,
          "column_end": 58,
          "column_start": 29,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "variant or associated item not found in `AITemplateType`",
          "line_end": 985,
          "line_start": 985,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 58,
              "highlight_start": 29,
              "text": "            AITemplateType::PersonalOpportunityGeneration,"
            }
          ]
        },
        {
          "byte_end": 89998,
          "byte_start": 89975,
          "column_end": 24,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "variant or associated item `PersonalOpportunityGeneration` not found for this enum",
          "line_end": 2627,
          "line_start": 2627,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "pub enum AITemplateType {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `default` found for struct `types::AITemplateParameters` in the current scope\n    --> src/services/core/user/ai_access.rs:987:35\n     |\n987  |             AITemplateParameters::default(),\n     |                                   ^^^^^^^ function or associated item not found in `AITemplateParameters`\n     |\n    ::: src/types.rs:2637:1\n     |\n2637 | pub struct AITemplateParameters {\n     | ------------------------------- function or associated item `default` not found for this struct\n     |\n     = help: items from traits can only be used if the trait is implemented and in scope\n     = note: the following traits define an item `default`, perhaps you need to implement one of them:\n             candidate #1: `std::default::Default`\n             candidate #2: `worker::worker_sys::ext::CacheStorageExt`\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "items from traits can only be used if the trait is implemented and in scope",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the following traits define an item `default`, perhaps you need to implement one of them:\ncandidate #1: `std::default::Default`\ncandidate #2: `worker::worker_sys::ext::CacheStorageExt`",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `default` found for struct `types::AITemplateParameters` in the current scope",
      "spans": [
        {
          "byte_end": 37392,
          "byte_start": 37385,
          "column_end": 42,
          "column_start": 35,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "function or associated item not found in `AITemplateParameters`",
          "line_end": 987,
          "line_start": 987,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 42,
              "highlight_start": 35,
              "text": "            AITemplateParameters::default(),"
            }
          ]
        },
        {
          "byte_end": 90201,
          "byte_start": 90170,
          "column_end": 32,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "function or associated item `default` not found for this struct",
          "line_end": 2637,
          "line_start": 2637,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 32,
              "highlight_start": 1,
              "text": "pub struct AITemplateParameters {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no associated item named `Full` found for struct `types::TemplateAccess` in the current scope\n    --> src/services/core/user/ai_access.rs:994:64\n     |\n994  | ...plateAccess::Full);\n     |                 ^^^^ associated item not found in `TemplateAccess`\n     |\n    ::: src/types.rs:2647:1\n     |\n2647 | pub struct TemplateAccess {\n     | ------------------------- associated item `Full` not found for this struct\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no associated item named `Full` found for struct `types::TemplateAccess` in the current scope",
      "spans": [
        {
          "byte_end": 37702,
          "byte_start": 37698,
          "column_end": 68,
          "column_start": 64,
          "expansion": null,
          "file_name": "src/services/core/user/ai_access.rs",
          "is_primary": true,
          "label": "associated item not found in `TemplateAccess`",
          "line_end": 994,
          "line_start": 994,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 68,
              "highlight_start": 64,
              "text": "        assert_eq!(user_template.access_level, TemplateAccess::Full);"
            }
          ]
        },
        {
          "byte_end": 90485,
          "byte_start": 90460,
          "column_end": 26,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "associated item `Full` not found for this struct",
          "line_end": 2647,
          "line_start": 2647,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 26,
              "highlight_start": 1,
              "text": "pub struct TemplateAccess {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0063]: missing fields `admin_user_ids`, `bot_permissions`, `created_at` and 14 other fields in initializer of `types::GroupRegistration`\n   --> src/services/core/user/group_management.rs:500:28\n    |\n500 | ...ration = GroupRegistration {\n    |             ^^^^^^^^^^^^^^^^^ missing `admin_user_ids`, `bot_permissions`, `created_at` and 14 other fields\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0063",
        "explanation": "A struct's or struct-like enum variant's field was not provided.\n\nErroneous code example:\n\n```compile_fail,E0063\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0 }; // error: missing field: `y`\n}\n```\n\nEach field should be specified exactly once. Example:\n\n```\nstruct Foo {\n    x: i32,\n    y: i32,\n}\n\nfn main() {\n    let x = Foo { x: 0, y: 0 }; // ok!\n}\n```\n"
      },
      "level": "error",
      "message": "missing fields `admin_user_ids`, `bot_permissions`, `created_at` and 14 other fields in initializer of `types::GroupRegistration`",
      "spans": [
        {
          "byte_end": 19046,
          "byte_start": 19029,
          "column_end": 45,
          "column_start": 28,
          "expansion": null,
          "file_name": "src/services/core/user/group_management.rs",
          "is_primary": true,
          "label": "missing `admin_user_ids`, `bot_permissions`, `created_at` and 14 other fields",
          "line_end": 500,
          "line_start": 500,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 45,
              "highlight_start": 28,
              "text": "        let registration = GroupRegistration {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `ai_enabled` on type `types::GroupAISettings`\n   --> src/services/core/user/group_management.rs:538:27\n    |\n538 |         assert!(!settings.ai_enabled);\n    |                           ^^^^^^^^^^ unknown field\n    |\n    = note: available fields are: `group_id`, `admin_user_id`, `enhancement_mode`, `byok_enabled`, `group_ai_key_id` ... and 3 others\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `group_id`, `admin_user_id`, `enhancement_mode`, `byok_enabled`, `group_ai_key_id` ... and 3 others",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `ai_enabled` on type `types::GroupAISettings`",
      "spans": [
        {
          "byte_end": 20439,
          "byte_start": 20429,
          "column_end": 37,
          "column_start": 27,
          "expansion": null,
          "file_name": "src/services/core/user/group_management.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 538,
          "line_start": 538,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 37,
              "highlight_start": 27,
              "text": "        assert!(!settings.ai_enabled);"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `enable_ai` found for struct `types::GroupAISettings` in the current scope\n    --> src/services/core/user/group_management.rs:546:18\n     |\n546  | ...  settings.enable_ai(ApiKeyProvider::O...\n     |               ^^^^^^^^^ method not found in `GroupAISettings`\n     |\n    ::: src/types.rs:3452:1\n     |\n3452 | pub struct GroupAISettings {\n     | -------------------------- method `enable_ai` not found for this struct\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `enable_ai` found for struct `types::GroupAISettings` in the current scope",
      "spans": [
        {
          "byte_end": 20656,
          "byte_start": 20647,
          "column_end": 27,
          "column_start": 18,
          "expansion": null,
          "file_name": "src/services/core/user/group_management.rs",
          "is_primary": true,
          "label": "method not found in `GroupAISettings`",
          "line_end": 546,
          "line_start": 546,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 27,
              "highlight_start": 18,
              "text": "        settings.enable_ai(ApiKeyProvider::OpenAI, Some(\"gpt-4\".to_string()));"
            }
          ]
        },
        {
          "byte_end": 116836,
          "byte_start": 116810,
          "column_end": 27,
          "column_start": 1,
          "expansion": null,
          "file_name": "src/types.rs",
          "is_primary": false,
          "label": "method `enable_ai` not found for this struct",
          "line_end": 3452,
          "line_start": 3452,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 27,
              "highlight_start": 1,
              "text": "pub struct GroupAISettings {"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0609]: no field `ai_enabled` on type `types::GroupAISettings`\n   --> src/services/core/user/group_management.rs:547:26\n    |\n547 |         assert!(settings.ai_enabled);\n    |                          ^^^^^^^^^^ unknown field\n    |\n    = note: available fields are: `group_id`, `admin_user_id`, `enhancement_mode`, `byok_enabled`, `group_ai_key_id` ... and 3 others\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "available fields are: `group_id`, `admin_user_id`, `enhancement_mode`, `byok_enabled`, `group_ai_key_id` ... and 3 others",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0609",
        "explanation": "Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"
      },
      "level": "error",
      "message": "no field `ai_enabled` on type `types::GroupAISettings`",
      "spans": [
        {
          "byte_end": 20744,
          "byte_start": 20734,
          "column_end": 36,
          "column_start": 26,
          "expansion": null,
          "file_name": "src/services/core/user/group_management.rs",
          "is_primary": true,
          "label": "unknown field",
          "line_end": 547,
          "line_start": 547,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 36,
              "highlight_start": 26,
              "text": "        assert!(settings.ai_enabled);"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `default` found for struct `worker::Env` in the current scope\n   --> src/services/core/user/user_exchange_api.rs:689:38\n    |\n689 | ...e::new(&Env::default()).unwrap(),\n    |                 ^^^^^^^ function or associated item not found in `Env`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `default` found for struct `worker::Env` in the current scope",
      "spans": [
        {
          "byte_end": 24287,
          "byte_start": 24280,
          "column_end": 45,
          "column_start": 38,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": "function or associated item not found in `Env`",
          "line_end": 689,
          "line_start": 689,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 45,
              "highlight_start": 38,
              "text": "                D1Service::new(&Env::default()).unwrap(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> src/services/core/user/user_exchange_api.rs:689:17\n    |\n689 | ...   D1Service::new(&Env::default()).unwr...\n    |       ^^^^^^^^^^^^^^----------------- argument #2 of type `services::core::infrastructure::d1::D1ServiceConfig` is missing\n    |\nnote: associated function defined here\n   --> src/services/core/infrastructure/d1.rs:42:18\n    |\n42  | ...fn new(env: &Env, config: D1ServiceConfig) -...\n    |       ^^^            -----------------------\nhelp: provide the argument\n    |\n689 |                 D1Service::new(&Env::default(), /* services::core::infrastructure::d1::D1ServiceConfig */).unwrap(),\n    |                                               +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "associated function defined here",
          "rendered": null,
          "spans": [
            {
              "byte_end": 1202,
              "byte_start": 1179,
              "column_end": 56,
              "column_start": 33,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/d1.rs",
              "is_primary": false,
              "label": "",
              "line_end": 42,
              "line_start": 42,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 56,
                  "highlight_start": 33,
                  "text": "    pub async fn new(env: &Env, config: D1ServiceConfig) -> ArbitrageResult<Self> {"
                }
              ]
            },
            {
              "byte_end": 1167,
              "byte_start": 1164,
              "column_end": 21,
              "column_start": 18,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 42,
              "line_start": 42,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 21,
                  "highlight_start": 18,
                  "text": "    pub async fn new(env: &Env, config: D1ServiceConfig) -> ArbitrageResult<Self> {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "provide the argument",
          "rendered": null,
          "spans": [
            {
              "byte_end": 24290,
              "byte_start": 24273,
              "column_end": 48,
              "column_start": 31,
              "expansion": null,
              "file_name": "src/services/core/user/user_exchange_api.rs",
              "is_primary": true,
              "label": null,
              "line_end": 689,
              "line_start": 689,
              "suggested_replacement": "(&Env::default(), /* services::core::infrastructure::d1::D1ServiceConfig */)",
              "suggestion_applicability": "HasPlaceholders",
              "text": [
                {
                  "highlight_end": 48,
                  "highlight_start": 31,
                  "text": "                D1Service::new(&Env::default()).unwrap(),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0061",
        "explanation": "An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"
      },
      "level": "error",
      "message": "this function takes 2 arguments but 1 argument was supplied",
      "spans": [
        {
          "byte_end": 24290,
          "byte_start": 24273,
          "column_end": 48,
          "column_start": 31,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": false,
          "label": "argument #2 of type `services::core::infrastructure::d1::D1ServiceConfig` is missing",
          "line_end": 689,
          "line_start": 689,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 48,
              "highlight_start": 31,
              "text": "                D1Service::new(&Env::default()).unwrap(),"
            }
          ]
        },
        {
          "byte_end": 24273,
          "byte_start": 24259,
          "column_end": 31,
          "column_start": 17,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": null,
          "line_end": 689,
          "line_start": 689,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 31,
              "highlight_start": 17,
              "text": "                D1Service::new(&Env::default()).unwrap(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `unwrap` found for opaque type `impl Future<Output = ...>` in the current scope\n   --> src/services/core/user/user_exchange_api.rs:689:49\n    |\n689 | ...::default()).unwrap(),\n    |                 ^^^^^^ method not found in `impl Future<Output = ...>`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `unwrap` found for opaque type `impl Future<Output = ...>` in the current scope",
      "spans": [
        {
          "byte_end": 24297,
          "byte_start": 24291,
          "column_end": 55,
          "column_start": 49,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": "method not found in `impl Future<Output = ...>`",
          "line_end": 689,
          "line_start": 689,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 55,
              "highlight_start": 49,
              "text": "                D1Service::new(&Env::default()).unwrap(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0061]: this function takes 3 arguments but 1 argument was supplied\n   --> src/services/core/user/user_exchange_api.rs:688:22\n    |\n688 |               Arc::new(UserProfileService::new(\n    |  ______________________^^^^^^^^^^^^^^^^^^^^^^^-\n689 | |                 D1Service::new(&Env::default())....\n690 | |             )),\n    | |_____________- two arguments of type `services::core::infrastructure::database_repositories::database_manager::DatabaseManager` and `std::string::String` are missing\n    |\nnote: associated function defined here\n   --> src/services/core/user/user_profile.rs:29:12\n    |\n29  | ...fn new(kv_store: KvStore, d1_service: DatabaseManager, encryption_key: String) -...\n    |       ^^^                    ---------------------------  ----------------------\nhelp: provide the arguments\n    |\n688 -             Arc::new(UserProfileService::new(\n689 -                 D1Service::new(&Env::default()).unwrap(),\n690 -             )),\n688 +             Arc::new(UserProfileService::new(D1Service::new(&Env::default()).unwrap(), /* services::core::infrastructure::database_repositories::database_manager::DatabaseManager */, /* std::string::String */)),\n    |\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "associated function defined here",
          "rendered": null,
          "spans": [
            {
              "byte_end": 1179,
              "byte_start": 1152,
              "column_end": 62,
              "column_start": 35,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": false,
              "label": "",
              "line_end": 29,
              "line_start": 29,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 35,
                  "text": "    pub fn new(kv_store: KvStore, d1_service: DatabaseManager, encryption_key: String) -> Self {"
                }
              ]
            },
            {
              "byte_end": 1203,
              "byte_start": 1181,
              "column_end": 86,
              "column_start": 64,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": false,
              "label": "",
              "line_end": 29,
              "line_start": 29,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 86,
                  "highlight_start": 64,
                  "text": "    pub fn new(kv_store: KvStore, d1_service: DatabaseManager, encryption_key: String) -> Self {"
                }
              ]
            },
            {
              "byte_end": 1132,
              "byte_start": 1129,
              "column_end": 15,
              "column_start": 12,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 29,
              "line_start": 29,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 15,
                  "highlight_start": 12,
                  "text": "    pub fn new(kv_store: KvStore, d1_service: DatabaseManager, encryption_key: String) -> Self {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "provide the arguments",
          "rendered": null,
          "spans": [
            {
              "byte_end": 24314,
              "byte_start": 24241,
              "column_end": 14,
              "column_start": 45,
              "expansion": null,
              "file_name": "src/services/core/user/user_exchange_api.rs",
              "is_primary": true,
              "label": null,
              "line_end": 690,
              "line_start": 688,
              "suggested_replacement": "(D1Service::new(&Env::default()).unwrap(), /* services::core::infrastructure::database_repositories::database_manager::DatabaseManager */, /* std::string::String */)",
              "suggestion_applicability": "HasPlaceholders",
              "text": [
                {
                  "highlight_end": 46,
                  "highlight_start": 45,
                  "text": "            Arc::new(UserProfileService::new("
                },
                {
                  "highlight_end": 58,
                  "highlight_start": 1,
                  "text": "                D1Service::new(&Env::default()).unwrap(),"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            )),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0061",
        "explanation": "An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"
      },
      "level": "error",
      "message": "this function takes 3 arguments but 1 argument was supplied",
      "spans": [
        {
          "byte_end": 24314,
          "byte_start": 24241,
          "column_end": 14,
          "column_start": 45,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": false,
          "label": "two arguments of type `services::core::infrastructure::database_repositories::database_manager::DatabaseManager` and `std::string::String` are missing",
          "line_end": 690,
          "line_start": 688,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 46,
              "highlight_start": 45,
              "text": "            Arc::new(UserProfileService::new("
            },
            {
              "highlight_end": 58,
              "highlight_start": 1,
              "text": "                D1Service::new(&Env::default()).unwrap(),"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            )),"
            }
          ]
        },
        {
          "byte_end": 24241,
          "byte_start": 24218,
          "column_end": 45,
          "column_start": 22,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": null,
          "line_end": 688,
          "line_start": 688,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 45,
              "highlight_start": 22,
              "text": "            Arc::new(UserProfileService::new("
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `default` found for struct `worker::Env` in the current scope\n   --> src/services/core/user/user_exchange_api.rs:691:49\n    |\n691 | ...e::new(&Env::default()).unwrap()),\n    |                 ^^^^^^^ function or associated item not found in `Env`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `default` found for struct `worker::Env` in the current scope",
      "spans": [
        {
          "byte_end": 24372,
          "byte_start": 24365,
          "column_end": 56,
          "column_start": 49,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": "function or associated item not found in `Env`",
          "line_end": 691,
          "line_start": 691,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 56,
              "highlight_start": 49,
              "text": "            Arc::new(ExchangeService::new(&Env::default()).unwrap()),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `default` found for struct `worker::Env` in the current scope\n   --> src/services/core/user/user_exchange_api.rs:692:43\n    |\n692 | ...e::new(&Env::default()).unwrap()),\n    |                 ^^^^^^^ function or associated item not found in `Env`\n\n",
      "$message_type": "diagnostic",
      "children": [],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `default` found for struct `worker::Env` in the current scope",
      "spans": [
        {
          "byte_end": 24436,
          "byte_start": 24429,
          "column_end": 50,
          "column_start": 43,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": "function or associated item not found in `Env`",
          "line_end": 692,
          "line_start": 692,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 50,
              "highlight_start": 43,
              "text": "            Arc::new(D1Service::new(&Env::default()).unwrap()),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n   --> src/services/core/user/user_exchange_api.rs:692:22\n    |\n692 | ...ew(D1Service::new(&Env::default()).unwr...\n    |       ^^^^^^^^^^^^^^----------------- argument #2 of type `services::core::infrastructure::d1::D1ServiceConfig` is missing\n    |\nnote: associated function defined here\n   --> src/services/core/infrastructure/d1.rs:42:18\n    |\n42  | ...fn new(env: &Env, config: D1ServiceConfig) -...\n    |       ^^^            -----------------------\nhelp: provide the argument\n    |\n692 |             Arc::new(D1Service::new(&Env::default(), /* services::core::infrastructure::d1::D1ServiceConfig */).unwrap()),\n    |                                                    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "associated function defined here",
          "rendered": null,
          "spans": [
            {
              "byte_end": 1202,
              "byte_start": 1179,
              "column_end": 56,
              "column_start": 33,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/d1.rs",
              "is_primary": false,
              "label": "",
              "line_end": 42,
              "line_start": 42,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 56,
                  "highlight_start": 33,
                  "text": "    pub async fn new(env: &Env, config: D1ServiceConfig) -> ArbitrageResult<Self> {"
                }
              ]
            },
            {
              "byte_end": 1167,
              "byte_start": 1164,
              "column_end": 21,
              "column_start": 18,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 42,
              "line_start": 42,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 21,
                  "highlight_start": 18,
                  "text": "    pub async fn new(env: &Env, config: D1ServiceConfig) -> ArbitrageResult<Self> {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "provide the argument",
          "rendered": null,
          "spans": [
            {
              "byte_end": 24439,
              "byte_start": 24422,
              "column_end": 53,
              "column_start": 36,
              "expansion": null,
              "file_name": "src/services/core/user/user_exchange_api.rs",
              "is_primary": true,
              "label": null,
              "line_end": 692,
              "line_start": 692,
              "suggested_replacement": "(&Env::default(), /* services::core::infrastructure::d1::D1ServiceConfig */)",
              "suggestion_applicability": "HasPlaceholders",
              "text": [
                {
                  "highlight_end": 53,
                  "highlight_start": 36,
                  "text": "            Arc::new(D1Service::new(&Env::default()).unwrap()),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0061",
        "explanation": "An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"
      },
      "level": "error",
      "message": "this function takes 2 arguments but 1 argument was supplied",
      "spans": [
        {
          "byte_end": 24439,
          "byte_start": 24422,
          "column_end": 53,
          "column_start": 36,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": false,
          "label": "argument #2 of type `services::core::infrastructure::d1::D1ServiceConfig` is missing",
          "line_end": 692,
          "line_start": 692,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 53,
              "highlight_start": 36,
              "text": "            Arc::new(D1Service::new(&Env::default()).unwrap()),"
            }
          ]
        },
        {
          "byte_end": 24422,
          "byte_start": 24408,
          "column_end": 36,
          "column_start": 22,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": null,
          "line_end": 692,
          "line_start": 692,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 36,
              "highlight_start": 22,
              "text": "            Arc::new(D1Service::new(&Env::default()).unwrap()),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no method named `unwrap` found for opaque type `impl Future<Output = ...>` in the current scope\n   --> src/services/core/user/user_exchange_api.rs:692:54\n    |\n692 | ...::default()).unwrap()),\n    |                 ^^^^^^ method not found in `impl Future<Output = ...>`\n    |\nhelp: consider `await`ing on the `Future` and calling the method on its `Output`\n    |\n692 |             Arc::new(D1Service::new(&Env::default()).await.unwrap()),\n    |                                                      ++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider `await`ing on the `Future` and calling the method on its `Output`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 24440,
              "byte_start": 24440,
              "column_end": 54,
              "column_start": 54,
              "expansion": null,
              "file_name": "src/services/core/user/user_exchange_api.rs",
              "is_primary": true,
              "label": null,
              "line_end": 692,
              "line_start": 692,
              "suggested_replacement": "await.",
              "suggestion_applicability": "MaybeIncorrect",
              "text": [
                {
                  "highlight_end": 54,
                  "highlight_start": 54,
                  "text": "            Arc::new(D1Service::new(&Env::default()).unwrap()),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no method named `unwrap` found for opaque type `impl Future<Output = ...>` in the current scope",
      "spans": [
        {
          "byte_end": 24446,
          "byte_start": 24440,
          "column_end": 60,
          "column_start": 54,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": "method not found in `impl Future<Output = ...>`",
          "line_end": 692,
          "line_start": 692,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 60,
              "highlight_start": 54,
              "text": "            Arc::new(D1Service::new(&Env::default()).unwrap()),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0599]: no function or associated item named `default` found for struct `worker::worker_kv::KvStore` in the current scope\n   --> src/services/core/user/user_exchange_api.rs:693:22\n    |\n693 |             KvStore::default(),\n    |                      ^^^^^^^ function or associated item not found in `KvStore`\n    |\nnote: if you're trying to build a new `worker::worker_kv::KvStore` consider using one of the following associated functions:\n      worker::worker_kv::KvStore::create\n      worker::worker_kv::KvStore::from_this\n   --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-kv-0.7.0/src/lib.rs:46:5\n    |\n46  |     pub fn create(binding: &str) -> Result<Self, KvError> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n66  |     pub fn from_this(this: &JsValue, binding: &str) -> Result<Self, KvError> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "if you're trying to build a new `worker::worker_kv::KvStore` consider using one of the following associated functions:\nworker::worker_kv::KvStore::create\nworker::worker_kv::KvStore::from_this",
          "rendered": null,
          "spans": [
            {
              "byte_end": 1522,
              "byte_start": 1469,
              "column_end": 58,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-kv-0.7.0/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 46,
              "line_start": 46,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 58,
                  "highlight_start": 5,
                  "text": "    pub fn create(binding: &str) -> Result<Self, KvError> {"
                }
              ]
            },
            {
              "byte_end": 2363,
              "byte_start": 2291,
              "column_end": 77,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-kv-0.7.0/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 66,
              "line_start": 66,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 77,
                  "highlight_start": 5,
                  "text": "    pub fn from_this(this: &JsValue, binding: &str) -> Result<Self, KvError> {"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0599",
        "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
      },
      "level": "error",
      "message": "no function or associated item named `default` found for struct `worker::worker_kv::KvStore` in the current scope",
      "spans": [
        {
          "byte_end": 24479,
          "byte_start": 24472,
          "column_end": 29,
          "column_start": 22,
          "expansion": null,
          "file_name": "src/services/core/user/user_exchange_api.rs",
          "is_primary": true,
          "label": "function or associated item not found in `KvStore`",
          "line_end": 693,
          "line_start": 693,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 29,
              "highlight_start": 22,
              "text": "            KvStore::default(),"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0308]: mismatched types\n   --> src/utils/error.rs:450:54\n    |\n450 | ... = KvOperationError::Serialization(\"failed to serialize\".to_string());\n    |       ------------------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Error`, found `String`\n    |       |\n    |       arguments to this enum variant are incorrect\n    |\nnote: tuple variant defined here\n   --> src/services/core/trading/kv_operations.rs:8:5\n    |\n8   |     Serialization(#[from] serde_json::Error),\n    |     ^^^^^^^^^^^^^\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "tuple variant defined here",
          "rendered": null,
          "spans": [
            {
              "byte_end": 209,
              "byte_start": 196,
              "column_end": 18,
              "column_start": 5,
              "expansion": null,
              "file_name": "src/services/core/trading/kv_operations.rs",
              "is_primary": true,
              "label": null,
              "line_end": 8,
              "line_start": 8,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 18,
                  "highlight_start": 5,
                  "text": "    Serialization(#[from] serde_json::Error),"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0308",
        "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
      },
      "level": "error",
      "message": "mismatched types",
      "spans": [
        {
          "byte_end": 14762,
          "byte_start": 14729,
          "column_end": 87,
          "column_start": 54,
          "expansion": null,
          "file_name": "src/utils/error.rs",
          "is_primary": true,
          "label": "expected `Error`, found `String`",
          "line_end": 450,
          "line_start": 450,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 87,
              "highlight_start": 54,
              "text": "        let kv_err = KvOperationError::Serialization(\"failed to serialize\".to_string());"
            }
          ]
        },
        {
          "byte_end": 14728,
          "byte_start": 14697,
          "column_end": 53,
          "column_start": 22,
          "expansion": null,
          "file_name": "src/utils/error.rs",
          "is_primary": false,
          "label": "arguments to this enum variant are incorrect",
          "line_end": 450,
          "line_start": 450,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 53,
              "highlight_start": 22,
              "text": "        let kv_err = KvOperationError::Serialization(\"failed to serialize\".to_string());"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error: future cannot be sent between threads safely\n  --> src/test_utils/mock_kv_store.rs:61:84\n   |\n61 |       async fn put<T: Serialize + Send>(&self, key: &str, value: &T) -> KvResult<()> {\n   |  ____________________________________________________________________________________^\n62 | |         if let Some(ref error_type) = self.error_simulation {\n63 | |             return match error_type.as_str() {\n64 | |                 \"kv_put_failed\" => Err(KvOperationError::Storage(\n...  |\n75 | |         Ok(())\n76 | |     }\n   | |_____^ future created by async block is not `Send`\n   |\nnote: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n  --> src/test_utils/mock_kv_store.rs:72:45\n   |\n72 | ...n::to_string(value).map_err(KvOperationE...\n   |                 ^^^^^ has type `&T` which is not `Send`, because `T` is not `Sync`\n   = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n   = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-11364306929982277186.txt'\n   = note: consider using `--verbose` to print the full type name to the console\nhelp: consider further restricting type parameter `T` with trait `Sync`\n   |\n61 |     async fn put<T: Serialize + Send + std::marker::Sync>(&self, key: &str, value: &T) -> KvResult<()> {\n   |                                      +++++++++++++++++++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2743,
              "byte_start": 2738,
              "column_end": 50,
              "column_start": 45,
              "expansion": null,
              "file_name": "src/test_utils/mock_kv_store.rs",
              "is_primary": true,
              "label": "has type `&T` which is not `Send`, because `T` is not `Sync`",
              "line_end": 72,
              "line_start": 72,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 50,
                  "highlight_start": 45,
                  "text": "        let s_value = serde_json::to_string(value).map_err(KvOperationError::Serialization)?;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-11364306929982277186.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider further restricting type parameter `T` with trait `Sync`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2129,
              "byte_start": 2129,
              "column_end": 37,
              "column_start": 37,
              "expansion": null,
              "file_name": "src/test_utils/mock_kv_store.rs",
              "is_primary": true,
              "label": null,
              "line_end": 61,
              "line_start": 61,
              "suggested_replacement": " + std::marker::Sync",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 37,
                  "highlight_start": 37,
                  "text": "    async fn put<T: Serialize + Send>(&self, key: &str, value: &T) -> KvResult<()> {"
                }
              ]
            }
          ]
        }
      ],
      "code": null,
      "level": "error",
      "message": "future cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 2910,
          "byte_start": 2176,
          "column_end": 6,
          "column_start": 84,
          "expansion": null,
          "file_name": "src/test_utils/mock_kv_store.rs",
          "is_primary": true,
          "label": "future created by async block is not `Send`",
          "line_end": 76,
          "line_start": 61,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 85,
              "highlight_start": 84,
              "text": "    async fn put<T: Serialize + Send>(&self, key: &str, value: &T) -> KvResult<()> {"
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "        if let Some(ref error_type) = self.error_simulation {"
            },
            {
              "highlight_end": 47,
              "highlight_start": 1,
              "text": "            return match error_type.as_str() {"
            },
            {
              "highlight_end": 66,
              "highlight_start": 1,
              "text": "                \"kv_put_failed\" => Err(KvOperationError::Storage("
            },
            {
              "highlight_end": 59,
              "highlight_start": 1,
              "text": "                    \"KV put operation failed\".to_string(),"
            },
            {
              "highlight_end": 20,
              "highlight_start": 1,
              "text": "                )),"
            },
            {
              "highlight_end": 99,
              "highlight_start": 1,
              "text": "                \"rate_limit\" => Err(KvOperationError::Storage(\"Rate limit exceeded\".to_string())),"
            },
            {
              "highlight_end": 85,
              "highlight_start": 1,
              "text": "                _ => Err(KvOperationError::Storage(\"Unknown KV error\".to_string())),"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            };"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 53,
              "highlight_start": 1,
              "text": "        let mut data_guard = self.data.lock().await;"
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "        let s_value = serde_json::to_string(value).map_err(KvOperationError::Serialization)?;"
            },
            {
              "highlight_end": 53,
              "highlight_start": 1,
              "text": "        data_guard.insert(key.to_string(), s_value);"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "        *self.operation_count.lock().await += 1;"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0596]: cannot borrow `breaker` as mutable, as it is not declared as mutable\n   --> src/services/core/infrastructure/shared_types.rs:385:17\n    |\n385 |         assert!(breaker.can_execute());\n    |                 ^^^^^^^ cannot borrow as mutable\n    |\nhelp: consider changing this to be mutable\n    |\n382 |         let mut breaker = CircuitBreaker::default();\n    |             +++\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "consider changing this to be mutable",
          "rendered": null,
          "spans": [
            {
              "byte_end": 11015,
              "byte_start": 11015,
              "column_end": 13,
              "column_start": 13,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/shared_types.rs",
              "is_primary": true,
              "label": null,
              "line_end": 382,
              "line_start": 382,
              "suggested_replacement": "mut ",
              "suggestion_applicability": "MachineApplicable",
              "text": [
                {
                  "highlight_end": 13,
                  "highlight_start": 13,
                  "text": "        let breaker = CircuitBreaker::default();"
                }
              ]
            }
          ]
        }
      ],
      "code": {
        "code": "E0596",
        "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
      },
      "level": "error",
      "message": "cannot borrow `breaker` as mutable, as it is not declared as mutable",
      "spans": [
        {
          "byte_end": 11181,
          "byte_start": 11174,
          "column_end": 24,
          "column_start": 17,
          "expansion": null,
          "file_name": "src/services/core/infrastructure/shared_types.rs",
          "is_primary": true,
          "label": "cannot borrow as mutable",
          "line_end": 385,
          "line_start": 385,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 24,
              "highlight_start": 17,
              "text": "        assert!(breaker.can_execute());"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error: future cannot be sent between threads safely\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |_____^ future created by async block is not `Send`\n     |\n     = help: within `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`\nnote: future is not `Send` as this value is used across an await\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1256:18\n     |\n1251 |                 .bind(&[user_id.into()])\n     |                        ---------------- has type `[worker::wasm_bindgen::JsValue; 1]` which is not `Send`\n...\n1256 |                 .await\n     |                  ^^^^^ await occurs here, with `[user_id.into()]` maybe used later\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8754338815696579657.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "future is not `Send` as this value is used across an await",
          "rendered": null,
          "spans": [
            {
              "byte_end": 45114,
              "byte_start": 45109,
              "column_end": 23,
              "column_start": 18,
              "expansion": {
                "def_site_span": {
                  "byte_end": 0,
                  "byte_start": 0,
                  "column_end": 1,
                  "column_start": 1,
                  "expansion": null,
                  "file_name": "src/lib.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1,
                  "line_start": 1,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": []
                },
                "macro_decl_name": "desugaring of `await` expression",
                "span": {
                  "byte_end": 45114,
                  "byte_start": 45109,
                  "column_end": 23,
                  "column_start": 18,
                  "expansion": null,
                  "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1256,
                  "line_start": 1256,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": [
                    {
                      "highlight_end": 23,
                      "highlight_start": 18,
                      "text": "                .await"
                    }
                  ]
                }
              },
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": "await occurs here, with `[user_id.into()]` maybe used later",
              "line_end": 1256,
              "line_start": 1256,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 18,
                  "text": "                .await"
                }
              ]
            },
            {
              "byte_end": 44876,
              "byte_start": 44860,
              "column_end": 40,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": false,
              "label": "has type `[worker::wasm_bindgen::JsValue; 1]` which is not `Send`",
              "line_end": 1251,
              "line_start": 1251,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 40,
                  "highlight_start": 24,
                  "text": "                .bind(&[user_id.into()])"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-8754338815696579657.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": null,
      "level": "error",
      "message": "future cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 21116,
          "byte_start": 20740,
          "column_end": 6,
          "column_start": 85,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "future created by async block is not `Send`",
          "line_end": 571,
          "line_start": 560,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 85,
              "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
            },
            {
              "highlight_end": 82,
              "highlight_start": 1,
              "text": "        // Call the actual implementation method that returns Option<UserProfile>"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "        self.d1_service"
            },
            {
              "highlight_end": 39,
              "highlight_start": 1,
              "text": "            .get_user_profile(user_id)"
            },
            {
              "highlight_end": 20,
              "highlight_start": 1,
              "text": "            .await?"
            },
            {
              "highlight_end": 29,
              "highlight_start": 1,
              "text": "            .ok_or_else(|| {"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                ArbitrageError::not_found(format!("
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "                    \"User profile not found for user_id: {}\","
            },
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "                    user_id"
            },
            {
              "highlight_end": 19,
              "highlight_start": 1,
              "text": "                ))"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            })"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `Rc<RefCell<Inner>>` cannot be sent between threads safely\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |     ^\n     | |     |\n     | |_____`Rc<RefCell<Inner>>` cannot be sent between threads safely\n     |       within this `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`\n     |\n     = help: within `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`\nnote: required because it appears within the type `JsFuture`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12\n     |\n110  | pub struct JsFuture {\n     |            ^^^^^^^^\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:286:5\n     |\n286  | /     {\n287  | |         let result = JsFuture::from(sel...\n288  | |         let js_value = cast_to_d1_error...\n289  | |         let value = serde_wasm_bindgen:...\n290  | |         Ok(value)\n291  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1241:61\n     |\n1241 |       ) -> ArbitrageResult<Option<crate::types::UserProfile>> {\n     |  _____________________________________________________________^\n1242 | |         if let Some(ref user_repo) = self.user_repository {\n1243 | |             user_repo.get_user_profile(user_id).await\n1244 | |         } else {\n...    |\n1275 | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-14964643221528206232.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `JsFuture`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3518,
              "byte_start": 3510,
              "column_end": 20,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 110,
              "line_start": 110,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 12,
                  "text": "pub struct JsFuture {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9280,
              "byte_start": 9074,
              "column_end": 6,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 291,
              "line_start": 286,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 5,
                  "text": "    {"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.first(col_name)?).await;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "        let js_value = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "        let value = serde_wasm_bindgen::from_value(js_value)?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "        Ok(value)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 45829,
              "byte_start": 44492,
              "column_end": 6,
              "column_start": 61,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1275,
              "line_start": 1241,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 61,
                  "text": "    ) -> ArbitrageResult<Option<crate::types::UserProfile>> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 54,
                  "highlight_start": 1,
                  "text": "            user_repo.get_user_profile(user_id).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 47,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database query"
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "            let stmt = self"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                .db"
                },
                {
                  "highlight_end": 86,
                  "highlight_start": 1,
                  "text": "                .prepare(\"SELECT profile_data FROM user_profiles WHERE user_id = ?\");"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 30,
                  "highlight_start": 1,
                  "text": "            let result = stmt"
                },
                {
                  "highlight_end": 41,
                  "highlight_start": 1,
                  "text": "                .bind(&[user_id.into()])"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 96,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                })?"
                },
                {
                  "highlight_end": 67,
                  "highlight_start": 1,
                  "text": "                .first::<HashMap<String, serde_json::Value>>(None)"
                },
                {
                  "highlight_end": 23,
                  "highlight_start": 1,
                  "text": "                .await"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "                })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            if let Some(row) = result {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "                if let Some(profile_data) = row.get(\"profile_data\") {"
                },
                {
                  "highlight_end": 61,
                  "highlight_start": 1,
                  "text": "                    let profile: crate::types::UserProfile ="
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "                        serde_json::from_value(profile_data.clone()).map_err(|e| {"
                },
                {
                  "highlight_end": 99,
                  "highlight_start": 1,
                  "text": "                            ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                        })?;"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "                    Ok(Some(profile))"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                } else {"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                    Ok(None)"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "                }"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            } else {"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                Ok(None)"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            }"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 21116,
              "byte_start": 20740,
              "column_end": 6,
              "column_start": 85,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 571,
              "line_start": 560,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 86,
                  "highlight_start": 85,
                  "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
                },
                {
                  "highlight_end": 82,
                  "highlight_start": 1,
                  "text": "        // Call the actual implementation method that returns Option<UserProfile>"
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "        self.d1_service"
                },
                {
                  "highlight_end": 39,
                  "highlight_start": 1,
                  "text": "            .get_user_profile(user_id)"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "            .await?"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "            .ok_or_else(|| {"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::not_found(format!("
                },
                {
                  "highlight_end": 62,
                  "highlight_start": 1,
                  "text": "                    \"User profile not found for user_id: {}\","
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "                    user_id"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "                ))"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            })"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-14964643221528206232.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 21116,
          "byte_start": 20740,
          "column_end": 6,
          "column_start": 85,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
          "line_end": 571,
          "line_start": 560,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 85,
              "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
            },
            {
              "highlight_end": 82,
              "highlight_start": 1,
              "text": "        // Call the actual implementation method that returns Option<UserProfile>"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "        self.d1_service"
            },
            {
              "highlight_end": 39,
              "highlight_start": 1,
              "text": "            .get_user_profile(user_id)"
            },
            {
              "highlight_end": 20,
              "highlight_start": 1,
              "text": "            .await?"
            },
            {
              "highlight_end": 29,
              "highlight_start": 1,
              "text": "            .ok_or_else(|| {"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                ArbitrageError::not_found(format!("
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "                    \"User profile not found for user_id: {}\","
            },
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "                    user_id"
            },
            {
              "highlight_end": 19,
              "highlight_start": 1,
              "text": "                ))"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            })"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        },
        {
          "byte_end": 21116,
          "byte_start": 20740,
          "column_end": 6,
          "column_start": 85,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "within this `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`",
          "line_end": 571,
          "line_start": 560,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 85,
              "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
            },
            {
              "highlight_end": 82,
              "highlight_start": 1,
              "text": "        // Call the actual implementation method that returns Option<UserProfile>"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "        self.d1_service"
            },
            {
              "highlight_end": 39,
              "highlight_start": 1,
              "text": "            .get_user_profile(user_id)"
            },
            {
              "highlight_end": 20,
              "highlight_start": 1,
              "text": "            .await?"
            },
            {
              "highlight_end": 29,
              "highlight_start": 1,
              "text": "            .ok_or_else(|| {"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                ArbitrageError::not_found(format!("
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "                    \"User profile not found for user_id: {}\","
            },
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "                    user_id"
            },
            {
              "highlight_end": 19,
              "highlight_start": 1,
              "text": "                ))"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            })"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `*mut u8` cannot be shared between threads safely\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |_____^ `*mut u8` cannot be shared between threads safely\n     |\n     = help: within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`\nnote: required because it appears within the type `std::marker::PhantomData<*mut u8>`\n    --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs:777:12\n     |\n777  | pub struct PhantomData<T: ?Sized>;\n     |            ^^^^^^^^^^^\nnote: required because it appears within the type `worker::wasm_bindgen::JsValue`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs:135:12\n     |\n135  | pub struct JsValue {\n     |            ^^^^^^^\nnote: required because it appears within the type `worker::js_sys::Object`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs:3445:14\n     |\n3445 |     pub type Object;\n     |              ^^^^^^\nnote: required because it appears within the type `D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs:59:14\n     |\n59   |     pub type D1PreparedStatement;\n     |              ^^^^^^^^^^^^^^^^^^^\nnote: required because it appears within the type `worker::D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:224:12\n     |\n224  | pub struct D1PreparedStatement(D1Prepared...\n     |            ^^^^^^^^^^^^^^^^^^^\n     = note: required for `&worker::D1PreparedStatement` to implement `std::marker::Send`\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:286:5\n     |\n286  | /     {\n287  | |         let result = JsFuture::from(sel...\n288  | |         let js_value = cast_to_d1_error...\n289  | |         let value = serde_wasm_bindgen:...\n290  | |         Ok(value)\n291  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1241:61\n     |\n1241 |       ) -> ArbitrageResult<Option<crate::types::UserProfile>> {\n     |  _____________________________________________________________^\n1242 | |         if let Some(ref user_repo) = self.user_repository {\n1243 | |             user_repo.get_user_profile(user_id).await\n1244 | |         } else {\n...    |\n1275 | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-18098179023242418741.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `std::marker::PhantomData<*mut u8>`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29598,
              "byte_start": 29587,
              "column_end": 23,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs",
              "is_primary": true,
              "label": null,
              "line_end": 777,
              "line_start": 777,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 12,
                  "text": "pub struct PhantomData<T: ?Sized>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::wasm_bindgen::JsValue`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4151,
              "byte_start": 4144,
              "column_end": 19,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 135,
              "line_start": 135,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 12,
                  "text": "pub struct JsValue {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::js_sys::Object`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 153473,
              "byte_start": 153467,
              "column_end": 20,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3445,
              "line_start": 3445,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 14,
                  "text": "    pub type Object;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2093,
              "byte_start": 2074,
              "column_end": 33,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 59,
              "line_start": 59,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 33,
                  "highlight_start": 14,
                  "text": "    pub type D1PreparedStatement;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 6859,
              "byte_start": 6840,
              "column_end": 31,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 224,
              "line_start": 224,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 12,
                  "text": "pub struct D1PreparedStatement(D1PreparedStatementSys);"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for `&worker::D1PreparedStatement` to implement `std::marker::Send`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9280,
              "byte_start": 9074,
              "column_end": 6,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 291,
              "line_start": 286,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 6,
                  "highlight_start": 5,
                  "text": "    {"
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.first(col_name)?).await;"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        let js_value = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 63,
                  "highlight_start": 1,
                  "text": "        let value = serde_wasm_bindgen::from_value(js_value)?;"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "        Ok(value)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 45829,
              "byte_start": 44492,
              "column_end": 6,
              "column_start": 61,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1275,
              "line_start": 1241,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 61,
                  "text": "    ) -> ArbitrageResult<Option<crate::types::UserProfile>> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 54,
                  "highlight_start": 1,
                  "text": "            user_repo.get_user_profile(user_id).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 47,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database query"
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "            let stmt = self"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                .db"
                },
                {
                  "highlight_end": 86,
                  "highlight_start": 1,
                  "text": "                .prepare(\"SELECT profile_data FROM user_profiles WHERE user_id = ?\");"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 30,
                  "highlight_start": 1,
                  "text": "            let result = stmt"
                },
                {
                  "highlight_end": 41,
                  "highlight_start": 1,
                  "text": "                .bind(&[user_id.into()])"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 96,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                })?"
                },
                {
                  "highlight_end": 67,
                  "highlight_start": 1,
                  "text": "                .first::<HashMap<String, serde_json::Value>>(None)"
                },
                {
                  "highlight_end": 23,
                  "highlight_start": 1,
                  "text": "                .await"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "                })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            if let Some(row) = result {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "                if let Some(profile_data) = row.get(\"profile_data\") {"
                },
                {
                  "highlight_end": 61,
                  "highlight_start": 1,
                  "text": "                    let profile: crate::types::UserProfile ="
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "                        serde_json::from_value(profile_data.clone()).map_err(|e| {"
                },
                {
                  "highlight_end": 99,
                  "highlight_start": 1,
                  "text": "                            ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                        })?;"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "                    Ok(Some(profile))"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                } else {"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                    Ok(None)"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "                }"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            } else {"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                Ok(None)"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            }"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 21116,
              "byte_start": 20740,
              "column_end": 6,
              "column_start": 85,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 571,
              "line_start": 560,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 86,
                  "highlight_start": 85,
                  "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
                },
                {
                  "highlight_end": 82,
                  "highlight_start": 1,
                  "text": "        // Call the actual implementation method that returns Option<UserProfile>"
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "        self.d1_service"
                },
                {
                  "highlight_end": 39,
                  "highlight_start": 1,
                  "text": "            .get_user_profile(user_id)"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "            .await?"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "            .ok_or_else(|| {"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::not_found(format!("
                },
                {
                  "highlight_end": 62,
                  "highlight_start": 1,
                  "text": "                    \"User profile not found for user_id: {}\","
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "                    user_id"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "                ))"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            })"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-18098179023242418741.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`*mut u8` cannot be shared between threads safely",
      "spans": [
        {
          "byte_end": 21116,
          "byte_start": 20740,
          "column_end": 6,
          "column_start": 85,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`*mut u8` cannot be shared between threads safely",
          "line_end": 571,
          "line_start": 560,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 85,
              "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
            },
            {
              "highlight_end": 82,
              "highlight_start": 1,
              "text": "        // Call the actual implementation method that returns Option<UserProfile>"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "        self.d1_service"
            },
            {
              "highlight_end": 39,
              "highlight_start": 1,
              "text": "            .get_user_profile(user_id)"
            },
            {
              "highlight_end": 20,
              "highlight_start": 1,
              "text": "            .await?"
            },
            {
              "highlight_end": 29,
              "highlight_start": 1,
              "text": "            .ok_or_else(|| {"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                ArbitrageError::not_found(format!("
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "                    \"User profile not found for user_id: {}\","
            },
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "                    user_id"
            },
            {
              "highlight_end": 19,
              "highlight_start": 1,
              "text": "                ))"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            })"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error: future cannot be sent between threads safely\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |_____^ future created by async block is not `Send`\n     |\n     = help: within `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`\nnote: future is not `Send` as this value is used across an await\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1296:18\n     |\n1291 | ...  .bind(&[telegram_user_id.into()])\n     |             ------------------------- has type `[worker::wasm_bindgen::JsValue; 1]` which is not `Send`\n...\n1296 | ...  .await\n     |       ^^^^^ await occurs here, with `[telegram_user_id.into()]` maybe used later\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-15631939286534097026.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "future is not `Send` as this value is used across an await",
          "rendered": null,
          "spans": [
            {
              "byte_end": 46675,
              "byte_start": 46670,
              "column_end": 23,
              "column_start": 18,
              "expansion": {
                "def_site_span": {
                  "byte_end": 0,
                  "byte_start": 0,
                  "column_end": 1,
                  "column_start": 1,
                  "expansion": null,
                  "file_name": "src/lib.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1,
                  "line_start": 1,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": []
                },
                "macro_decl_name": "desugaring of `await` expression",
                "span": {
                  "byte_end": 46675,
                  "byte_start": 46670,
                  "column_end": 23,
                  "column_start": 18,
                  "expansion": null,
                  "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1296,
                  "line_start": 1296,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": [
                    {
                      "highlight_end": 23,
                      "highlight_start": 18,
                      "text": "                .await"
                    }
                  ]
                }
              },
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": "await occurs here, with `[telegram_user_id.into()]` maybe used later",
              "line_end": 1296,
              "line_start": 1296,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 18,
                  "text": "                .await"
                }
              ]
            },
            {
              "byte_end": 46437,
              "byte_start": 46412,
              "column_end": 49,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": false,
              "label": "has type `[worker::wasm_bindgen::JsValue; 1]` which is not `Send`",
              "line_end": 1291,
              "line_start": 1291,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 49,
                  "highlight_start": 24,
                  "text": "                .bind(&[telegram_user_id.into()])"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-15631939286534097026.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": null,
      "level": "error",
      "message": "future cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 21951,
          "byte_start": 21204,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "future created by async block is not `Send`",
          "line_end": 590,
          "line_start": 573,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 73,
              "highlight_start": 1,
              "text": "        // This service's create_user_profile has a different signature."
            },
            {
              "highlight_end": 81,
              "highlight_start": 1,
              "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
            },
            {
              "highlight_end": 90,
              "highlight_start": 1,
              "text": "        // This might need further refinement based on how AuthService intends to use it."
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        if profile.telegram_user_id.is_none() {"
            },
            {
              "highlight_end": 57,
              "highlight_start": 1,
              "text": "            return Err(ArbitrageError::validation_error("
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
            },
            {
              "highlight_end": 16,
              "highlight_start": 1,
              "text": "            ));"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 36,
              "highlight_start": 1,
              "text": "        let _created_profile = self"
            },
            {
              "highlight_end": 34,
              "highlight_start": 1,
              "text": "            .create_user_profile("
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_user_id.unwrap(),"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "                profile.invitation_code.clone(),"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_username.clone(),"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            )"
            },
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "            .await?;"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `Rc<RefCell<Inner>>` cannot be sent between threads safely\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |     ^\n     | |     |\n     | |_____`Rc<RefCell<Inner>>` cannot be sent between threads safely\n     |       within this `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`\n     |\n     = help: within `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`\nnote: required because it appears within the type `JsFuture`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12\n     |\n110  | pub struct JsFuture {\n     |            ^^^^^^^^\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:286:5\n     |\n286  | /     {\n287  | |         let result = JsFuture::from(sel...\n288  | |         let js_value = cast_to_d1_error...\n289  | |         let value = serde_wasm_bindgen:...\n290  | |         Ok(value)\n291  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1281:61\n     |\n1281 |       ) -> ArbitrageResult<Option<crate::types::UserProfile>> {\n     |  _____________________________________________________________^\n1282 | |         if let Some(ref user_repo) = self.user_repository {\n1283 | |             user_repo.get_user_by_telegram_id(telegram_user_id)....\n1284 | |         } else {\n...    |\n1315 | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/user/user_profile.rs:43:39\n     |\n43   |       ) -> ArbitrageResult<UserProfile> {\n     |  _______________________________________^\n44   | |         // Validate telegram_user_id is po...\n45   | |         if telegram_user_id <= 0 {\n46   | |             return Err(ArbitrageError::val...\n...    |\n77   | |         Ok(profile)\n78   | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-14964643221528206232.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `JsFuture`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3518,
              "byte_start": 3510,
              "column_end": 20,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 110,
              "line_start": 110,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 12,
                  "text": "pub struct JsFuture {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9280,
              "byte_start": 9074,
              "column_end": 6,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 291,
              "line_start": 286,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 6,
                  "highlight_start": 5,
                  "text": "    {"
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.first(col_name)?).await;"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        let js_value = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 63,
                  "highlight_start": 1,
                  "text": "        let value = serde_wasm_bindgen::from_value(js_value)?;"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "        Ok(value)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 47390,
              "byte_start": 46019,
              "column_end": 6,
              "column_start": 61,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1315,
              "line_start": 1281,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 61,
                  "text": "    ) -> ArbitrageResult<Option<crate::types::UserProfile>> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "            user_repo.get_user_by_telegram_id(telegram_user_id).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 47,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database query"
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "            let stmt = self"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                .db"
                },
                {
                  "highlight_end": 95,
                  "highlight_start": 1,
                  "text": "                .prepare(\"SELECT profile_data FROM user_profiles WHERE telegram_user_id = ?\");"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 30,
                  "highlight_start": 1,
                  "text": "            let result = stmt"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "                .bind(&[telegram_user_id.into()])"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 96,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                })?"
                },
                {
                  "highlight_end": 67,
                  "highlight_start": 1,
                  "text": "                .first::<HashMap<String, serde_json::Value>>(None)"
                },
                {
                  "highlight_end": 23,
                  "highlight_start": 1,
                  "text": "                .await"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "                })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            if let Some(row) = result {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "                if let Some(profile_data) = row.get(\"profile_data\") {"
                },
                {
                  "highlight_end": 61,
                  "highlight_start": 1,
                  "text": "                    let profile: crate::types::UserProfile ="
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "                        serde_json::from_value(profile_data.clone()).map_err(|e| {"
                },
                {
                  "highlight_end": 99,
                  "highlight_start": 1,
                  "text": "                            ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                        })?;"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "                    Ok(Some(profile))"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                } else {"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                    Ok(None)"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "                }"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            } else {"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                Ok(None)"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            }"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2891,
              "byte_start": 1631,
              "column_end": 6,
              "column_start": 39,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 78,
              "line_start": 43,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 40,
                  "highlight_start": 39,
                  "text": "    ) -> ArbitrageResult<UserProfile> {"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "        // Validate telegram_user_id is positive"
                },
                {
                  "highlight_end": 35,
                  "highlight_start": 1,
                  "text": "        if telegram_user_id <= 0 {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 53,
                  "highlight_start": 1,
                  "text": "                \"Telegram user ID must be positive\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 74,
                  "highlight_start": 1,
                  "text": "        // Check if user already exists (check D1 for authoritative data)"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "        if let Some(_existing) = self"
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "            .d1_service"
                },
                {
                  "highlight_end": 55,
                  "highlight_start": 1,
                  "text": "            .get_user_by_telegram_id(telegram_user_id)"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "            .await?"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "                \"User profile already exists for this Telegram ID\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 73,
                  "highlight_start": 1,
                  "text": "        // Validate invitation code if provided (D1 for persistent data)"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        if let Some(ref code) = invitation_code {"
                },
                {
                  "highlight_end": 64,
                  "highlight_start": 1,
                  "text": "            self.validate_and_use_invitation_code(code).await?;"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 85,
                  "highlight_start": 1,
                  "text": "        let mut profile = UserProfile::new(Some(telegram_user_id), invitation_code);"
                },
                {
                  "highlight_end": 55,
                  "highlight_start": 1,
                  "text": "        profile.telegram_username = telegram_username;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 52,
                  "highlight_start": 1,
                  "text": "        // Store profile in D1 (persistent storage)"
                },
                {
                  "highlight_end": 62,
                  "highlight_start": 1,
                  "text": "        self.d1_service.create_user_profile(&profile).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "        // Create user session in KV (fast access)"
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "        let session = UserSession::new(profile.user_id.clone(), telegram_user_id);"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        self.store_user_session(&session).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "        Ok(profile)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 21951,
              "byte_start": 21204,
              "column_end": 6,
              "column_start": 87,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 590,
              "line_start": 573,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 88,
                  "highlight_start": 87,
                  "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 73,
                  "highlight_start": 1,
                  "text": "        // This service's create_user_profile has a different signature."
                },
                {
                  "highlight_end": 81,
                  "highlight_start": 1,
                  "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
                },
                {
                  "highlight_end": 90,
                  "highlight_start": 1,
                  "text": "        // This might need further refinement based on how AuthService intends to use it."
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        if profile.telegram_user_id.is_none() {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "        let _created_profile = self"
                },
                {
                  "highlight_end": 34,
                  "highlight_start": 1,
                  "text": "            .create_user_profile("
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                profile.telegram_user_id.unwrap(),"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "                profile.invitation_code.clone(),"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                profile.telegram_username.clone(),"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            )"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            .await?;"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "        Ok(())"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-14964643221528206232.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 21951,
          "byte_start": 21204,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
          "line_end": 590,
          "line_start": 573,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 73,
              "highlight_start": 1,
              "text": "        // This service's create_user_profile has a different signature."
            },
            {
              "highlight_end": 81,
              "highlight_start": 1,
              "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
            },
            {
              "highlight_end": 90,
              "highlight_start": 1,
              "text": "        // This might need further refinement based on how AuthService intends to use it."
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        if profile.telegram_user_id.is_none() {"
            },
            {
              "highlight_end": 57,
              "highlight_start": 1,
              "text": "            return Err(ArbitrageError::validation_error("
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
            },
            {
              "highlight_end": 16,
              "highlight_start": 1,
              "text": "            ));"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 36,
              "highlight_start": 1,
              "text": "        let _created_profile = self"
            },
            {
              "highlight_end": 34,
              "highlight_start": 1,
              "text": "            .create_user_profile("
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_user_id.unwrap(),"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "                profile.invitation_code.clone(),"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_username.clone(),"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            )"
            },
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "            .await?;"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        },
        {
          "byte_end": 21951,
          "byte_start": 21204,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "within this `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`",
          "line_end": 590,
          "line_start": 573,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 73,
              "highlight_start": 1,
              "text": "        // This service's create_user_profile has a different signature."
            },
            {
              "highlight_end": 81,
              "highlight_start": 1,
              "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
            },
            {
              "highlight_end": 90,
              "highlight_start": 1,
              "text": "        // This might need further refinement based on how AuthService intends to use it."
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        if profile.telegram_user_id.is_none() {"
            },
            {
              "highlight_end": 57,
              "highlight_start": 1,
              "text": "            return Err(ArbitrageError::validation_error("
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
            },
            {
              "highlight_end": 16,
              "highlight_start": 1,
              "text": "            ));"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 36,
              "highlight_start": 1,
              "text": "        let _created_profile = self"
            },
            {
              "highlight_end": 34,
              "highlight_start": 1,
              "text": "            .create_user_profile("
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_user_id.unwrap(),"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "                profile.invitation_code.clone(),"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_username.clone(),"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            )"
            },
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "            .await?;"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `*mut u8` cannot be shared between threads safely\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |_____^ `*mut u8` cannot be shared between threads safely\n     |\n     = help: within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`\nnote: required because it appears within the type `std::marker::PhantomData<*mut u8>`\n    --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs:777:12\n     |\n777  | pub struct PhantomData<T: ?Sized>;\n     |            ^^^^^^^^^^^\nnote: required because it appears within the type `worker::wasm_bindgen::JsValue`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs:135:12\n     |\n135  | pub struct JsValue {\n     |            ^^^^^^^\nnote: required because it appears within the type `worker::js_sys::Object`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs:3445:14\n     |\n3445 |     pub type Object;\n     |              ^^^^^^\nnote: required because it appears within the type `D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs:59:14\n     |\n59   |     pub type D1PreparedStatement;\n     |              ^^^^^^^^^^^^^^^^^^^\nnote: required because it appears within the type `worker::D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:224:12\n     |\n224  | pub struct D1PreparedStatement(D1Prepared...\n     |            ^^^^^^^^^^^^^^^^^^^\n     = note: required for `&worker::D1PreparedStatement` to implement `std::marker::Send`\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:286:5\n     |\n286  | /     {\n287  | |         let result = JsFuture::from(sel...\n288  | |         let js_value = cast_to_d1_error...\n289  | |         let value = serde_wasm_bindgen:...\n290  | |         Ok(value)\n291  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1281:61\n     |\n1281 |       ) -> ArbitrageResult<Option<crate::types::UserProfile>> {\n     |  _____________________________________________________________^\n1282 | |         if let Some(ref user_repo) = self.user_repository {\n1283 | |             user_repo.get_user_by_telegram_id(telegram_user_id)....\n1284 | |         } else {\n...    |\n1315 | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/user/user_profile.rs:43:39\n     |\n43   |       ) -> ArbitrageResult<UserProfile> {\n     |  _______________________________________^\n44   | |         // Validate telegram_user_id is po...\n45   | |         if telegram_user_id <= 0 {\n46   | |             return Err(ArbitrageError::val...\n...    |\n77   | |         Ok(profile)\n78   | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-18098179023242418741.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `std::marker::PhantomData<*mut u8>`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29598,
              "byte_start": 29587,
              "column_end": 23,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs",
              "is_primary": true,
              "label": null,
              "line_end": 777,
              "line_start": 777,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 12,
                  "text": "pub struct PhantomData<T: ?Sized>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::wasm_bindgen::JsValue`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4151,
              "byte_start": 4144,
              "column_end": 19,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 135,
              "line_start": 135,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 12,
                  "text": "pub struct JsValue {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::js_sys::Object`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 153473,
              "byte_start": 153467,
              "column_end": 20,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3445,
              "line_start": 3445,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 14,
                  "text": "    pub type Object;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2093,
              "byte_start": 2074,
              "column_end": 33,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 59,
              "line_start": 59,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 33,
                  "highlight_start": 14,
                  "text": "    pub type D1PreparedStatement;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 6859,
              "byte_start": 6840,
              "column_end": 31,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 224,
              "line_start": 224,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 12,
                  "text": "pub struct D1PreparedStatement(D1PreparedStatementSys);"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for `&worker::D1PreparedStatement` to implement `std::marker::Send`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9280,
              "byte_start": 9074,
              "column_end": 6,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 291,
              "line_start": 286,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 6,
                  "highlight_start": 5,
                  "text": "    {"
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.first(col_name)?).await;"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        let js_value = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 63,
                  "highlight_start": 1,
                  "text": "        let value = serde_wasm_bindgen::from_value(js_value)?;"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "        Ok(value)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 47390,
              "byte_start": 46019,
              "column_end": 6,
              "column_start": 61,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1315,
              "line_start": 1281,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 61,
                  "text": "    ) -> ArbitrageResult<Option<crate::types::UserProfile>> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "            user_repo.get_user_by_telegram_id(telegram_user_id).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 47,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database query"
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "            let stmt = self"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                .db"
                },
                {
                  "highlight_end": 95,
                  "highlight_start": 1,
                  "text": "                .prepare(\"SELECT profile_data FROM user_profiles WHERE telegram_user_id = ?\");"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 30,
                  "highlight_start": 1,
                  "text": "            let result = stmt"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "                .bind(&[telegram_user_id.into()])"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 96,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                })?"
                },
                {
                  "highlight_end": 67,
                  "highlight_start": 1,
                  "text": "                .first::<HashMap<String, serde_json::Value>>(None)"
                },
                {
                  "highlight_end": 23,
                  "highlight_start": 1,
                  "text": "                .await"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "                })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            if let Some(row) = result {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "                if let Some(profile_data) = row.get(\"profile_data\") {"
                },
                {
                  "highlight_end": 61,
                  "highlight_start": 1,
                  "text": "                    let profile: crate::types::UserProfile ="
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "                        serde_json::from_value(profile_data.clone()).map_err(|e| {"
                },
                {
                  "highlight_end": 99,
                  "highlight_start": 1,
                  "text": "                            ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                        })?;"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "                    Ok(Some(profile))"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                } else {"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                    Ok(None)"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "                }"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            } else {"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                Ok(None)"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            }"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2891,
              "byte_start": 1631,
              "column_end": 6,
              "column_start": 39,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 78,
              "line_start": 43,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 40,
                  "highlight_start": 39,
                  "text": "    ) -> ArbitrageResult<UserProfile> {"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "        // Validate telegram_user_id is positive"
                },
                {
                  "highlight_end": 35,
                  "highlight_start": 1,
                  "text": "        if telegram_user_id <= 0 {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 53,
                  "highlight_start": 1,
                  "text": "                \"Telegram user ID must be positive\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 74,
                  "highlight_start": 1,
                  "text": "        // Check if user already exists (check D1 for authoritative data)"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "        if let Some(_existing) = self"
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "            .d1_service"
                },
                {
                  "highlight_end": 55,
                  "highlight_start": 1,
                  "text": "            .get_user_by_telegram_id(telegram_user_id)"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "            .await?"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "                \"User profile already exists for this Telegram ID\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 73,
                  "highlight_start": 1,
                  "text": "        // Validate invitation code if provided (D1 for persistent data)"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        if let Some(ref code) = invitation_code {"
                },
                {
                  "highlight_end": 64,
                  "highlight_start": 1,
                  "text": "            self.validate_and_use_invitation_code(code).await?;"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 85,
                  "highlight_start": 1,
                  "text": "        let mut profile = UserProfile::new(Some(telegram_user_id), invitation_code);"
                },
                {
                  "highlight_end": 55,
                  "highlight_start": 1,
                  "text": "        profile.telegram_username = telegram_username;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 52,
                  "highlight_start": 1,
                  "text": "        // Store profile in D1 (persistent storage)"
                },
                {
                  "highlight_end": 62,
                  "highlight_start": 1,
                  "text": "        self.d1_service.create_user_profile(&profile).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "        // Create user session in KV (fast access)"
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "        let session = UserSession::new(profile.user_id.clone(), telegram_user_id);"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        self.store_user_session(&session).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "        Ok(profile)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 21951,
              "byte_start": 21204,
              "column_end": 6,
              "column_start": 87,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 590,
              "line_start": 573,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 88,
                  "highlight_start": 87,
                  "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 73,
                  "highlight_start": 1,
                  "text": "        // This service's create_user_profile has a different signature."
                },
                {
                  "highlight_end": 81,
                  "highlight_start": 1,
                  "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
                },
                {
                  "highlight_end": 90,
                  "highlight_start": 1,
                  "text": "        // This might need further refinement based on how AuthService intends to use it."
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        if profile.telegram_user_id.is_none() {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "        let _created_profile = self"
                },
                {
                  "highlight_end": 34,
                  "highlight_start": 1,
                  "text": "            .create_user_profile("
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                profile.telegram_user_id.unwrap(),"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "                profile.invitation_code.clone(),"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                profile.telegram_username.clone(),"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            )"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            .await?;"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "        Ok(())"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-18098179023242418741.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`*mut u8` cannot be shared between threads safely",
      "spans": [
        {
          "byte_end": 21951,
          "byte_start": 21204,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`*mut u8` cannot be shared between threads safely",
          "line_end": 590,
          "line_start": 573,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 73,
              "highlight_start": 1,
              "text": "        // This service's create_user_profile has a different signature."
            },
            {
              "highlight_end": 81,
              "highlight_start": 1,
              "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
            },
            {
              "highlight_end": 90,
              "highlight_start": 1,
              "text": "        // This might need further refinement based on how AuthService intends to use it."
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        if profile.telegram_user_id.is_none() {"
            },
            {
              "highlight_end": 57,
              "highlight_start": 1,
              "text": "            return Err(ArbitrageError::validation_error("
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
            },
            {
              "highlight_end": 16,
              "highlight_start": 1,
              "text": "            ));"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 36,
              "highlight_start": 1,
              "text": "        let _created_profile = self"
            },
            {
              "highlight_end": 34,
              "highlight_start": 1,
              "text": "            .create_user_profile("
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_user_id.unwrap(),"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "                profile.invitation_code.clone(),"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_username.clone(),"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            )"
            },
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "            .await?;"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error: future cannot be sent between threads safely\n   --> src/services/core/user/user_profile.rs:592:87\n    |\n592 |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n    |  _______________________________________________________________________________________^\n593 | |         self.update_user_profile(profile).await\n594 | |     }\n    | |_____^ future created by async block is not `Send`\n    |\n    = help: within `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`\nnote: future is not `Send` as this value is used across an await\n   --> src/services/core/infrastructure/database_repositories/database_manager.rs:820:14\n    |\n811 |               stmt.bind(&[\n    |  ________________________-\n812 | |                 profile_str.into(),\n813 | |                 chrono::Utc::now().to_rf...\n814 | |                 user_id.into(),\n815 | |             ])\n    | |_____________- has type `[worker::wasm_bindgen::JsValue; 3]` which is not `Send`\n...\n820 |               .await\n    |                ^^^^^ await occurs here, with the value maybe used later\n    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-3784499690006410039.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "future is not `Send` as this value is used across an await",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29317,
              "byte_start": 29312,
              "column_end": 19,
              "column_start": 14,
              "expansion": {
                "def_site_span": {
                  "byte_end": 0,
                  "byte_start": 0,
                  "column_end": 1,
                  "column_start": 1,
                  "expansion": null,
                  "file_name": "src/lib.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1,
                  "line_start": 1,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": []
                },
                "macro_decl_name": "desugaring of `await` expression",
                "span": {
                  "byte_end": 29317,
                  "byte_start": 29312,
                  "column_end": 19,
                  "column_start": 14,
                  "expansion": null,
                  "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 820,
                  "line_start": 820,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": [
                    {
                      "highlight_end": 19,
                      "highlight_start": 14,
                      "text": "            .await"
                    }
                  ]
                }
              },
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": "await occurs here, with the value maybe used later",
              "line_end": 820,
              "line_start": 820,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 14,
                  "text": "            .await"
                }
              ]
            },
            {
              "byte_end": 29143,
              "byte_start": 29004,
              "column_end": 14,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": false,
              "label": "has type `[worker::wasm_bindgen::JsValue; 3]` which is not `Send`",
              "line_end": 815,
              "line_start": 811,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 25,
                  "highlight_start": 24,
                  "text": "            stmt.bind(&["
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "                profile_str.into(),"
                },
                {
                  "highlight_end": 56,
                  "highlight_start": 1,
                  "text": "                chrono::Utc::now().to_rfc3339().into(),"
                },
                {
                  "highlight_end": 32,
                  "highlight_start": 1,
                  "text": "                user_id.into(),"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            ])"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-3784499690006410039.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": null,
      "level": "error",
      "message": "future cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 22094,
          "byte_start": 22039,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "future created by async block is not `Send`",
          "line_end": 594,
          "line_start": 592,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        self.update_user_profile(profile).await"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `Rc<RefCell<Inner>>` cannot be sent between threads safely\n   --> src/services/core/user/user_profile.rs:592:87\n    |\n592 |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n    |  _______________________________________________________________________________________^\n593 | |         self.update_user_profile(profile).await\n594 | |     }\n    | |     ^\n    | |     |\n    | |_____`Rc<RefCell<Inner>>` cannot be sent between threads safely\n    |       within this `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`\n    |\n    = help: within `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`\nnote: required because it appears within the type `JsFuture`\n   --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12\n    |\n110 | pub struct JsFuture {\n    |            ^^^^^^^^\nnote: required because it's used within this `async` fn body\n   --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:294:49\n    |\n294 |       pub async fn run(&self) -> Result<D1Result> {\n    |  _________________________________________________^\n295 | |         let result = JsFuture::from(self.0.run()?).a...\n296 | |         let result = cast_to_d1_error(result)?;\n297 | |         Ok(D1Result(result.into()))\n298 | |     }\n    | |_____^\nnote: required because it's used within this `async` fn body\n   --> src/services/core/infrastructure/database_repositories/database_manager.rs:791:30\n    |\n791 |       ) -> ArbitrageResult<()> {\n    |  ______________________________^\n792 | |         if let Some(ref user_repo) = sel...\n...   |\n827 | |     }\n    | |_____^\nnote: required because it's used within this `async` fn body\n   --> src/services/core/user/user_profile.rs:113:91\n    |\n113 |       pub async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n    |  ___________________________________________________________________________________________^\n114 | |         let mut updated_profile = profile.clone();\n115 | |         updated_profile.updated_at = chrono::Utc::now().timestamp_millis() as u64;\n...   |\n129 | |         Ok(())\n130 | |     }\n    | |_____^\nnote: required because it's used within this `async` block\n   --> src/services/core/user/user_profile.rs:592:87\n    |\n592 |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n    |  _______________________________________________________________________________________^\n593 | |         self.update_user_profile(profile).await\n594 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-14964643221528206232.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `JsFuture`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3518,
              "byte_start": 3510,
              "column_end": 20,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 110,
              "line_start": 110,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 12,
                  "text": "pub struct JsFuture {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9551,
              "byte_start": 9402,
              "column_end": 6,
              "column_start": 49,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 298,
              "line_start": 294,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 50,
                  "highlight_start": 49,
                  "text": "    pub async fn run(&self) -> Result<D1Result> {"
                },
                {
                  "highlight_end": 58,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.run()?).await;"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        let result = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "        Ok(D1Result(result.into()))"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29487,
              "byte_start": 28121,
              "column_end": 6,
              "column_start": 30,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 827,
              "line_start": 791,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 30,
                  "text": "    ) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 52,
                  "highlight_start": 1,
                  "text": "            // Use the user repository if available"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "            // Convert JSON to UserProfile first"
                },
                {
                  "highlight_end": 98,
                  "highlight_start": 1,
                  "text": "            let profile: crate::types::UserProfile = serde_json::from_value(profile_data.clone())"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 87,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 58,
                  "highlight_start": 1,
                  "text": "            user_repo.update_user_profile(&profile).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database update"
                },
                {
                  "highlight_end": 80,
                  "highlight_start": 1,
                  "text": "            let profile_str = serde_json::to_string(profile_data).map_err(|e| {"
                },
                {
                  "highlight_end": 91,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::parse_error(format!(\"Failed to serialize profile: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            let stmt = self.db.prepare("
                },
                {
                  "highlight_end": 95,
                  "highlight_start": 1,
                  "text": "                \"UPDATE user_profiles SET profile_data = ?, updated_at = ? WHERE user_id = ?\","
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            );"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "            stmt.bind(&["
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "                profile_str.into(),"
                },
                {
                  "highlight_end": 56,
                  "highlight_start": 1,
                  "text": "                chrono::Utc::now().to_rfc3339().into(),"
                },
                {
                  "highlight_end": 32,
                  "highlight_start": 1,
                  "text": "                user_id.into(),"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            ])"
                },
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "            .map_err(|e| {"
                },
                {
                  "highlight_end": 92,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            })?"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            .run()"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            .await"
                },
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "            .map_err(|e| {"
                },
                {
                  "highlight_end": 90,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            Ok(())"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4829,
              "byte_start": 4228,
              "column_end": 6,
              "column_start": 91,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 130,
              "line_start": 113,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 92,
                  "highlight_start": 91,
                  "text": "    pub async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "        let mut updated_profile = profile.clone();"
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "        updated_profile.updated_at = chrono::Utc::now().timestamp_millis() as u64;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 45,
                  "highlight_start": 1,
                  "text": "        // Update in D1 (persistent storage)"
                },
                {
                  "highlight_end": 80,
                  "highlight_start": 1,
                  "text": "        let profile_data = serde_json::to_value(&updated_profile).map_err(|e| {"
                },
                {
                  "highlight_end": 87,
                  "highlight_start": 1,
                  "text": "            ArbitrageError::parse_error(format!(\"Failed to serialize profile: {}\", e))"
                },
                {
                  "highlight_end": 13,
                  "highlight_start": 1,
                  "text": "        })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "        self.d1_service"
                },
                {
                  "highlight_end": 74,
                  "highlight_start": 1,
                  "text": "            .update_user_profile(&updated_profile.user_id, &profile_data)"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            .await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "        // Invalidate cache"
                },
                {
                  "highlight_end": 69,
                  "highlight_start": 1,
                  "text": "        self.invalidate_user_cache(&updated_profile.user_id).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "        Ok(())"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 22094,
              "byte_start": 22039,
              "column_end": 6,
              "column_start": 87,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 594,
              "line_start": 592,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 88,
                  "highlight_start": 87,
                  "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        self.update_user_profile(profile).await"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-14964643221528206232.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 22094,
          "byte_start": 22039,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
          "line_end": 594,
          "line_start": 592,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        self.update_user_profile(profile).await"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        },
        {
          "byte_end": 22094,
          "byte_start": 22039,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "within this `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`",
          "line_end": 594,
          "line_start": 592,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        self.update_user_profile(profile).await"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `*mut u8` cannot be shared between threads safely\n    --> src/services/core/user/user_profile.rs:592:87\n     |\n592  |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n593  | |         self.update_user_profile(profile).await\n594  | |     }\n     | |_____^ `*mut u8` cannot be shared between threads safely\n     |\n     = help: within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`\nnote: required because it appears within the type `std::marker::PhantomData<*mut u8>`\n    --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs:777:12\n     |\n777  | pub struct PhantomData<T: ?Sized>;\n     |            ^^^^^^^^^^^\nnote: required because it appears within the type `worker::wasm_bindgen::JsValue`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs:135:12\n     |\n135  | pub struct JsValue {\n     |            ^^^^^^^\nnote: required because it appears within the type `worker::js_sys::Object`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs:3445:14\n     |\n3445 |     pub type Object;\n     |              ^^^^^^\nnote: required because it appears within the type `D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs:59:14\n     |\n59   |     pub type D1PreparedStatement;\n     |              ^^^^^^^^^^^^^^^^^^^\nnote: required because it appears within the type `worker::D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:224:12\n     |\n224  | pub struct D1PreparedStatement(D1Prepared...\n     |            ^^^^^^^^^^^^^^^^^^^\n     = note: required for `&worker::D1PreparedStatement` to implement `std::marker::Send`\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:294:49\n     |\n294  |       pub async fn run(&self) -> Result<D1Result> {\n     |  _________________________________________________^\n295  | |         let result = JsFuture::from(self.0.run()?).a...\n296  | |         let result = cast_to_d1_error(result)?;\n297  | |         Ok(D1Result(result.into()))\n298  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:791:30\n     |\n791  |       ) -> ArbitrageResult<()> {\n     |  ______________________________^\n792  | |         if let Some(ref user_repo) = se...\n...    |\n827  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/user/user_profile.rs:113:91\n     |\n113  |       pub async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  ___________________________________________________________________________________________^\n114  | |         let mut updated_profile = profile.clone();\n115  | |         updated_profile.updated_at = chrono::Utc::now().timestamp_millis() as u64;\n...    |\n129  | |         Ok(())\n130  | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:592:87\n     |\n592  |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n593  | |         self.update_user_profile(profile).await\n594  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-18098179023242418741.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `std::marker::PhantomData<*mut u8>`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29598,
              "byte_start": 29587,
              "column_end": 23,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs",
              "is_primary": true,
              "label": null,
              "line_end": 777,
              "line_start": 777,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 12,
                  "text": "pub struct PhantomData<T: ?Sized>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::wasm_bindgen::JsValue`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4151,
              "byte_start": 4144,
              "column_end": 19,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 135,
              "line_start": 135,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 12,
                  "text": "pub struct JsValue {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::js_sys::Object`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 153473,
              "byte_start": 153467,
              "column_end": 20,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3445,
              "line_start": 3445,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 14,
                  "text": "    pub type Object;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2093,
              "byte_start": 2074,
              "column_end": 33,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 59,
              "line_start": 59,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 33,
                  "highlight_start": 14,
                  "text": "    pub type D1PreparedStatement;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 6859,
              "byte_start": 6840,
              "column_end": 31,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 224,
              "line_start": 224,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 12,
                  "text": "pub struct D1PreparedStatement(D1PreparedStatementSys);"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for `&worker::D1PreparedStatement` to implement `std::marker::Send`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9551,
              "byte_start": 9402,
              "column_end": 6,
              "column_start": 49,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 298,
              "line_start": 294,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 50,
                  "highlight_start": 49,
                  "text": "    pub async fn run(&self) -> Result<D1Result> {"
                },
                {
                  "highlight_end": 58,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.run()?).await;"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        let result = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "        Ok(D1Result(result.into()))"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29487,
              "byte_start": 28121,
              "column_end": 6,
              "column_start": 30,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 827,
              "line_start": 791,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 30,
                  "text": "    ) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 52,
                  "highlight_start": 1,
                  "text": "            // Use the user repository if available"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "            // Convert JSON to UserProfile first"
                },
                {
                  "highlight_end": 98,
                  "highlight_start": 1,
                  "text": "            let profile: crate::types::UserProfile = serde_json::from_value(profile_data.clone())"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 87,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 58,
                  "highlight_start": 1,
                  "text": "            user_repo.update_user_profile(&profile).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database update"
                },
                {
                  "highlight_end": 80,
                  "highlight_start": 1,
                  "text": "            let profile_str = serde_json::to_string(profile_data).map_err(|e| {"
                },
                {
                  "highlight_end": 91,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::parse_error(format!(\"Failed to serialize profile: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            let stmt = self.db.prepare("
                },
                {
                  "highlight_end": 95,
                  "highlight_start": 1,
                  "text": "                \"UPDATE user_profiles SET profile_data = ?, updated_at = ? WHERE user_id = ?\","
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            );"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "            stmt.bind(&["
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "                profile_str.into(),"
                },
                {
                  "highlight_end": 56,
                  "highlight_start": 1,
                  "text": "                chrono::Utc::now().to_rfc3339().into(),"
                },
                {
                  "highlight_end": 32,
                  "highlight_start": 1,
                  "text": "                user_id.into(),"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            ])"
                },
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "            .map_err(|e| {"
                },
                {
                  "highlight_end": 92,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            })?"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            .run()"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            .await"
                },
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "            .map_err(|e| {"
                },
                {
                  "highlight_end": 90,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            Ok(())"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4829,
              "byte_start": 4228,
              "column_end": 6,
              "column_start": 91,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 130,
              "line_start": 113,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 92,
                  "highlight_start": 91,
                  "text": "    pub async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "        let mut updated_profile = profile.clone();"
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "        updated_profile.updated_at = chrono::Utc::now().timestamp_millis() as u64;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 45,
                  "highlight_start": 1,
                  "text": "        // Update in D1 (persistent storage)"
                },
                {
                  "highlight_end": 80,
                  "highlight_start": 1,
                  "text": "        let profile_data = serde_json::to_value(&updated_profile).map_err(|e| {"
                },
                {
                  "highlight_end": 87,
                  "highlight_start": 1,
                  "text": "            ArbitrageError::parse_error(format!(\"Failed to serialize profile: {}\", e))"
                },
                {
                  "highlight_end": 13,
                  "highlight_start": 1,
                  "text": "        })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "        self.d1_service"
                },
                {
                  "highlight_end": 74,
                  "highlight_start": 1,
                  "text": "            .update_user_profile(&updated_profile.user_id, &profile_data)"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            .await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "        // Invalidate cache"
                },
                {
                  "highlight_end": 69,
                  "highlight_start": 1,
                  "text": "        self.invalidate_user_cache(&updated_profile.user_id).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "        Ok(())"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 22094,
              "byte_start": 22039,
              "column_end": 6,
              "column_start": 87,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 594,
              "line_start": 592,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 88,
                  "highlight_start": 87,
                  "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        self.update_user_profile(profile).await"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-4410103e6b616038.long-type-18098179023242418741.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`*mut u8` cannot be shared between threads safely",
      "spans": [
        {
          "byte_end": 22094,
          "byte_start": 22039,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`*mut u8` cannot be shared between threads safely",
          "line_end": 594,
          "line_start": 592,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        self.update_user_profile(profile).await"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error: future cannot be sent between threads safely\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |_____^ future created by async block is not `Send`\n     |\n     = help: within `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`\nnote: future is not `Send` as this value is used across an await\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1256:18\n     |\n1251 |                 .bind(&[user_id.into()])\n     |                        ---------------- has type `[worker::wasm_bindgen::JsValue; 1]` which is not `Send`\n...\n1256 |                 .await\n     |                  ^^^^^ await occurs here, with `[user_id.into()]` maybe used later\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12334650785296837752.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "future is not `Send` as this value is used across an await",
          "rendered": null,
          "spans": [
            {
              "byte_end": 45114,
              "byte_start": 45109,
              "column_end": 23,
              "column_start": 18,
              "expansion": {
                "def_site_span": {
                  "byte_end": 0,
                  "byte_start": 0,
                  "column_end": 1,
                  "column_start": 1,
                  "expansion": null,
                  "file_name": "src/lib.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1,
                  "line_start": 1,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": []
                },
                "macro_decl_name": "desugaring of `await` expression",
                "span": {
                  "byte_end": 45114,
                  "byte_start": 45109,
                  "column_end": 23,
                  "column_start": 18,
                  "expansion": null,
                  "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1256,
                  "line_start": 1256,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": [
                    {
                      "highlight_end": 23,
                      "highlight_start": 18,
                      "text": "                .await"
                    }
                  ]
                }
              },
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": "await occurs here, with `[user_id.into()]` maybe used later",
              "line_end": 1256,
              "line_start": 1256,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 18,
                  "text": "                .await"
                }
              ]
            },
            {
              "byte_end": 44876,
              "byte_start": 44860,
              "column_end": 40,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": false,
              "label": "has type `[worker::wasm_bindgen::JsValue; 1]` which is not `Send`",
              "line_end": 1251,
              "line_start": 1251,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 40,
                  "highlight_start": 24,
                  "text": "                .bind(&[user_id.into()])"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12334650785296837752.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": null,
      "level": "error",
      "message": "future cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 21116,
          "byte_start": 20740,
          "column_end": 6,
          "column_start": 85,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "future created by async block is not `Send`",
          "line_end": 571,
          "line_start": 560,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 85,
              "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
            },
            {
              "highlight_end": 82,
              "highlight_start": 1,
              "text": "        // Call the actual implementation method that returns Option<UserProfile>"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "        self.d1_service"
            },
            {
              "highlight_end": 39,
              "highlight_start": 1,
              "text": "            .get_user_profile(user_id)"
            },
            {
              "highlight_end": 20,
              "highlight_start": 1,
              "text": "            .await?"
            },
            {
              "highlight_end": 29,
              "highlight_start": 1,
              "text": "            .ok_or_else(|| {"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                ArbitrageError::not_found(format!("
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "                    \"User profile not found for user_id: {}\","
            },
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "                    user_id"
            },
            {
              "highlight_end": 19,
              "highlight_start": 1,
              "text": "                ))"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            })"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `Rc<RefCell<Inner>>` cannot be sent between threads safely\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |     ^\n     | |     |\n     | |_____`Rc<RefCell<Inner>>` cannot be sent between threads safely\n     |       within this `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`\n     |\n     = help: within `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`\nnote: required because it appears within the type `JsFuture`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12\n     |\n110  | pub struct JsFuture {\n     |            ^^^^^^^^\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:286:5\n     |\n286  | /     {\n287  | |         let result = JsFuture::from(sel...\n288  | |         let js_value = cast_to_d1_error...\n289  | |         let value = serde_wasm_bindgen:...\n290  | |         Ok(value)\n291  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1241:61\n     |\n1241 |       ) -> ArbitrageResult<Option<crate::types::UserProfile>> {\n     |  _____________________________________________________________^\n1242 | |         if let Some(ref user_repo) = self.user_repository {\n1243 | |             user_repo.get_user_profile(user_id).await\n1244 | |         } else {\n...    |\n1275 | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-6419748827378335496.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `JsFuture`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3518,
              "byte_start": 3510,
              "column_end": 20,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 110,
              "line_start": 110,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 12,
                  "text": "pub struct JsFuture {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9280,
              "byte_start": 9074,
              "column_end": 6,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 291,
              "line_start": 286,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 1,
                  "highlight_start": 5,
                  "text": "    {"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.first(col_name)?).await;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "        let js_value = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "        let value = serde_wasm_bindgen::from_value(js_value)?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": "        Ok(value)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 45829,
              "byte_start": 44492,
              "column_end": 6,
              "column_start": 61,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1275,
              "line_start": 1241,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 61,
                  "text": "    ) -> ArbitrageResult<Option<crate::types::UserProfile>> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 54,
                  "highlight_start": 1,
                  "text": "            user_repo.get_user_profile(user_id).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 47,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database query"
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "            let stmt = self"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                .db"
                },
                {
                  "highlight_end": 86,
                  "highlight_start": 1,
                  "text": "                .prepare(\"SELECT profile_data FROM user_profiles WHERE user_id = ?\");"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 30,
                  "highlight_start": 1,
                  "text": "            let result = stmt"
                },
                {
                  "highlight_end": 41,
                  "highlight_start": 1,
                  "text": "                .bind(&[user_id.into()])"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 96,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                })?"
                },
                {
                  "highlight_end": 67,
                  "highlight_start": 1,
                  "text": "                .first::<HashMap<String, serde_json::Value>>(None)"
                },
                {
                  "highlight_end": 23,
                  "highlight_start": 1,
                  "text": "                .await"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "                })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            if let Some(row) = result {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "                if let Some(profile_data) = row.get(\"profile_data\") {"
                },
                {
                  "highlight_end": 61,
                  "highlight_start": 1,
                  "text": "                    let profile: crate::types::UserProfile ="
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "                        serde_json::from_value(profile_data.clone()).map_err(|e| {"
                },
                {
                  "highlight_end": 99,
                  "highlight_start": 1,
                  "text": "                            ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                        })?;"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "                    Ok(Some(profile))"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                } else {"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                    Ok(None)"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "                }"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            } else {"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                Ok(None)"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            }"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 21116,
              "byte_start": 20740,
              "column_end": 6,
              "column_start": 85,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 571,
              "line_start": 560,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 86,
                  "highlight_start": 85,
                  "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
                },
                {
                  "highlight_end": 82,
                  "highlight_start": 1,
                  "text": "        // Call the actual implementation method that returns Option<UserProfile>"
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "        self.d1_service"
                },
                {
                  "highlight_end": 39,
                  "highlight_start": 1,
                  "text": "            .get_user_profile(user_id)"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "            .await?"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "            .ok_or_else(|| {"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::not_found(format!("
                },
                {
                  "highlight_end": 62,
                  "highlight_start": 1,
                  "text": "                    \"User profile not found for user_id: {}\","
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "                    user_id"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "                ))"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            })"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-6419748827378335496.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 21116,
          "byte_start": 20740,
          "column_end": 6,
          "column_start": 85,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
          "line_end": 571,
          "line_start": 560,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 85,
              "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
            },
            {
              "highlight_end": 82,
              "highlight_start": 1,
              "text": "        // Call the actual implementation method that returns Option<UserProfile>"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "        self.d1_service"
            },
            {
              "highlight_end": 39,
              "highlight_start": 1,
              "text": "            .get_user_profile(user_id)"
            },
            {
              "highlight_end": 20,
              "highlight_start": 1,
              "text": "            .await?"
            },
            {
              "highlight_end": 29,
              "highlight_start": 1,
              "text": "            .ok_or_else(|| {"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                ArbitrageError::not_found(format!("
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "                    \"User profile not found for user_id: {}\","
            },
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "                    user_id"
            },
            {
              "highlight_end": 19,
              "highlight_start": 1,
              "text": "                ))"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            })"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        },
        {
          "byte_end": 21116,
          "byte_start": 20740,
          "column_end": 6,
          "column_start": 85,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "within this `{async block@src/services/core/user/user_profile.rs:560:85: 571:6}`",
          "line_end": 571,
          "line_start": 560,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 85,
              "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
            },
            {
              "highlight_end": 82,
              "highlight_start": 1,
              "text": "        // Call the actual implementation method that returns Option<UserProfile>"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "        self.d1_service"
            },
            {
              "highlight_end": 39,
              "highlight_start": 1,
              "text": "            .get_user_profile(user_id)"
            },
            {
              "highlight_end": 20,
              "highlight_start": 1,
              "text": "            .await?"
            },
            {
              "highlight_end": 29,
              "highlight_start": 1,
              "text": "            .ok_or_else(|| {"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                ArbitrageError::not_found(format!("
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "                    \"User profile not found for user_id: {}\","
            },
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "                    user_id"
            },
            {
              "highlight_end": 19,
              "highlight_start": 1,
              "text": "                ))"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            })"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `*mut u8` cannot be shared between threads safely\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |_____^ `*mut u8` cannot be shared between threads safely\n     |\n     = help: within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`\nnote: required because it appears within the type `std::marker::PhantomData<*mut u8>`\n    --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs:777:12\n     |\n777  | pub struct PhantomData<T: ?Sized>;\n     |            ^^^^^^^^^^^\nnote: required because it appears within the type `worker::wasm_bindgen::JsValue`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs:135:12\n     |\n135  | pub struct JsValue {\n     |            ^^^^^^^\nnote: required because it appears within the type `worker::js_sys::Object`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs:3445:14\n     |\n3445 |     pub type Object;\n     |              ^^^^^^\nnote: required because it appears within the type `D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs:59:14\n     |\n59   |     pub type D1PreparedStatement;\n     |              ^^^^^^^^^^^^^^^^^^^\nnote: required because it appears within the type `worker::D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:224:12\n     |\n224  | pub struct D1PreparedStatement(D1Prepared...\n     |            ^^^^^^^^^^^^^^^^^^^\n     = note: required for `&worker::D1PreparedStatement` to implement `std::marker::Send`\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:286:5\n     |\n286  | /     {\n287  | |         let result = JsFuture::from(sel...\n288  | |         let js_value = cast_to_d1_error...\n289  | |         let value = serde_wasm_bindgen:...\n290  | |         Ok(value)\n291  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1241:61\n     |\n1241 |       ) -> ArbitrageResult<Option<crate::types::UserProfile>> {\n     |  _____________________________________________________________^\n1242 | |         if let Some(ref user_repo) = self.user_repository {\n1243 | |             user_repo.get_user_profile(user_id).await\n1244 | |         } else {\n...    |\n1275 | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:560:85\n     |\n560  |       async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {\n     |  _____________________________________________________________________________________^\n561  | |         // Call the actual implementation method that returns Option<UserProfile>\n562  | |         self.d1_service\n563  | |             .get_user_profile(user_id)\n...    |\n570  | |             })\n571  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12558027220147542886.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `std::marker::PhantomData<*mut u8>`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29598,
              "byte_start": 29587,
              "column_end": 23,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs",
              "is_primary": true,
              "label": null,
              "line_end": 777,
              "line_start": 777,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 12,
                  "text": "pub struct PhantomData<T: ?Sized>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::wasm_bindgen::JsValue`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4151,
              "byte_start": 4144,
              "column_end": 19,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 135,
              "line_start": 135,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 12,
                  "text": "pub struct JsValue {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::js_sys::Object`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 153473,
              "byte_start": 153467,
              "column_end": 20,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3445,
              "line_start": 3445,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 14,
                  "text": "    pub type Object;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2093,
              "byte_start": 2074,
              "column_end": 33,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 59,
              "line_start": 59,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 33,
                  "highlight_start": 14,
                  "text": "    pub type D1PreparedStatement;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 6859,
              "byte_start": 6840,
              "column_end": 31,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 224,
              "line_start": 224,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 12,
                  "text": "pub struct D1PreparedStatement(D1PreparedStatementSys);"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for `&worker::D1PreparedStatement` to implement `std::marker::Send`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9280,
              "byte_start": 9074,
              "column_end": 6,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 291,
              "line_start": 286,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 6,
                  "highlight_start": 5,
                  "text": "    {"
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.first(col_name)?).await;"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        let js_value = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 63,
                  "highlight_start": 1,
                  "text": "        let value = serde_wasm_bindgen::from_value(js_value)?;"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "        Ok(value)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 45829,
              "byte_start": 44492,
              "column_end": 6,
              "column_start": 61,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1275,
              "line_start": 1241,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 61,
                  "text": "    ) -> ArbitrageResult<Option<crate::types::UserProfile>> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 54,
                  "highlight_start": 1,
                  "text": "            user_repo.get_user_profile(user_id).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 47,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database query"
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "            let stmt = self"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                .db"
                },
                {
                  "highlight_end": 86,
                  "highlight_start": 1,
                  "text": "                .prepare(\"SELECT profile_data FROM user_profiles WHERE user_id = ?\");"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 30,
                  "highlight_start": 1,
                  "text": "            let result = stmt"
                },
                {
                  "highlight_end": 41,
                  "highlight_start": 1,
                  "text": "                .bind(&[user_id.into()])"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 96,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                })?"
                },
                {
                  "highlight_end": 67,
                  "highlight_start": 1,
                  "text": "                .first::<HashMap<String, serde_json::Value>>(None)"
                },
                {
                  "highlight_end": 23,
                  "highlight_start": 1,
                  "text": "                .await"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "                })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            if let Some(row) = result {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "                if let Some(profile_data) = row.get(\"profile_data\") {"
                },
                {
                  "highlight_end": 61,
                  "highlight_start": 1,
                  "text": "                    let profile: crate::types::UserProfile ="
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "                        serde_json::from_value(profile_data.clone()).map_err(|e| {"
                },
                {
                  "highlight_end": 99,
                  "highlight_start": 1,
                  "text": "                            ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                        })?;"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "                    Ok(Some(profile))"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                } else {"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                    Ok(None)"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "                }"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            } else {"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                Ok(None)"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            }"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 21116,
              "byte_start": 20740,
              "column_end": 6,
              "column_start": 85,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 571,
              "line_start": 560,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 86,
                  "highlight_start": 85,
                  "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
                },
                {
                  "highlight_end": 82,
                  "highlight_start": 1,
                  "text": "        // Call the actual implementation method that returns Option<UserProfile>"
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "        self.d1_service"
                },
                {
                  "highlight_end": 39,
                  "highlight_start": 1,
                  "text": "            .get_user_profile(user_id)"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "            .await?"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "            .ok_or_else(|| {"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::not_found(format!("
                },
                {
                  "highlight_end": 62,
                  "highlight_start": 1,
                  "text": "                    \"User profile not found for user_id: {}\","
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "                    user_id"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "                ))"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            })"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12558027220147542886.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`*mut u8` cannot be shared between threads safely",
      "spans": [
        {
          "byte_end": 21116,
          "byte_start": 20740,
          "column_end": 6,
          "column_start": 85,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`*mut u8` cannot be shared between threads safely",
          "line_end": 571,
          "line_start": 560,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 86,
              "highlight_start": 85,
              "text": "    async fn get_user_profile(&self, user_id: &str) -> ArbitrageResult<UserProfile> {"
            },
            {
              "highlight_end": 82,
              "highlight_start": 1,
              "text": "        // Call the actual implementation method that returns Option<UserProfile>"
            },
            {
              "highlight_end": 24,
              "highlight_start": 1,
              "text": "        self.d1_service"
            },
            {
              "highlight_end": 39,
              "highlight_start": 1,
              "text": "            .get_user_profile(user_id)"
            },
            {
              "highlight_end": 20,
              "highlight_start": 1,
              "text": "            .await?"
            },
            {
              "highlight_end": 29,
              "highlight_start": 1,
              "text": "            .ok_or_else(|| {"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                ArbitrageError::not_found(format!("
            },
            {
              "highlight_end": 62,
              "highlight_start": 1,
              "text": "                    \"User profile not found for user_id: {}\","
            },
            {
              "highlight_end": 28,
              "highlight_start": 1,
              "text": "                    user_id"
            },
            {
              "highlight_end": 19,
              "highlight_start": 1,
              "text": "                ))"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "            })"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error: future cannot be sent between threads safely\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |_____^ future created by async block is not `Send`\n     |\n     = help: within `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`\nnote: future is not `Send` as this value is used across an await\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1296:18\n     |\n1291 | ...  .bind(&[telegram_user_id.into()])\n     |             ------------------------- has type `[worker::wasm_bindgen::JsValue; 1]` which is not `Send`\n...\n1296 | ...  .await\n     |       ^^^^^ await occurs here, with `[telegram_user_id.into()]` maybe used later\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-2990344773829490362.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "future is not `Send` as this value is used across an await",
          "rendered": null,
          "spans": [
            {
              "byte_end": 46675,
              "byte_start": 46670,
              "column_end": 23,
              "column_start": 18,
              "expansion": {
                "def_site_span": {
                  "byte_end": 0,
                  "byte_start": 0,
                  "column_end": 1,
                  "column_start": 1,
                  "expansion": null,
                  "file_name": "src/lib.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1,
                  "line_start": 1,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": []
                },
                "macro_decl_name": "desugaring of `await` expression",
                "span": {
                  "byte_end": 46675,
                  "byte_start": 46670,
                  "column_end": 23,
                  "column_start": 18,
                  "expansion": null,
                  "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1296,
                  "line_start": 1296,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": [
                    {
                      "highlight_end": 23,
                      "highlight_start": 18,
                      "text": "                .await"
                    }
                  ]
                }
              },
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": "await occurs here, with `[telegram_user_id.into()]` maybe used later",
              "line_end": 1296,
              "line_start": 1296,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 18,
                  "text": "                .await"
                }
              ]
            },
            {
              "byte_end": 46437,
              "byte_start": 46412,
              "column_end": 49,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": false,
              "label": "has type `[worker::wasm_bindgen::JsValue; 1]` which is not `Send`",
              "line_end": 1291,
              "line_start": 1291,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 49,
                  "highlight_start": 24,
                  "text": "                .bind(&[telegram_user_id.into()])"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-2990344773829490362.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": null,
      "level": "error",
      "message": "future cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 21951,
          "byte_start": 21204,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "future created by async block is not `Send`",
          "line_end": 590,
          "line_start": 573,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 73,
              "highlight_start": 1,
              "text": "        // This service's create_user_profile has a different signature."
            },
            {
              "highlight_end": 81,
              "highlight_start": 1,
              "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
            },
            {
              "highlight_end": 90,
              "highlight_start": 1,
              "text": "        // This might need further refinement based on how AuthService intends to use it."
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        if profile.telegram_user_id.is_none() {"
            },
            {
              "highlight_end": 57,
              "highlight_start": 1,
              "text": "            return Err(ArbitrageError::validation_error("
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
            },
            {
              "highlight_end": 16,
              "highlight_start": 1,
              "text": "            ));"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 36,
              "highlight_start": 1,
              "text": "        let _created_profile = self"
            },
            {
              "highlight_end": 34,
              "highlight_start": 1,
              "text": "            .create_user_profile("
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_user_id.unwrap(),"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "                profile.invitation_code.clone(),"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_username.clone(),"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            )"
            },
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "            .await?;"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `Rc<RefCell<Inner>>` cannot be sent between threads safely\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |     ^\n     | |     |\n     | |_____`Rc<RefCell<Inner>>` cannot be sent between threads safely\n     |       within this `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`\n     |\n     = help: within `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`\nnote: required because it appears within the type `JsFuture`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12\n     |\n110  | pub struct JsFuture {\n     |            ^^^^^^^^\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:286:5\n     |\n286  | /     {\n287  | |         let result = JsFuture::from(sel...\n288  | |         let js_value = cast_to_d1_error...\n289  | |         let value = serde_wasm_bindgen:...\n290  | |         Ok(value)\n291  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1281:61\n     |\n1281 |       ) -> ArbitrageResult<Option<crate::types::UserProfile>> {\n     |  _____________________________________________________________^\n1282 | |         if let Some(ref user_repo) = self.user_repository {\n1283 | |             user_repo.get_user_by_telegram_id(telegram_user_id)....\n1284 | |         } else {\n...    |\n1315 | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/user/user_profile.rs:43:39\n     |\n43   |       ) -> ArbitrageResult<UserProfile> {\n     |  _______________________________________^\n44   | |         // Validate telegram_user_id is po...\n45   | |         if telegram_user_id <= 0 {\n46   | |             return Err(ArbitrageError::val...\n...    |\n77   | |         Ok(profile)\n78   | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-6419748827378335496.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `JsFuture`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3518,
              "byte_start": 3510,
              "column_end": 20,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 110,
              "line_start": 110,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 12,
                  "text": "pub struct JsFuture {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9280,
              "byte_start": 9074,
              "column_end": 6,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 291,
              "line_start": 286,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 6,
                  "highlight_start": 5,
                  "text": "    {"
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.first(col_name)?).await;"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        let js_value = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 63,
                  "highlight_start": 1,
                  "text": "        let value = serde_wasm_bindgen::from_value(js_value)?;"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "        Ok(value)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 47390,
              "byte_start": 46019,
              "column_end": 6,
              "column_start": 61,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1315,
              "line_start": 1281,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 61,
                  "text": "    ) -> ArbitrageResult<Option<crate::types::UserProfile>> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "            user_repo.get_user_by_telegram_id(telegram_user_id).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 47,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database query"
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "            let stmt = self"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                .db"
                },
                {
                  "highlight_end": 95,
                  "highlight_start": 1,
                  "text": "                .prepare(\"SELECT profile_data FROM user_profiles WHERE telegram_user_id = ?\");"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 30,
                  "highlight_start": 1,
                  "text": "            let result = stmt"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "                .bind(&[telegram_user_id.into()])"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 96,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                })?"
                },
                {
                  "highlight_end": 67,
                  "highlight_start": 1,
                  "text": "                .first::<HashMap<String, serde_json::Value>>(None)"
                },
                {
                  "highlight_end": 23,
                  "highlight_start": 1,
                  "text": "                .await"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "                })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            if let Some(row) = result {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "                if let Some(profile_data) = row.get(\"profile_data\") {"
                },
                {
                  "highlight_end": 61,
                  "highlight_start": 1,
                  "text": "                    let profile: crate::types::UserProfile ="
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "                        serde_json::from_value(profile_data.clone()).map_err(|e| {"
                },
                {
                  "highlight_end": 99,
                  "highlight_start": 1,
                  "text": "                            ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                        })?;"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "                    Ok(Some(profile))"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                } else {"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                    Ok(None)"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "                }"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            } else {"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                Ok(None)"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            }"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2891,
              "byte_start": 1631,
              "column_end": 6,
              "column_start": 39,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 78,
              "line_start": 43,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 40,
                  "highlight_start": 39,
                  "text": "    ) -> ArbitrageResult<UserProfile> {"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "        // Validate telegram_user_id is positive"
                },
                {
                  "highlight_end": 35,
                  "highlight_start": 1,
                  "text": "        if telegram_user_id <= 0 {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 53,
                  "highlight_start": 1,
                  "text": "                \"Telegram user ID must be positive\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 74,
                  "highlight_start": 1,
                  "text": "        // Check if user already exists (check D1 for authoritative data)"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "        if let Some(_existing) = self"
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "            .d1_service"
                },
                {
                  "highlight_end": 55,
                  "highlight_start": 1,
                  "text": "            .get_user_by_telegram_id(telegram_user_id)"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "            .await?"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "                \"User profile already exists for this Telegram ID\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 73,
                  "highlight_start": 1,
                  "text": "        // Validate invitation code if provided (D1 for persistent data)"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        if let Some(ref code) = invitation_code {"
                },
                {
                  "highlight_end": 64,
                  "highlight_start": 1,
                  "text": "            self.validate_and_use_invitation_code(code).await?;"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 85,
                  "highlight_start": 1,
                  "text": "        let mut profile = UserProfile::new(Some(telegram_user_id), invitation_code);"
                },
                {
                  "highlight_end": 55,
                  "highlight_start": 1,
                  "text": "        profile.telegram_username = telegram_username;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 52,
                  "highlight_start": 1,
                  "text": "        // Store profile in D1 (persistent storage)"
                },
                {
                  "highlight_end": 62,
                  "highlight_start": 1,
                  "text": "        self.d1_service.create_user_profile(&profile).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "        // Create user session in KV (fast access)"
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "        let session = UserSession::new(profile.user_id.clone(), telegram_user_id);"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        self.store_user_session(&session).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "        Ok(profile)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 21951,
              "byte_start": 21204,
              "column_end": 6,
              "column_start": 87,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 590,
              "line_start": 573,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 88,
                  "highlight_start": 87,
                  "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 73,
                  "highlight_start": 1,
                  "text": "        // This service's create_user_profile has a different signature."
                },
                {
                  "highlight_end": 81,
                  "highlight_start": 1,
                  "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
                },
                {
                  "highlight_end": 90,
                  "highlight_start": 1,
                  "text": "        // This might need further refinement based on how AuthService intends to use it."
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        if profile.telegram_user_id.is_none() {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "        let _created_profile = self"
                },
                {
                  "highlight_end": 34,
                  "highlight_start": 1,
                  "text": "            .create_user_profile("
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                profile.telegram_user_id.unwrap(),"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "                profile.invitation_code.clone(),"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                profile.telegram_username.clone(),"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            )"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            .await?;"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "        Ok(())"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-6419748827378335496.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 21951,
          "byte_start": 21204,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
          "line_end": 590,
          "line_start": 573,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 73,
              "highlight_start": 1,
              "text": "        // This service's create_user_profile has a different signature."
            },
            {
              "highlight_end": 81,
              "highlight_start": 1,
              "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
            },
            {
              "highlight_end": 90,
              "highlight_start": 1,
              "text": "        // This might need further refinement based on how AuthService intends to use it."
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        if profile.telegram_user_id.is_none() {"
            },
            {
              "highlight_end": 57,
              "highlight_start": 1,
              "text": "            return Err(ArbitrageError::validation_error("
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
            },
            {
              "highlight_end": 16,
              "highlight_start": 1,
              "text": "            ));"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 36,
              "highlight_start": 1,
              "text": "        let _created_profile = self"
            },
            {
              "highlight_end": 34,
              "highlight_start": 1,
              "text": "            .create_user_profile("
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_user_id.unwrap(),"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "                profile.invitation_code.clone(),"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_username.clone(),"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            )"
            },
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "            .await?;"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        },
        {
          "byte_end": 21951,
          "byte_start": 21204,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "within this `{async block@src/services/core/user/user_profile.rs:573:87: 590:6}`",
          "line_end": 590,
          "line_start": 573,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 73,
              "highlight_start": 1,
              "text": "        // This service's create_user_profile has a different signature."
            },
            {
              "highlight_end": 81,
              "highlight_start": 1,
              "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
            },
            {
              "highlight_end": 90,
              "highlight_start": 1,
              "text": "        // This might need further refinement based on how AuthService intends to use it."
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        if profile.telegram_user_id.is_none() {"
            },
            {
              "highlight_end": 57,
              "highlight_start": 1,
              "text": "            return Err(ArbitrageError::validation_error("
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
            },
            {
              "highlight_end": 16,
              "highlight_start": 1,
              "text": "            ));"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 36,
              "highlight_start": 1,
              "text": "        let _created_profile = self"
            },
            {
              "highlight_end": 34,
              "highlight_start": 1,
              "text": "            .create_user_profile("
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_user_id.unwrap(),"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "                profile.invitation_code.clone(),"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_username.clone(),"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            )"
            },
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "            .await?;"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `*mut u8` cannot be shared between threads safely\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |_____^ `*mut u8` cannot be shared between threads safely\n     |\n     = help: within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`\nnote: required because it appears within the type `std::marker::PhantomData<*mut u8>`\n    --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs:777:12\n     |\n777  | pub struct PhantomData<T: ?Sized>;\n     |            ^^^^^^^^^^^\nnote: required because it appears within the type `worker::wasm_bindgen::JsValue`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs:135:12\n     |\n135  | pub struct JsValue {\n     |            ^^^^^^^\nnote: required because it appears within the type `worker::js_sys::Object`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs:3445:14\n     |\n3445 |     pub type Object;\n     |              ^^^^^^\nnote: required because it appears within the type `D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs:59:14\n     |\n59   |     pub type D1PreparedStatement;\n     |              ^^^^^^^^^^^^^^^^^^^\nnote: required because it appears within the type `worker::D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:224:12\n     |\n224  | pub struct D1PreparedStatement(D1Prepared...\n     |            ^^^^^^^^^^^^^^^^^^^\n     = note: required for `&worker::D1PreparedStatement` to implement `std::marker::Send`\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:286:5\n     |\n286  | /     {\n287  | |         let result = JsFuture::from(sel...\n288  | |         let js_value = cast_to_d1_error...\n289  | |         let value = serde_wasm_bindgen:...\n290  | |         Ok(value)\n291  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:1281:61\n     |\n1281 |       ) -> ArbitrageResult<Option<crate::types::UserProfile>> {\n     |  _____________________________________________________________^\n1282 | |         if let Some(ref user_repo) = self.user_repository {\n1283 | |             user_repo.get_user_by_telegram_id(telegram_user_id)....\n1284 | |         } else {\n...    |\n1315 | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/user/user_profile.rs:43:39\n     |\n43   |       ) -> ArbitrageResult<UserProfile> {\n     |  _______________________________________^\n44   | |         // Validate telegram_user_id is po...\n45   | |         if telegram_user_id <= 0 {\n46   | |             return Err(ArbitrageError::val...\n...    |\n77   | |         Ok(profile)\n78   | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:573:87\n     |\n573  |       async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n...    |\n589  | |         Ok(())\n590  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12558027220147542886.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `std::marker::PhantomData<*mut u8>`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29598,
              "byte_start": 29587,
              "column_end": 23,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs",
              "is_primary": true,
              "label": null,
              "line_end": 777,
              "line_start": 777,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 12,
                  "text": "pub struct PhantomData<T: ?Sized>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::wasm_bindgen::JsValue`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4151,
              "byte_start": 4144,
              "column_end": 19,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 135,
              "line_start": 135,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 12,
                  "text": "pub struct JsValue {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::js_sys::Object`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 153473,
              "byte_start": 153467,
              "column_end": 20,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3445,
              "line_start": 3445,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 14,
                  "text": "    pub type Object;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2093,
              "byte_start": 2074,
              "column_end": 33,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 59,
              "line_start": 59,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 33,
                  "highlight_start": 14,
                  "text": "    pub type D1PreparedStatement;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 6859,
              "byte_start": 6840,
              "column_end": 31,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 224,
              "line_start": 224,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 12,
                  "text": "pub struct D1PreparedStatement(D1PreparedStatementSys);"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for `&worker::D1PreparedStatement` to implement `std::marker::Send`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9280,
              "byte_start": 9074,
              "column_end": 6,
              "column_start": 5,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 291,
              "line_start": 286,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 6,
                  "highlight_start": 5,
                  "text": "    {"
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.first(col_name)?).await;"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        let js_value = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 63,
                  "highlight_start": 1,
                  "text": "        let value = serde_wasm_bindgen::from_value(js_value)?;"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "        Ok(value)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 47390,
              "byte_start": 46019,
              "column_end": 6,
              "column_start": 61,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 1315,
              "line_start": 1281,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 62,
                  "highlight_start": 61,
                  "text": "    ) -> ArbitrageResult<Option<crate::types::UserProfile>> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "            user_repo.get_user_by_telegram_id(telegram_user_id).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 47,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database query"
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "            let stmt = self"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                .db"
                },
                {
                  "highlight_end": 95,
                  "highlight_start": 1,
                  "text": "                .prepare(\"SELECT profile_data FROM user_profiles WHERE telegram_user_id = ?\");"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 30,
                  "highlight_start": 1,
                  "text": "            let result = stmt"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "                .bind(&[telegram_user_id.into()])"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 96,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "                })?"
                },
                {
                  "highlight_end": 67,
                  "highlight_start": 1,
                  "text": "                .first::<HashMap<String, serde_json::Value>>(None)"
                },
                {
                  "highlight_end": 23,
                  "highlight_start": 1,
                  "text": "                .await"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                    ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "                })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            if let Some(row) = result {"
                },
                {
                  "highlight_end": 70,
                  "highlight_start": 1,
                  "text": "                if let Some(profile_data) = row.get(\"profile_data\") {"
                },
                {
                  "highlight_end": 61,
                  "highlight_start": 1,
                  "text": "                    let profile: crate::types::UserProfile ="
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "                        serde_json::from_value(profile_data.clone()).map_err(|e| {"
                },
                {
                  "highlight_end": 99,
                  "highlight_start": 1,
                  "text": "                            ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                        })?;"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "                    Ok(Some(profile))"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                } else {"
                },
                {
                  "highlight_end": 29,
                  "highlight_start": 1,
                  "text": "                    Ok(None)"
                },
                {
                  "highlight_end": 18,
                  "highlight_start": 1,
                  "text": "                }"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            } else {"
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "                Ok(None)"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            }"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2891,
              "byte_start": 1631,
              "column_end": 6,
              "column_start": 39,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 78,
              "line_start": 43,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 40,
                  "highlight_start": 39,
                  "text": "    ) -> ArbitrageResult<UserProfile> {"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "        // Validate telegram_user_id is positive"
                },
                {
                  "highlight_end": 35,
                  "highlight_start": 1,
                  "text": "        if telegram_user_id <= 0 {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 53,
                  "highlight_start": 1,
                  "text": "                \"Telegram user ID must be positive\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 74,
                  "highlight_start": 1,
                  "text": "        // Check if user already exists (check D1 for authoritative data)"
                },
                {
                  "highlight_end": 38,
                  "highlight_start": 1,
                  "text": "        if let Some(_existing) = self"
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "            .d1_service"
                },
                {
                  "highlight_end": 55,
                  "highlight_start": 1,
                  "text": "            .get_user_by_telegram_id(telegram_user_id)"
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "            .await?"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 68,
                  "highlight_start": 1,
                  "text": "                \"User profile already exists for this Telegram ID\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 73,
                  "highlight_start": 1,
                  "text": "        // Validate invitation code if provided (D1 for persistent data)"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        if let Some(ref code) = invitation_code {"
                },
                {
                  "highlight_end": 64,
                  "highlight_start": 1,
                  "text": "            self.validate_and_use_invitation_code(code).await?;"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 85,
                  "highlight_start": 1,
                  "text": "        let mut profile = UserProfile::new(Some(telegram_user_id), invitation_code);"
                },
                {
                  "highlight_end": 55,
                  "highlight_start": 1,
                  "text": "        profile.telegram_username = telegram_username;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 52,
                  "highlight_start": 1,
                  "text": "        // Store profile in D1 (persistent storage)"
                },
                {
                  "highlight_end": 62,
                  "highlight_start": 1,
                  "text": "        self.d1_service.create_user_profile(&profile).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "        // Create user session in KV (fast access)"
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "        let session = UserSession::new(profile.user_id.clone(), telegram_user_id);"
                },
                {
                  "highlight_end": 50,
                  "highlight_start": 1,
                  "text": "        self.store_user_session(&session).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 20,
                  "highlight_start": 1,
                  "text": "        Ok(profile)"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 21951,
              "byte_start": 21204,
              "column_end": 6,
              "column_start": 87,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 590,
              "line_start": 573,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 88,
                  "highlight_start": 87,
                  "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 73,
                  "highlight_start": 1,
                  "text": "        // This service's create_user_profile has a different signature."
                },
                {
                  "highlight_end": 81,
                  "highlight_start": 1,
                  "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
                },
                {
                  "highlight_end": 90,
                  "highlight_start": 1,
                  "text": "        // This might need further refinement based on how AuthService intends to use it."
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        if profile.telegram_user_id.is_none() {"
                },
                {
                  "highlight_end": 57,
                  "highlight_start": 1,
                  "text": "            return Err(ArbitrageError::validation_error("
                },
                {
                  "highlight_end": 94,
                  "highlight_start": 1,
                  "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            ));"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "        let _created_profile = self"
                },
                {
                  "highlight_end": 34,
                  "highlight_start": 1,
                  "text": "            .create_user_profile("
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                profile.telegram_user_id.unwrap(),"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "                profile.invitation_code.clone(),"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "                profile.telegram_username.clone(),"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            )"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            .await?;"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "        Ok(())"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12558027220147542886.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`*mut u8` cannot be shared between threads safely",
      "spans": [
        {
          "byte_end": 21951,
          "byte_start": 21204,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`*mut u8` cannot be shared between threads safely",
          "line_end": 590,
          "line_start": 573,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn create_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 73,
              "highlight_start": 1,
              "text": "        // This service's create_user_profile has a different signature."
            },
            {
              "highlight_end": 81,
              "highlight_start": 1,
              "text": "        // Adapting by assuming telegram_user_id can be extracted or is primary."
            },
            {
              "highlight_end": 90,
              "highlight_start": 1,
              "text": "        // This might need further refinement based on how AuthService intends to use it."
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        if profile.telegram_user_id.is_none() {"
            },
            {
              "highlight_end": 57,
              "highlight_start": 1,
              "text": "            return Err(ArbitrageError::validation_error("
            },
            {
              "highlight_end": 94,
              "highlight_start": 1,
              "text": "                \"Telegram user ID is required to create a profile via this provider method.\","
            },
            {
              "highlight_end": 16,
              "highlight_start": 1,
              "text": "            ));"
            },
            {
              "highlight_end": 10,
              "highlight_start": 1,
              "text": "        }"
            },
            {
              "highlight_end": 36,
              "highlight_start": 1,
              "text": "        let _created_profile = self"
            },
            {
              "highlight_end": 34,
              "highlight_start": 1,
              "text": "            .create_user_profile("
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_user_id.unwrap(),"
            },
            {
              "highlight_end": 49,
              "highlight_start": 1,
              "text": "                profile.invitation_code.clone(),"
            },
            {
              "highlight_end": 51,
              "highlight_start": 1,
              "text": "                profile.telegram_username.clone(),"
            },
            {
              "highlight_end": 14,
              "highlight_start": 1,
              "text": "            )"
            },
            {
              "highlight_end": 21,
              "highlight_start": 1,
              "text": "            .await?;"
            },
            {
              "highlight_end": 15,
              "highlight_start": 1,
              "text": "        Ok(())"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error: future cannot be sent between threads safely\n   --> src/services/core/user/user_profile.rs:592:87\n    |\n592 |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n    |  _______________________________________________________________________________________^\n593 | |         self.update_user_profile(profile).await\n594 | |     }\n    | |_____^ future created by async block is not `Send`\n    |\n    = help: within `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`\nnote: future is not `Send` as this value is used across an await\n   --> src/services/core/infrastructure/database_repositories/database_manager.rs:820:14\n    |\n811 |               stmt.bind(&[\n    |  ________________________-\n812 | |                 profile_str.into(),\n813 | |                 chrono::Utc::now().to_rf...\n814 | |                 user_id.into(),\n815 | |             ])\n    | |_____________- has type `[worker::wasm_bindgen::JsValue; 3]` which is not `Send`\n...\n820 |               .await\n    |                ^^^^^ await occurs here, with the value maybe used later\n    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-8809475470419080563.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`, the trait `std::marker::Send` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "future is not `Send` as this value is used across an await",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29317,
              "byte_start": 29312,
              "column_end": 19,
              "column_start": 14,
              "expansion": {
                "def_site_span": {
                  "byte_end": 0,
                  "byte_start": 0,
                  "column_end": 1,
                  "column_start": 1,
                  "expansion": null,
                  "file_name": "src/lib.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 1,
                  "line_start": 1,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": []
                },
                "macro_decl_name": "desugaring of `await` expression",
                "span": {
                  "byte_end": 29317,
                  "byte_start": 29312,
                  "column_end": 19,
                  "column_start": 14,
                  "expansion": null,
                  "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
                  "is_primary": false,
                  "label": null,
                  "line_end": 820,
                  "line_start": 820,
                  "suggested_replacement": null,
                  "suggestion_applicability": null,
                  "text": [
                    {
                      "highlight_end": 19,
                      "highlight_start": 14,
                      "text": "            .await"
                    }
                  ]
                }
              },
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": "await occurs here, with the value maybe used later",
              "line_end": 820,
              "line_start": 820,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 14,
                  "text": "            .await"
                }
              ]
            },
            {
              "byte_end": 29143,
              "byte_start": 29004,
              "column_end": 14,
              "column_start": 24,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": false,
              "label": "has type `[worker::wasm_bindgen::JsValue; 3]` which is not `Send`",
              "line_end": 815,
              "line_start": 811,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 25,
                  "highlight_start": 24,
                  "text": "            stmt.bind(&["
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "                profile_str.into(),"
                },
                {
                  "highlight_end": 56,
                  "highlight_start": 1,
                  "text": "                chrono::Utc::now().to_rfc3339().into(),"
                },
                {
                  "highlight_end": 32,
                  "highlight_start": 1,
                  "text": "                user_id.into(),"
                },
                {
                  "highlight_end": 14,
                  "highlight_start": 1,
                  "text": "            ])"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-8809475470419080563.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": null,
      "level": "error",
      "message": "future cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 22094,
          "byte_start": 22039,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "future created by async block is not `Send`",
          "line_end": 594,
          "line_start": 592,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        self.update_user_profile(profile).await"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `Rc<RefCell<Inner>>` cannot be sent between threads safely\n   --> src/services/core/user/user_profile.rs:592:87\n    |\n592 |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n    |  _______________________________________________________________________________________^\n593 | |         self.update_user_profile(profile).await\n594 | |     }\n    | |     ^\n    | |     |\n    | |_____`Rc<RefCell<Inner>>` cannot be sent between threads safely\n    |       within this `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`\n    |\n    = help: within `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`\nnote: required because it appears within the type `JsFuture`\n   --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs:110:12\n    |\n110 | pub struct JsFuture {\n    |            ^^^^^^^^\nnote: required because it's used within this `async` fn body\n   --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:294:49\n    |\n294 |       pub async fn run(&self) -> Result<D1Result> {\n    |  _________________________________________________^\n295 | |         let result = JsFuture::from(self.0.run()?).a...\n296 | |         let result = cast_to_d1_error(result)?;\n297 | |         Ok(D1Result(result.into()))\n298 | |     }\n    | |_____^\nnote: required because it's used within this `async` fn body\n   --> src/services/core/infrastructure/database_repositories/database_manager.rs:791:30\n    |\n791 |       ) -> ArbitrageResult<()> {\n    |  ______________________________^\n792 | |         if let Some(ref user_repo) = sel...\n...   |\n827 | |     }\n    | |_____^\nnote: required because it's used within this `async` fn body\n   --> src/services/core/user/user_profile.rs:113:91\n    |\n113 |       pub async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n    |  ___________________________________________________________________________________________^\n114 | |         let mut updated_profile = profile.clone();\n115 | |         updated_profile.updated_at = chrono::Utc::now().timestamp_millis() as u64;\n...   |\n129 | |         Ok(())\n130 | |     }\n    | |_____^\nnote: required because it's used within this `async` block\n   --> src/services/core/user/user_profile.rs:592:87\n    |\n592 |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n    |  _______________________________________________________________________________________^\n593 | |         self.update_user_profile(profile).await\n594 | |     }\n    | |_____^\n    = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n    = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-6419748827378335496.txt'\n    = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`, the trait `std::marker::Send` is not implemented for `Rc<RefCell<Inner>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `JsFuture`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 3518,
              "byte_start": 3510,
              "column_end": 20,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-futures-0.4.50/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 110,
              "line_start": 110,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 12,
                  "text": "pub struct JsFuture {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9551,
              "byte_start": 9402,
              "column_end": 6,
              "column_start": 49,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 298,
              "line_start": 294,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 50,
                  "highlight_start": 49,
                  "text": "    pub async fn run(&self) -> Result<D1Result> {"
                },
                {
                  "highlight_end": 58,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.run()?).await;"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        let result = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "        Ok(D1Result(result.into()))"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29487,
              "byte_start": 28121,
              "column_end": 6,
              "column_start": 30,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 827,
              "line_start": 791,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 30,
                  "text": "    ) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 52,
                  "highlight_start": 1,
                  "text": "            // Use the user repository if available"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "            // Convert JSON to UserProfile first"
                },
                {
                  "highlight_end": 98,
                  "highlight_start": 1,
                  "text": "            let profile: crate::types::UserProfile = serde_json::from_value(profile_data.clone())"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 87,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 58,
                  "highlight_start": 1,
                  "text": "            user_repo.update_user_profile(&profile).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database update"
                },
                {
                  "highlight_end": 80,
                  "highlight_start": 1,
                  "text": "            let profile_str = serde_json::to_string(profile_data).map_err(|e| {"
                },
                {
                  "highlight_end": 91,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::parse_error(format!(\"Failed to serialize profile: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            let stmt = self.db.prepare("
                },
                {
                  "highlight_end": 95,
                  "highlight_start": 1,
                  "text": "                \"UPDATE user_profiles SET profile_data = ?, updated_at = ? WHERE user_id = ?\","
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            );"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "            stmt.bind(&["
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "                profile_str.into(),"
                },
                {
                  "highlight_end": 56,
                  "highlight_start": 1,
                  "text": "                chrono::Utc::now().to_rfc3339().into(),"
                },
                {
                  "highlight_end": 32,
                  "highlight_start": 1,
                  "text": "                user_id.into(),"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            ])"
                },
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "            .map_err(|e| {"
                },
                {
                  "highlight_end": 92,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            })?"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            .run()"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            .await"
                },
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "            .map_err(|e| {"
                },
                {
                  "highlight_end": 90,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            Ok(())"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4829,
              "byte_start": 4228,
              "column_end": 6,
              "column_start": 91,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 130,
              "line_start": 113,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 92,
                  "highlight_start": 91,
                  "text": "    pub async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "        let mut updated_profile = profile.clone();"
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "        updated_profile.updated_at = chrono::Utc::now().timestamp_millis() as u64;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 45,
                  "highlight_start": 1,
                  "text": "        // Update in D1 (persistent storage)"
                },
                {
                  "highlight_end": 80,
                  "highlight_start": 1,
                  "text": "        let profile_data = serde_json::to_value(&updated_profile).map_err(|e| {"
                },
                {
                  "highlight_end": 87,
                  "highlight_start": 1,
                  "text": "            ArbitrageError::parse_error(format!(\"Failed to serialize profile: {}\", e))"
                },
                {
                  "highlight_end": 13,
                  "highlight_start": 1,
                  "text": "        })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "        self.d1_service"
                },
                {
                  "highlight_end": 74,
                  "highlight_start": 1,
                  "text": "            .update_user_profile(&updated_profile.user_id, &profile_data)"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            .await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "        // Invalidate cache"
                },
                {
                  "highlight_end": 69,
                  "highlight_start": 1,
                  "text": "        self.invalidate_user_cache(&updated_profile.user_id).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "        Ok(())"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 22094,
              "byte_start": 22039,
              "column_end": 6,
              "column_start": 87,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 594,
              "line_start": 592,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 88,
                  "highlight_start": 87,
                  "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        self.update_user_profile(profile).await"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-6419748827378335496.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
      "spans": [
        {
          "byte_end": 22094,
          "byte_start": 22039,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`Rc<RefCell<Inner>>` cannot be sent between threads safely",
          "line_end": 594,
          "line_start": 592,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        self.update_user_profile(profile).await"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        },
        {
          "byte_end": 22094,
          "byte_start": 22039,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "within this `{async block@src/services/core/user/user_profile.rs:592:87: 594:6}`",
          "line_end": 594,
          "line_start": 592,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        self.update_user_profile(profile).await"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  },
  {
    "reason": "compiler-message",
    "package_id": "path+file:///Users/irfandi/Coding/2025/ArbEdge#arb_edge@0.1.0",
    "manifest_path": "/Users/irfandi/Coding/2025/ArbEdge/Cargo.toml",
    "target": {
      "kind": [
        "cdylib",
        "rlib"
      ],
      "crate_types": [
        "cdylib",
        "rlib"
      ],
      "name": "arb_edge",
      "src_path": "/Users/irfandi/Coding/2025/ArbEdge/src/lib.rs",
      "edition": "2021",
      "doc": true,
      "doctest": true,
      "test": true
    },
    "message": {
      "rendered": "error[E0277]: `*mut u8` cannot be shared between threads safely\n    --> src/services/core/user/user_profile.rs:592:87\n     |\n592  |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n593  | |         self.update_user_profile(profile).await\n594  | |     }\n     | |_____^ `*mut u8` cannot be shared between threads safely\n     |\n     = help: within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`\nnote: required because it appears within the type `std::marker::PhantomData<*mut u8>`\n    --> /Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs:777:12\n     |\n777  | pub struct PhantomData<T: ?Sized>;\n     |            ^^^^^^^^^^^\nnote: required because it appears within the type `worker::wasm_bindgen::JsValue`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs:135:12\n     |\n135  | pub struct JsValue {\n     |            ^^^^^^^\nnote: required because it appears within the type `worker::js_sys::Object`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs:3445:14\n     |\n3445 |     pub type Object;\n     |              ^^^^^^\nnote: required because it appears within the type `D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs:59:14\n     |\n59   |     pub type D1PreparedStatement;\n     |              ^^^^^^^^^^^^^^^^^^^\nnote: required because it appears within the type `worker::D1PreparedStatement`\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:224:12\n     |\n224  | pub struct D1PreparedStatement(D1Prepared...\n     |            ^^^^^^^^^^^^^^^^^^^\n     = note: required for `&worker::D1PreparedStatement` to implement `std::marker::Send`\nnote: required because it's used within this `async` fn body\n    --> /Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs:294:49\n     |\n294  |       pub async fn run(&self) -> Result<D1Result> {\n     |  _________________________________________________^\n295  | |         let result = JsFuture::from(self.0.run()?).a...\n296  | |         let result = cast_to_d1_error(result)?;\n297  | |         Ok(D1Result(result.into()))\n298  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/infrastructure/database_repositories/database_manager.rs:791:30\n     |\n791  |       ) -> ArbitrageResult<()> {\n     |  ______________________________^\n792  | |         if let Some(ref user_repo) = se...\n...    |\n827  | |     }\n     | |_____^\nnote: required because it's used within this `async` fn body\n    --> src/services/core/user/user_profile.rs:113:91\n     |\n113  |       pub async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  ___________________________________________________________________________________________^\n114  | |         let mut updated_profile = profile.clone();\n115  | |         updated_profile.updated_at = chrono::Utc::now().timestamp_millis() as u64;\n...    |\n129  | |         Ok(())\n130  | |     }\n     | |_____^\nnote: required because it's used within this `async` block\n    --> src/services/core/user/user_profile.rs:592:87\n     |\n592  |       async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {\n     |  _______________________________________________________________________________________^\n593  | |         self.update_user_profile(profile).await\n594  | |     }\n     | |_____^\n     = note: required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`\n     = note: the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12558027220147542886.txt'\n     = note: consider using `--verbose` to print the full type name to the console\n\n",
      "$message_type": "diagnostic",
      "children": [
        {
          "children": [],
          "code": null,
          "level": "help",
          "message": "within `worker::D1PreparedStatement`, the trait `std::marker::Sync` is not implemented for `*mut u8`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `std::marker::PhantomData<*mut u8>`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29598,
              "byte_start": 29587,
              "column_end": 23,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/marker.rs",
              "is_primary": true,
              "label": null,
              "line_end": 777,
              "line_start": 777,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 23,
                  "highlight_start": 12,
                  "text": "pub struct PhantomData<T: ?Sized>;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::wasm_bindgen::JsValue`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4151,
              "byte_start": 4144,
              "column_end": 19,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/wasm-bindgen-0.2.100/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 135,
              "line_start": 135,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 19,
                  "highlight_start": 12,
                  "text": "pub struct JsValue {"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::js_sys::Object`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 153473,
              "byte_start": 153467,
              "column_end": 20,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/js-sys-0.3.77/src/lib.rs",
              "is_primary": true,
              "label": null,
              "line_end": 3445,
              "line_start": 3445,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 20,
                  "highlight_start": 14,
                  "text": "    pub type Object;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 2093,
              "byte_start": 2074,
              "column_end": 33,
              "column_start": 14,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-sys-0.5.0/src/types/d1.rs",
              "is_primary": true,
              "label": null,
              "line_end": 59,
              "line_start": 59,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 33,
                  "highlight_start": 14,
                  "text": "    pub type D1PreparedStatement;"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it appears within the type `worker::D1PreparedStatement`",
          "rendered": null,
          "spans": [
            {
              "byte_end": 6859,
              "byte_start": 6840,
              "column_end": 31,
              "column_start": 12,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 224,
              "line_start": 224,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 12,
                  "text": "pub struct D1PreparedStatement(D1PreparedStatementSys);"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for `&worker::D1PreparedStatement` to implement `std::marker::Send`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 9551,
              "byte_start": 9402,
              "column_end": 6,
              "column_start": 49,
              "expansion": null,
              "file_name": "/Users/irfandi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/worker-0.5.0/src/d1/mod.rs",
              "is_primary": true,
              "label": null,
              "line_end": 298,
              "line_start": 294,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 50,
                  "highlight_start": 49,
                  "text": "    pub async fn run(&self) -> Result<D1Result> {"
                },
                {
                  "highlight_end": 58,
                  "highlight_start": 1,
                  "text": "        let result = JsFuture::from(self.0.run()?).await;"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        let result = cast_to_d1_error(result)?;"
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "        Ok(D1Result(result.into()))"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 29487,
              "byte_start": 28121,
              "column_end": 6,
              "column_start": 30,
              "expansion": null,
              "file_name": "src/services/core/infrastructure/database_repositories/database_manager.rs",
              "is_primary": true,
              "label": null,
              "line_end": 827,
              "line_start": 791,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 31,
                  "highlight_start": 30,
                  "text": "    ) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 60,
                  "highlight_start": 1,
                  "text": "        if let Some(ref user_repo) = self.user_repository {"
                },
                {
                  "highlight_end": 52,
                  "highlight_start": 1,
                  "text": "            // Use the user repository if available"
                },
                {
                  "highlight_end": 49,
                  "highlight_start": 1,
                  "text": "            // Convert JSON to UserProfile first"
                },
                {
                  "highlight_end": 98,
                  "highlight_start": 1,
                  "text": "            let profile: crate::types::UserProfile = serde_json::from_value(profile_data.clone())"
                },
                {
                  "highlight_end": 31,
                  "highlight_start": 1,
                  "text": "                .map_err(|e| {"
                },
                {
                  "highlight_end": 87,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::parse_error(format!(\"Failed to parse profile: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 58,
                  "highlight_start": 1,
                  "text": "            user_repo.update_user_profile(&profile).await"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "        } else {"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "            // Fallback: direct database update"
                },
                {
                  "highlight_end": 80,
                  "highlight_start": 1,
                  "text": "            let profile_str = serde_json::to_string(profile_data).map_err(|e| {"
                },
                {
                  "highlight_end": 91,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::parse_error(format!(\"Failed to serialize profile: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 40,
                  "highlight_start": 1,
                  "text": "            let stmt = self.db.prepare("
                },
                {
                  "highlight_end": 95,
                  "highlight_start": 1,
                  "text": "                \"UPDATE user_profiles SET profile_data = ?, updated_at = ? WHERE user_id = ?\","
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            );"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 25,
                  "highlight_start": 1,
                  "text": "            stmt.bind(&["
                },
                {
                  "highlight_end": 36,
                  "highlight_start": 1,
                  "text": "                profile_str.into(),"
                },
                {
                  "highlight_end": 56,
                  "highlight_start": 1,
                  "text": "                chrono::Utc::now().to_rfc3339().into(),"
                },
                {
                  "highlight_end": 32,
                  "highlight_start": 1,
                  "text": "                user_id.into(),"
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "            ])"
                },
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "            .map_err(|e| {"
                },
                {
                  "highlight_end": 92,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::database_error(format!(\"Failed to bind parameters: {}\", e))"
                },
                {
                  "highlight_end": 16,
                  "highlight_start": 1,
                  "text": "            })?"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            .run()"
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            .await"
                },
                {
                  "highlight_end": 27,
                  "highlight_start": 1,
                  "text": "            .map_err(|e| {"
                },
                {
                  "highlight_end": 90,
                  "highlight_start": 1,
                  "text": "                ArbitrageError::database_error(format!(\"Failed to execute query: {}\", e))"
                },
                {
                  "highlight_end": 17,
                  "highlight_start": 1,
                  "text": "            })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 19,
                  "highlight_start": 1,
                  "text": "            Ok(())"
                },
                {
                  "highlight_end": 10,
                  "highlight_start": 1,
                  "text": "        }"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` fn body",
          "rendered": null,
          "spans": [
            {
              "byte_end": 4829,
              "byte_start": 4228,
              "column_end": 6,
              "column_start": 91,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 130,
              "line_start": 113,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 92,
                  "highlight_start": 91,
                  "text": "    pub async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 51,
                  "highlight_start": 1,
                  "text": "        let mut updated_profile = profile.clone();"
                },
                {
                  "highlight_end": 83,
                  "highlight_start": 1,
                  "text": "        updated_profile.updated_at = chrono::Utc::now().timestamp_millis() as u64;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 45,
                  "highlight_start": 1,
                  "text": "        // Update in D1 (persistent storage)"
                },
                {
                  "highlight_end": 80,
                  "highlight_start": 1,
                  "text": "        let profile_data = serde_json::to_value(&updated_profile).map_err(|e| {"
                },
                {
                  "highlight_end": 87,
                  "highlight_start": 1,
                  "text": "            ArbitrageError::parse_error(format!(\"Failed to serialize profile: {}\", e))"
                },
                {
                  "highlight_end": 13,
                  "highlight_start": 1,
                  "text": "        })?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 24,
                  "highlight_start": 1,
                  "text": "        self.d1_service"
                },
                {
                  "highlight_end": 74,
                  "highlight_start": 1,
                  "text": "            .update_user_profile(&updated_profile.user_id, &profile_data)"
                },
                {
                  "highlight_end": 21,
                  "highlight_start": 1,
                  "text": "            .await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 28,
                  "highlight_start": 1,
                  "text": "        // Invalidate cache"
                },
                {
                  "highlight_end": 69,
                  "highlight_start": 1,
                  "text": "        self.invalidate_user_cache(&updated_profile.user_id).await?;"
                },
                {
                  "highlight_end": 1,
                  "highlight_start": 1,
                  "text": ""
                },
                {
                  "highlight_end": 15,
                  "highlight_start": 1,
                  "text": "        Ok(())"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required because it's used within this `async` block",
          "rendered": null,
          "spans": [
            {
              "byte_end": 22094,
              "byte_start": 22039,
              "column_end": 6,
              "column_start": 87,
              "expansion": null,
              "file_name": "src/services/core/user/user_profile.rs",
              "is_primary": true,
              "label": null,
              "line_end": 594,
              "line_start": 592,
              "suggested_replacement": null,
              "suggestion_applicability": null,
              "text": [
                {
                  "highlight_end": 88,
                  "highlight_start": 87,
                  "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
                },
                {
                  "highlight_end": 48,
                  "highlight_start": 1,
                  "text": "        self.update_user_profile(profile).await"
                },
                {
                  "highlight_end": 6,
                  "highlight_start": 1,
                  "text": "    }"
                }
              ]
            }
          ]
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "required for the cast from `Pin<Box<...>>` to `Pin<Box<...>>`",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "the full name for the type has been written to '/Users/irfandi/Coding/2025/ArbEdge/target/debug/deps/arb_edge-c01ed0ba60631d7c.long-type-12558027220147542886.txt'",
          "rendered": null,
          "spans": []
        },
        {
          "children": [],
          "code": null,
          "level": "note",
          "message": "consider using `--verbose` to print the full type name to the console",
          "rendered": null,
          "spans": []
        }
      ],
      "code": {
        "code": "E0277",
        "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
      },
      "level": "error",
      "message": "`*mut u8` cannot be shared between threads safely",
      "spans": [
        {
          "byte_end": 22094,
          "byte_start": 22039,
          "column_end": 6,
          "column_start": 87,
          "expansion": null,
          "file_name": "src/services/core/user/user_profile.rs",
          "is_primary": true,
          "label": "`*mut u8` cannot be shared between threads safely",
          "line_end": 594,
          "line_start": 592,
          "suggested_replacement": null,
          "suggestion_applicability": null,
          "text": [
            {
              "highlight_end": 88,
              "highlight_start": 87,
              "text": "    async fn update_user_profile(&self, profile: &UserProfile) -> ArbitrageResult<()> {"
            },
            {
              "highlight_end": 48,
              "highlight_start": 1,
              "text": "        self.update_user_profile(profile).await"
            },
            {
              "highlight_end": 6,
              "highlight_start": 1,
              "text": "    }"
            }
          ]
        }
      ]
    }
  }
]
